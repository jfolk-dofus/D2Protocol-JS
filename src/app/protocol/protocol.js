var CustomDataWrapper = require("../io/custom_data_wrapper.js").CustomDataWrapper;
var BooleanByteWrapper = require("../io/custom_data_wrapper.js").BooleanByteWrapper;

class ProtocolMessage {
    constructor(messageId) {
        this.messageId = messageId;
        this.buffer = new CustomDataWrapper();
    }
};
module.exports.ProtocolMessage = ProtocolMessage;

class ProtocolType {
    constructor(messageId) {
        this.messageId = messageId;
        this.buffer = new CustomDataWrapper();
    }
};
module.exports.ProtocolType = ProtocolType;

module.exports.messages = [];
module.exports.types = [];

module.exports.AccessoryPreviewErrorEnum = {
    PREVIEW_ERROR: 0,
    PREVIEW_COOLDOWN: 1,
    PREVIEW_BAD_ITEM: 2
};

module.exports.AggressableStatusEnum = {
    NON_AGGRESSABLE: 0,
    PvP_ENABLED_AGGRESSABLE: 10,
    PvP_ENABLED_NON_AGGRESSABLE: 11,
    AvA_ENABLED_AGGRESSABLE: 20,
    AvA_ENABLED_NON_AGGRESSABLE: 21,
    AvA_DISQUALIFIED: 22,
    AvA_PREQUALIFIED_AGGRESSABLE: 23
};

module.exports.AllianceRightsBitEnum = {
    ALLIANCE_RIGHT_NONE: 0,
    ALLIANCE_RIGHT_BOSS: 1,
    ALLIANCE_RIGHT_MANAGE_PRISMS: 2,
    ALLIANCE_RIGHT_TALK_IN_CHAN: 4,
    ALLIANCE_RIGHT_RECRUIT_GUILDS: 8,
    ALLIANCE_RIGHT_KICK_GUILDS: 16,
    ALLIANCE_RIGHT_MANAGE_RIGHTS: 32
};

module.exports.BreedEnum = {
    UNDEFINED: 0,
    Feca: 1,
    Osamodas: 2,
    Enutrof: 3,
    Sram: 4,
    Xelor: 5,
    Ecaflip: 6,
    Eniripsa: 7,
    Iop: 8,
    Cra: 9,
    Sadida: 10,
    Sacrieur: 11,
    Pandawa: 12,
    Roublard: 13,
    Zobal: 14,
    Steamer: 15,
    Eliotrope: 16,
    Huppermage: 17,
    Ouginak: 18,
    SUMMONED: -1,
    MONSTER: -2,
    MONSTER_GROUP: -3,
    NPC: -4,
    HUMAN_VENDOR: -5,
    TAX_COLLECTOR: -6,
    MUTANT: -7,
    MUTANT_IN_DUNGEON: -8,
    MOUNT_OUTSIDE: -9,
    PRISM: -10,
    INCARNATION: -11
};

module.exports.BoostableCharacteristicEnum = {
    BOOSTABLE_CHARAC_STRENGTH: 10,
    BOOSTABLE_CHARAC_VITALITY: 11,
    BOOSTABLE_CHARAC_WISDOM: 12,
    BOOSTABLE_CHARAC_CHANCE: 13,
    BOOSTABLE_CHARAC_AGILITY: 14,
    BOOSTABLE_CHARAC_INTELLIGENCE: 15
};

module.exports.AlignmentSideEnum = {
    ALIGNMENT_UNKNOWN: -2,
    ALIGNMENT_WITHOUT: -1,
    ALIGNMENT_NEUTRAL: 0,
    ALIGNMENT_ANGEL: 1,
    ALIGNMENT_EVIL: 2,
    ALIGNMENT_MERCENARY: 3
};

module.exports.CharacterCreationResultEnum = {
    OK: 0,
    ERR_NO_REASON: 1,
    ERR_INVALID_NAME: 2,
    ERR_NAME_ALREADY_EXISTS: 3,
    ERR_TOO_MANY_CHARACTERS: 4,
    ERR_NOT_ALLOWED: 5,
    ERR_NEW_PLAYER_NOT_ALLOWED: 6,
    ERR_RESTRICED_ZONE: 7
};

module.exports.CharacterInventoryPositionEnum = {
    ACCESSORY_POSITION_HAT: 6,
    ACCESSORY_POSITION_CAPE: 7,
    ACCESSORY_POSITION_BELT: 3,
    ACCESSORY_POSITION_BOOTS: 5,
    ACCESSORY_POSITION_AMULET: 0,
    ACCESSORY_POSITION_SHIELD: 15,
    ACCESSORY_POSITION_WEAPON: 1,
    ACCESSORY_POSITION_PETS: 8,
    ACCESSORY_POSITION_RIDE_HARNESS: 29,
    INVENTORY_POSITION_RING_LEFT: 2,
    INVENTORY_POSITION_RING_RIGHT: 4,
    INVENTORY_POSITION_DOFUS_1: 9,
    INVENTORY_POSITION_DOFUS_2: 10,
    INVENTORY_POSITION_DOFUS_3: 11,
    INVENTORY_POSITION_DOFUS_4: 12,
    INVENTORY_POSITION_DOFUS_5: 13,
    INVENTORY_POSITION_DOFUS_6: 14,
    INVENTORY_POSITION_MOUNT: 16,
    INVENTORY_POSITION_MUTATION: 20,
    INVENTORY_POSITION_BOOST_FOOD: 21,
    INVENTORY_POSITION_FIRST_BONUS: 22,
    INVENTORY_POSITION_SECOND_BONUS: 23,
    INVENTORY_POSITION_FIRST_MALUS: 24,
    INVENTORY_POSITION_SECOND_MALUS: 25,
    INVENTORY_POSITION_ROLEPLAY_BUFFER: 26,
    INVENTORY_POSITION_FOLLOWER: 27,
    INVENTORY_POSITION_COMPANION: 28,
    INVENTORY_POSITION_COSTUME: 30,
    INVENTORY_POSITION_NOT_EQUIPED: 63
};

module.exports.CharacterDeletionErrorEnum = {
    DEL_ERR_NO_REASON: 1,
    DEL_ERR_TOO_MANY_CHAR_DELETION: 2,
    DEL_ERR_BAD_SECRET_ANSWER: 3,
    DEL_ERR_RESTRICED_ZONE: 4
};

module.exports.CharacterSpellModificationTypeEnum = {
    INVALID_MODIFICATION: 0,
    RANGEABLE: 1,
    DAMAGE: 2,
    BASE_DAMAGE: 3,
    HEAL_BONUS: 4,
    AP_COST: 5,
    CAST_INTERVAL: 6,
    CAST_INTERVAL_SET: 7,
    CRITICAL_HIT_BONUS: 8,
    CAST_LINE: 9,
    LOS: 10,
    MAX_CAST_PER_TURN: 11,
    MAX_CAST_PER_TARGET: 12,
    RANGE: 13
};

module.exports.ChatActivableChannelsEnum = {
    CHANNEL_GLOBAL: 0,
    CHANNEL_TEAM: 1,
    CHANNEL_GUILD: 2,
    CHANNEL_ALLIANCE: 3,
    CHANNEL_PARTY: 4,
    CHANNEL_SALES: 5,
    CHANNEL_SEEK: 6,
    CHANNEL_NOOB: 7,
    CHANNEL_ADMIN: 8,
    CHANNEL_ADS: 12,
    CHANNEL_ARENA: 13,
    CHANNEL_COMMUNITY: 14,
    PSEUDO_CHANNEL_PRIVATE: 9,
    PSEUDO_CHANNEL_INFO: 10,
    PSEUDO_CHANNEL_FIGHT_LOG: 11
};

module.exports.BuildTypeEnum = {
    RELEASE: 0,
    BETA: 1,
    ALPHA: 2,
    TESTING: 3,
    INTERNAL: 4,
    DEBUG: 5,
    EXPERIMENTAL: 6
};

module.exports.ChatChannelsMultiEnum = {
    CHANNEL_GLOBAL: 0,
    CHANNEL_TEAM: 1,
    CHANNEL_GUILD: 2,
    CHANNEL_ALLIANCE: 3,
    CHANNEL_PARTY: 4,
    CHANNEL_SALES: 5,
    CHANNEL_SEEK: 6,
    CHANNEL_NOOB: 7,
    CHANNEL_ADMIN: 8,
    CHANNEL_ADS: 12,
    CHANNEL_ARENA: 13,
    CHANNEL_COMMUNITY: 14
};

module.exports.ChatErrorEnum = {
    CHAT_ERROR_UNKNOWN: 0,
    CHAT_ERROR_RECEIVER_NOT_FOUND: 1,
    CHAT_ERROR_INTERIOR_MONOLOGUE: 2,
    CHAT_ERROR_NO_GUILD: 3,
    CHAT_ERROR_NO_PARTY: 4,
    CHAT_ERROR_ALLIANCE: 5,
    CHAT_ERROR_INVALID_MAP: 6,
    CHAT_ERROR_NO_PARTY_ARENA: 7,
    CHAT_ERROR_NO_TEAM: 8,
    CHAT_ERROR_MALFORMED_CONTENT: 9
};

module.exports.ClientTechnologyEnum = {
    CLIENT_TECHNOLOGY_UNKNOWN: 0,
    CLIENT_AIR: 1,
    CLIENT_FLASH: 2
};

module.exports.ClientInstallTypeEnum = {
    CLIENT_INSTALL_UNKNOWN: 0,
    CLIENT_BUNDLE: 1,
    CLIENT_STREAMING: 2
};

module.exports.ConsoleMessageTypeEnum = {
    CONSOLE_TEXT_MESSAGE: 0,
    CONSOLE_INFO_MESSAGE: 1,
    CONSOLE_ERR_MESSAGE: 2
};

module.exports.CompassTypeEnum = {
    COMPASS_TYPE_SIMPLE: 0,
    COMPASS_TYPE_SPOUSE: 1,
    COMPASS_TYPE_PARTY: 2,
    COMPASS_TYPE_PVP_SEEK: 3,
    COMPASS_TYPE_QUEST: 4
};

module.exports.CraftResultEnum = {
    CRAFT_IMPOSSIBLE: 0,
    CRAFT_FAILED: 1,
    CRAFT_SUCCESS: 2,
    CRAFT_NEUTRAL: 3
};

module.exports.DareCriteriaTypeEnum = {
    MONSTER_ID: 0,
    CHALLENGE_ID: 1,
    IDOLS: 2,
    IDOLS_SCORE: 3,
    MAX_CHAR_LVL: 4,
    MAX_FIGHT_TURNS: 5,
    MAX_COUNT_CHAR: 6,
    MIN_COUNT_CHAR: 7,
    FORBIDDEN_BREEDS: 8,
    MANDATORY_BREEDS: 9,
    MIN_COUNT_MONSTERS: 10
};

module.exports.CharacterRemodelingEnum = {
    CHARACTER_REMODELING_NOT_APPLICABLE: 0,
    CHARACTER_REMODELING_NAME: 1,
    CHARACTER_REMODELING_COLORS: 2,
    CHARACTER_REMODELING_COSMETIC: 4,
    CHARACTER_REMODELING_BREED: 8,
    CHARACTER_REMODELING_GENDER: 16,
    CHARACTER_OPT_REMODELING_NAME: 32
};

module.exports.DareErrorEnum = {
    UKNOWN_ERROR: 0,
    DARE_CREATION_FAILED: 1,
    DARE_UNKNOWN: 2,
    DARE_CANT_CANCEL: 3,
    DARE_REWARD_UNKNOWN: 4
};

module.exports.DebugLevelEnum = {
    LEVEL_TRACE: 0,
    LEVEL_DEBUG: 1,
    LEVEL_INFO: 2,
    LEVEL_WARN: 3,
    LEVEL_ERROR: 4,
    LEVEL_FATAL: 5
};

module.exports.DelayedActionTypeEnum = {
    DELAYED_ACTION_DISCONNECT: 0,
    DELAYED_ACTION_OBJECT_USE: 1,
    DELAYED_ACTION_JOIN_CHARACTER: 2,
    DELAYED_ACTION_AGGRESSION_IMMUNE: 3
};

module.exports.DialogTypeEnum = {
    DIALOG_BOOK: 0,
    DIALOG_DIALOG: 1,
    DIALOG_LOCKABLE: 2,
    DIALOG_PURCHASABLE: 3,
    DIALOG_GUILD_INVITATION: 4,
    DIALOG_GUILD_CREATE: 5,
    DIALOG_GUILD_RENAME: 6,
    DIALOG_MARRIAGE: 7,
    DIALOG_DUNGEON_MEETING: 8,
    DIALOG_SPELL_FORGET: 9,
    DIALOG_TELEPORTER: 10,
    DIALOG_EXCHANGE: 11,
    DIALOG_ALLIANCE_INVITATION: 12,
    DIALOG_ALLIANCE_CREATE: 13,
    DIALOG_ALLIANCE_RENAME: 14,
    DIALOG_HAVENBAG_MEETING: 15
};

module.exports.DirectionsEnum = {
    DIRECTION_EAST: 0,
    DIRECTION_SOUTH_EAST: 1,
    DIRECTION_SOUTH: 2,
    DIRECTION_SOUTH_WEST: 3,
    DIRECTION_WEST: 4,
    DIRECTION_NORTH_WEST: 5,
    DIRECTION_NORTH: 6,
    DIRECTION_NORTH_EAST: 7
};

module.exports.ExchangeErrorEnum = {
    REQUEST_IMPOSSIBLE: 1,
    REQUEST_CHARACTER_OCCUPIED: 2,
    REQUEST_CHARACTER_JOB_NOT_EQUIPED: 3,
    REQUEST_CHARACTER_TOOL_TOO_FAR: 4,
    REQUEST_CHARACTER_OVERLOADED: 5,
    REQUEST_CHARACTER_NOT_SUSCRIBER: 6,
    REQUEST_CHARACTER_RESTRICTED: 7,
    REQUEST_CHARACTER_GUEST: 8,
    SELL_ERROR: 63,
    BUY_ERROR: 64,
    MOUNT_PADDOCK_ERROR: 10,
    BID_SEARCH_ERROR: 11
};

module.exports.ExchangeTypeEnum = {
    NPC_SHOP: 0,
    PLAYER_TRADE: 1,
    NPC_TRADE: 2,
    CRAFT: 3,
    DISCONNECTED_VENDOR: 4,
    STORAGE: 5,
    SHOP_STOCK: 6,
    TAXCOLLECTOR: 8,
    NPC_MODIFY_TRADE: 9,
    BIDHOUSE_SELL: 10,
    BIDHOUSE_BUY: 11,
    MULTICRAFT_CRAFTER: 12,
    MULTICRAFT_CUSTOMER: 13,
    JOB_INDEX: 14,
    MOUNT: 15,
    MOUNT_STABLE: 16,
    NPC_RESURECT_PET: 17,
    NPC_TRADE_RIDE: 18,
    REALESTATE_HOUSE: 19,
    REALESTATE_FARM: 20,
    RUNES_TRADE: 21,
    RECYCLE_TRADE: 22,
    BANK: 23,
    TRASHBIN: 24,
    ALLIANCE_PRISM: 25,
    HAVENBAG: 26,
    NPC_TRADE_MULDO: 27
};

module.exports.FighterRefusedReasonEnum = {
    FIGHTER_REFUSED: -1,
    FIGHTER_ACCEPTED: 0,
    CHALLENGE_FULL: 1,
    TEAM_FULL: 2,
    WRONG_ALIGNMENT: 3,
    WRONG_GUILD: 4,
    TOO_LATE: 5,
    MUTANT_REFUSED: 6,
    WRONG_MAP: 7,
    JUST_RESPAWNED: 8,
    IM_OCCUPIED: 9,
    OPPONENT_OCCUPIED: 10,
    FIGHT_MYSELF: 11,
    INSUFFICIENT_RIGHTS: 12,
    MEMBER_ACCOUNT_NEEDED: 13,
    OPPONENT_NOT_MEMBER: 14,
    TEAM_LIMITED_BY_MAINCHARACTER: 15,
    MULTIACCOUNT_NOT_ALLOWED: 16,
    GHOST_REFUSED: 17,
    RESTRICTED_ACCOUNT: 19,
    WRONG_ALLIANCE: 20,
    AVA_ZONE: 21,
    COMPANION_REFUSED: 22,
    NOT_ENOUGH_ROOM: 23,
    GUEST_ACCOUNT: 24
};

module.exports.ExchangeReplayStopReasonEnum = {
    STOPPED_REASON_OK: 1,
    STOPPED_REASON_USER: 2,
    STOPPED_REASON_MISSING_RESSOURCE: 3,
    STOPPED_REASON_IMPOSSIBLE_MODIFICATION: 4
};

module.exports.FightOutcomeEnum = {
    RESULT_LOST: 0,
    RESULT_DRAW: 1,
    RESULT_VICTORY: 2,
    RESULT_TAX: 5,
    RESULT_DEFENDER_GROUP: 6
};

module.exports.FightSpellCastCriticalEnum = {
    NORMAL: 1,
    CRITICAL_HIT: 2,
    CRITICAL_FAIL: 3
};

module.exports.FightTypeEnum = {
    FIGHT_TYPE_CHALLENGE: 0,
    FIGHT_TYPE_AGRESSION: 1,
    FIGHT_TYPE_PvMA: 2,
    FIGHT_TYPE_MXvM: 3,
    FIGHT_TYPE_PvM: 4,
    FIGHT_TYPE_PvT: 5,
    FIGHT_TYPE_PvMU: 6,
    FIGHT_TYPE_PVP_ARENA: 7,
    FIGHT_TYPE_Koh: 8,
    FIGHT_TYPE_PvPr: 9
};

module.exports.GameActionFightInvisibilityStateEnum = {
    INVISIBLE: 1,
    DETECTED: 2,
    VISIBLE: 3
};

module.exports.GameActionMarkCellsTypeEnum = {
    CELLS_CIRCLE: 0,
    CELLS_CROSS: 1,
    CELLS_SQUARE: 2
};

module.exports.GameActionMarkTypeEnum = {
    GLYPH: 1,
    TRAP: 2,
    WALL: 3,
    PORTAL: 4,
    RUNE: 5
};

module.exports.GameHierarchyEnum = {
    UNAVAILABLE: -1,
    PLAYER: 0,
    MODERATOR: 10,
    GAMEMASTER_PADAWAN: 20,
    GAMEMASTER: 30,
    ADMIN: 40
};

module.exports.FightDispellableEnum = {
    DISPELLABLE: 1,
    DISPELLABLE_BY_DEATH: 2,
    DISPELLABLE_BY_STRONG_DISPEL: 3,
    REALLY_NOT_DISPELLABLE: 4
};

module.exports.GuestLimitationEnum = {
    LIMITED_TO_REGISTERED: 0,
    GUEST_LIMIT_ON_JOB_XP: 1,
    GUEST_LIMIT_ON_JOB_USE: 2,
    GUEST_LIMIT_ON_MAP: 3,
    GUEST_LIMIT_ON_ITEM: 4,
    GUEST_LIMIT_ON_VENDOR: 5,
    GUEST_LIMIT_ON_CHAT: 6,
    GUEST_LIMIT_ON_GUILD: 7
};

module.exports.GameContextEnum = {
    ROLE_PLAY: 1,
    FIGHT: 2
};

module.exports.GuildInformationsTypeEnum = {
    INFO_GENERAL: 1,
    INFO_MEMBERS: 2,
    INFO_BOOSTS: 3,
    INFO_PADDOCKS: 4,
    INFO_HOUSES: 5,
    INFO_TAX_COLLECTOR_GUILD_ONLY: 6,
    INFO_TAX_COLLECTOR_ALLIANCE: 7,
    INFO_TAX_COLLECTOR_LEAVE: 8
};

module.exports.GuildRightsBitEnum = {
    GUILD_RIGHT_NONE: 0,
    GUILD_RIGHT_BOSS: 1,
    GUILD_RIGHT_MANAGE_GUILD_BOOSTS: 2,
    GUILD_RIGHT_MANAGE_RIGHTS: 4,
    GUILD_RIGHT_INVITE_NEW_MEMBERS: 8,
    GUILD_RIGHT_BAN_MEMBERS: 16,
    GUILD_RIGHT_MANAGE_XP_CONTRIBUTION: 32,
    GUILD_RIGHT_MANAGE_RANKS: 64,
    GUILD_RIGHT_HIRE_TAX_COLLECTOR: 128,
    GUILD_RIGHT_MANAGE_MY_XP_CONTRIBUTION: 256,
    GUILD_RIGHT_COLLECT: 512,
    GUILD_RIGHT_USE_PADDOCKS: 4096,
    GUILD_RIGHT_ORGANIZE_PADDOCKS: 8192,
    GUILD_RIGHT_TAKE_OTHERS_MOUNTS_IN_PADDOCKS: 16384,
    GUILD_RIGHT_DEFENSE_PRIORITY: 32768,
    GUILD_RIGHT_COLLECT_MY_TAX_COLLECTOR: 65536,
    GUILD_RIGHT_SET_ALLIANCE_PRISM: 131072,
    GUILD_RIGHT_TALK_IN_ALLIANCE_CHAN: 262144
};

module.exports.FightOptionsEnum = {
    FIGHT_OPTION_SET_SECRET: 0,
    FIGHT_OPTION_SET_TO_PARTY_ONLY: 1,
    FIGHT_OPTION_SET_CLOSED: 2,
    FIGHT_OPTION_ASK_FOR_HELP: 3
};

module.exports.HavenBagDailyLoteryErrorEnum = {
    HAVENBAG_DAILY_LOTERY_OK: 0,
    HAVENBAG_DAILY_LOTERY_ALREADYUSED: 1,
    HAVENBAG_DAILY_LOTERY_ERROR: 2
};

module.exports.HardcoreOrEpicDeathStateEnum = {
    DEATH_STATE_ALIVE: 0,
    DEATH_STATE_DEAD: 1,
    DEATH_STATE_WAITING_CONFIRMATION: 2
};

module.exports.HaapiTokenTypeEnum = {
    HAAPI_APIKEY_GENERIC: 0,
    HAAPI_APIKEY_SHOP: 1
};

module.exports.IdentificationFailureReasonEnum = {
    BAD_VERSION: 1,
    WRONG_CREDENTIALS: 2,
    BANNED: 3,
    KICKED: 4,
    IN_MAINTENANCE: 5,
    TOO_MANY_ON_IP: 6,
    TIME_OUT: 7,
    BAD_IPRANGE: 8,
    CREDENTIALS_RESET: 9,
    EMAIL_UNVALIDATED: 10,
    OTP_TIMEOUT: 11,
    LOCKED: 12,
    SERVICE_UNAVAILABLE: 53,
    EXTERNAL_ACCOUNT_LINK_REFUSED: 61,
    EXTERNAL_ACCOUNT_ALREADY_LINKED: 62,
    UNKNOWN_AUTH_ERROR: 99,
    SPARE: 100
};

module.exports.MountEquipedErrorEnum = {
    UNSET: 0,
    SET: 1,
    RIDING: 2
};

module.exports.MapObstacleStateEnum = {
    OBSTACLE_OPENED: 1,
    OBSTACLE_CLOSED: 2
};

module.exports.NicknameErrorEnum = {
    ALREADY_USED: 1,
    SAME_AS_LOGIN: 2,
    TOO_SIMILAR_TO_LOGIN: 3,
    INVALID_NICK: 4,
    UNKNOWN_NICK_ERROR: 99
};

module.exports.ObjectErrorEnum = {
    INVENTORY_FULL: 1,
    CANNOT_EQUIP_TWICE: 2,
    NOT_TRADABLE: 3,
    CANNOT_DROP: 4,
    CANNOT_DROP_NO_PLACE: 5,
    CANNOT_DESTROY: 6,
    LEVEL_TOO_LOW: 7,
    LIVING_OBJECT_REFUSED_FOOD: 8,
    CANNOT_UNEQUIP: 9,
    CANNOT_EQUIP_HERE: 10,
    CRITERIONS: 11,
    SYMBIOTIC_OBJECT_ERROR: 12
};

module.exports.PartStateEnum = {
    PART_NOT_INSTALLED: 0,
    PART_BEING_UPDATER: 1,
    PART_UP_TO_DATE: 2
};

module.exports.NicknameGeneratingFailureEnum = {
    NICKNAME_GENERATOR_RETRY_TOO_SHORT: 1,
    NICKNAME_GENERATOR_UNAVAILABLE: 2
};

module.exports.PartyJoinErrorEnum = {
    PARTY_JOIN_ERROR_UNKNOWN: 0,
    PARTY_JOIN_ERROR_PLAYER_NOT_FOUND: 1,
    PARTY_JOIN_ERROR_PARTY_NOT_FOUND: 2,
    PARTY_JOIN_ERROR_PARTY_FULL: 3,
    PARTY_JOIN_ERROR_PLAYER_BUSY: 4,
    PARTY_JOIN_ERROR_PLAYER_ALREADY_INVITED: 6,
    PARTY_JOIN_ERROR_PLAYER_TOO_SOLLICITED: 7,
    PARTY_JOIN_ERROR_PLAYER_LOYAL: 8,
    PARTY_JOIN_ERROR_UNMODIFIABLE: 9,
    PARTY_JOIN_ERROR_UNMET_CRITERION: 10,
    PARTY_JOIN_ERROR_NOT_ENOUGH_ROOM: 11,
    PARTY_JOIN_ERROR_COMPOSITION_CHANGED: 12,
    PARTY_JOIN_ERROR_PLAYER_IN_TUTORIAL: 13
};

module.exports.PartyTypeEnum = {
    PARTY_TYPE_UNDEFINED: 0,
    PARTY_TYPE_CLASSICAL: 1,
    PARTY_TYPE_DUNGEON: 2,
    PARTY_TYPE_ARENA: 3
};

module.exports.PlayableBreedEnum = {
    UNDEFINED: 0,
    Feca: 1,
    Osamodas: 2,
    Enutrof: 3,
    Sram: 4,
    Xelor: 5,
    Ecaflip: 6,
    Eniripsa: 7,
    Iop: 8,
    Cra: 9,
    Sadida: 10,
    Sacrieur: 11,
    Pandawa: 12,
    Roublard: 13,
    Zobal: 14,
    Steamer: 15,
    Eliotrope: 16,
    Huppermage: 17,
    Ouginak: 18
};

module.exports.PlayerLifeStatusEnum = {
    STATUS_ALIVE_AND_KICKING: 0,
    STATUS_TOMBSTONE: 1,
    STATUS_PHANTOM: 2
};

module.exports.PlayerStateEnum = {
    NOT_CONNECTED: 0,
    GAME_TYPE_ROLEPLAY: 1,
    GAME_TYPE_FIGHT: 2,
    UNKNOWN_STATE: 99
};

module.exports.PlayerStatusEnum = {
    PLAYER_STATUS_OFFLINE: 0,
    PLAYER_STATUS_UNKNOWN: 1,
    PLAYER_STATUS_AVAILABLE: 10,
    PLAYER_STATUS_IDLE: 20,
    PLAYER_STATUS_AFK: 21,
    PLAYER_STATUS_PRIVATE: 30,
    PLAYER_STATUS_SOLO: 40
};

module.exports.ListAddFailureEnum = {
    LIST_ADD_FAILURE_UNKNOWN: 0,
    LIST_ADD_FAILURE_OVER_QUOTA: 1,
    LIST_ADD_FAILURE_NOT_FOUND: 2,
    LIST_ADD_FAILURE_EGOCENTRIC: 3,
    LIST_ADD_FAILURE_IS_DOUBLE: 4
};

module.exports.PartyNameErrorEnum = {
    PARTY_NAME_UNDEFINED_ERROR: 0,
    PARTY_NAME_INVALID: 1,
    PARTY_NAME_ALREADY_USED: 2,
    PARTY_NAME_UNALLOWED_RIGHTS: 3,
    PARTY_NAME_UNALLOWED_NOW: 4
};

module.exports.PresetSaveUpdateErrorEnum = {
    PRESET_UPDATE_ERR_UNKNOWN: 1,
    PRESET_UPDATE_ERR_BAD_PRESET_ID: 2,
    PRESET_UPDATE_ERR_BAD_POSITION: 3,
    PRESET_UPDATE_ERR_BAD_OBJECT_ID: 4
};

module.exports.PresetSaveResultEnum = {
    PRESET_SAVE_OK: 1,
    PRESET_SAVE_ERR_UNKNOWN: 2,
    PRESET_SAVE_ERR_TOO_MANY: 3
};

module.exports.PresetUseResultEnum = {
    PRESET_USE_OK: 1,
    PRESET_USE_OK_PARTIAL: 2,
    PRESET_USE_ERR_UNKNOWN: 3,
    PRESET_USE_ERR_CRITERION: 4,
    PRESET_USE_ERR_BAD_PRESET_ID: 5,
    PRESET_USE_ERR_COOLDOWN: 6
};

module.exports.PrismListenEnum = {
    PRISM_LISTEN_NONE: 0,
    PRISM_LISTEN_MINE: 1,
    PRISM_LISTEN_ALL: 2
};

module.exports.PrismSetSabotagedRefusedReasonEnum = {
    SABOTAGE_REFUSED: -1,
    SABOTAGE_INSUFFICIENT_RIGHTS: 0,
    SABOTAGE_MEMBER_ACCOUNT_NEEDED: 1,
    SABOTAGE_RESTRICTED_ACCOUNT: 2,
    SABOTAGE_WRONG_ALLIANCE: 3,
    SABOTAGE_NO_PRISM: 4,
    SABOTAGE_WRONG_STATE: 5
};

module.exports.PresetDeleteResultEnum = {
    PRESET_DEL_OK: 1,
    PRESET_DEL_ERR_UNKNOWN: 2,
    PRESET_DEL_ERR_BAD_PRESET_ID: 3
};

module.exports.PrismStateEnum = {
    PRISM_STATE_INVULNERABLE: 0,
    PRISM_STATE_NORMAL: 1,
    PRISM_STATE_ATTACKED: 2,
    PRISM_STATE_FIGHTING: 3,
    PRISM_STATE_WEAKENED: 4,
    PRISM_STATE_VULNERABLE: 5,
    PRISM_STATE_DEFEATED: 6,
    PRISM_STATE_SABOTAGED: 7
};

module.exports.PvpArenaStepEnum = {
    ARENA_STEP_REGISTRED: 0,
    ARENA_STEP_WAITING_FIGHT: 1,
    ARENA_STEP_STARTING_FIGHT: 2,
    ARENA_STEP_UNREGISTER: 3
};

module.exports.SequenceTypeEnum = {
    SEQUENCE_SPELL: 1,
    SEQUENCE_WEAPON: 2,
    SEQUENCE_GLYPH_TRAP: 3,
    SEQUENCE_TRIGGERED: 4,
    SEQUENCE_MOVE: 5,
    SEQUENCE_CHARACTER_DEATH: 6,
    SEQUENCE_TURN_START: 7,
    SEQUENCE_TURN_END: 8,
    SEQUENCE_FIGHT_START: 9
};

module.exports.PvpArenaTypeEnum = {
    ARENA_TYPE_1VS1: 1,
    ARENA_TYPE_3VS3: 3
};

module.exports.ServerCompletionEnum = {
    COMPLETION_RECOMANDATED: 0,
    COMPLETION_AVERAGE: 1,
    COMPLETION_HIGH: 2,
    COMPLETION_COMING_SOON: 3,
    COMPLETION_FULL: 4
};

module.exports.ServerConnectionErrorEnum = {
    SERVER_CONNECTION_ERROR_DUE_TO_STATUS: 0,
    SERVER_CONNECTION_ERROR_NO_REASON: 1,
    SERVER_CONNECTION_ERROR_ACCOUNT_RESTRICTED: 2,
    SERVER_CONNECTION_ERROR_COMMUNITY_RESTRICTED: 3,
    SERVER_CONNECTION_ERROR_LOCATION_RESTRICTED: 4,
    SERVER_CONNECTION_ERROR_SUBSCRIBERS_ONLY: 5,
    SERVER_CONNECTION_ERROR_REGULAR_PLAYERS_ONLY: 6
};

module.exports.ServerStatusEnum = {
    STATUS_UNKNOWN: 0,
    OFFLINE: 1,
    STARTING: 2,
    ONLINE: 3,
    NOJOIN: 4,
    SAVING: 5,
    STOPING: 6,
    FULL: 7
};

module.exports.ShortcutBarEnum = {
    GENERAL_SHORTCUT_BAR: 0,
    SPELL_SHORTCUT_BAR: 1
};

module.exports.SocialContactCategoryEnum = {
    SOCIAL_CONTACT_FRIEND: 0,
    SOCIAL_CONTACT_SPOUSE: 1,
    SOCIAL_CONTACT_PARTY: 2,
    SOCIAL_CONTACT_GUILD: 3,
    SOCIAL_CONTACT_ALLIANCE: 4,
    SOCIAL_CONTACT_CRAFTER: 5,
    SOCIAL_CONTACT_INTERLOCUTOR: 6,
    SOCIAL_CONTACT_FIGHT: 7
};

module.exports.SocialGroupCreationResultEnum = {
    SOCIAL_GROUP_CREATE_OK: 1,
    SOCIAL_GROUP_CREATE_ERROR_NAME_INVALID: 2,
    SOCIAL_GROUP_CREATE_ERROR_ALREADY_IN_GROUP: 3,
    SOCIAL_GROUP_CREATE_ERROR_NAME_ALREADY_EXISTS: 4,
    SOCIAL_GROUP_CREATE_ERROR_EMBLEM_ALREADY_EXISTS: 5,
    SOCIAL_GROUP_CREATE_ERROR_LEAVE: 6,
    SOCIAL_GROUP_CREATE_ERROR_CANCEL: 7,
    SOCIAL_GROUP_CREATE_ERROR_REQUIREMENT_UNMET: 8,
    SOCIAL_GROUP_CREATE_ERROR_EMBLEM_INVALID: 9,
    SOCIAL_GROUP_CREATE_ERROR_TAG_INVALID: 10,
    SOCIAL_GROUP_CREATE_ERROR_TAG_ALREADY_EXISTS: 11,
    SOCIAL_GROUP_CREATE_ERROR_NEEDS_SUBGROUP: 12,
    SOCIAL_GROUP_CREATE_ERROR_UNKNOWN: 99
};

module.exports.StatisticTypeEnum = {
    STEP0000_CHOSE_NICKNAME: 78,
    STEP0100_CHOSE_SERVER: 79,
    STEP0200_CREATE_FIRST_CHARACTER: 80,
    STEP0300_LOADING_SCREEN: 81,
    STEP0400_DOFUS_TRAILER: 82,
    STEP0500_ARRIVES_ON_TUTORIAL: 83,
    STEP0550_QUITS_TUTORIAL: 84,
    STEP0600_TUTO1_MOVE_MAP: 85,
    STEP0700_TUTO2_TALK_TO_YAKASI: 86,
    STEP0800_TUTO3_EQUIP_RING: 87,
    STEP0820_CLIC_BAG: 88,
    STEP0840_CLIC_RING: 89,
    STEP0860_EQUIP_RING: 90,
    STEP0860_EXIT_BAG: 91,
    STEP0900_TUTO4_CHANGE_MAP: 92,
    STEP1000_TUTO5_START_FIRST_FIGHT: 93,
    STEP1100_TUTO6_CHOSE_START_POSITION: 94,
    STEP1130_CHOSE_POSITION: 95,
    STEP1160_CLIC_READY: 96,
    STEP1200_TUTO7_MOVE_IN_FIGHT: 97,
    STEP1900_TUTO8_USE_SPELL: 98,
    STEP1930_CHOSE_SPELL: 99,
    STEP1960_USE_SPELL: 100,
    STEP2000_TUTO9_END_TURN: 101,
    STEP2100_TUTO10_WIN_FIGHT: 102,
    STEP2050_TUTO10_LOSE_FIGHT: 103,
    STEP2200_TUTO11_START_FIRST_QUEST: 104,
    STEP2220_CLIC_YAKASI: 105,
    STEP2240_TALK_YAKASI: 106,
    STEP2260_ACCEPT_MISSION: 107,
    STEP2300_TUTO12_EQUIP_SET: 108,
    STEP2350_EXIT_BAG: 109,
    STEP2400_TUTO13_LETS_KILL_MONSTER: 110,
    STEP2430_GO_TO_NEXT_MAP: 111,
    STEP2460_CLIC_MONSTER: 112,
    STEP2500_TUTO14_END_SECOND_FIGHT: 113,
    STEP2600_TUTO15_END_TUTO: 114,
    STEP2620_CLIC_YAKASI: 115,
    STEP2640_END_DIALOG: 116,
    CLICK_ON_BUTTON: 151,
    DISPLAY_MENU: 152,
    CATEGORY_MAP_OPENED: 544,
    CATEGORY_MAP_PERSONALIZED_LANDMARK_PLACED: 546,
    CATEGORY_MAP_QUEST_LANDMARK_ACTIVATED: 547,
    CATEGORY_MAP_MOVED: 549,
    CATEGORY_MAP_ZOOM: 550,
    CATEGORY_MINIMAP_MOVED: 545,
    CATEGORY_MINIMAP_ZOOM: 548
};

module.exports.StatsUpgradeResultEnum = {
    NONE: -1,
    SUCCESS: 0,
    RESTRICTED: 1,
    GUEST: 2,
    IN_FIGHT: 3,
    NOT_ENOUGH_POINT: 4
};

module.exports.SubEntityBindingPointCategoryEnum = {
    HOOK_POINT_CATEGORY_UNUSED: 0,
    HOOK_POINT_CATEGORY_PET: 1,
    HOOK_POINT_CATEGORY_MOUNT_DRIVER: 2,
    HOOK_POINT_CATEGORY_LIFTED_ENTITY: 3,
    HOOK_POINT_CATEGORY_BASE_BACKGROUND: 4,
    HOOK_POINT_CATEGORY_MERCHANT_BAG: 5,
    HOOK_POINT_CATEGORY_BASE_FOREGROUND: 6,
    HOOK_POINT_CATEGORY_PET_FOLLOWER: 7,
    HOOK_POINT_CATEGORY_UNDERWATER_BUBBLES: 8
};

module.exports.SubscriptionRequiredEnum = {
    LIMITED_TO_SUBSCRIBER: 0,
    LIMIT_ON_JOB_XP: 1,
    LIMIT_ON_JOB_USE: 2,
    LIMIT_ON_MAP: 3,
    LIMIT_ON_ITEM: 4,
    LIMIT_ON_VENDOR: 5
};

module.exports.TaxCollectorErrorReasonEnum = {
    TAX_COLLECTOR_ERROR_UNKNOWN: 0,
    TAX_COLLECTOR_NOT_FOUND: 1,
    TAX_COLLECTOR_NOT_OWNED: 2,
    TAX_COLLECTOR_NO_RIGHTS: 3,
    TAX_COLLECTOR_MAX_REACHED: 4,
    TAX_COLLECTOR_ALREADY_ONE: 5,
    TAX_COLLECTOR_CANT_HIRE_YET: 6,
    TAX_COLLECTOR_CANT_HIRE_HERE: 7,
    TAX_COLLECTOR_NOT_ENOUGH_KAMAS: 8
};

module.exports.TaxCollectorMovementTypeEnum = {
    TAX_COLLECTOR_UNKNOWN_ACTION: 0,
    TAX_COLLECTOR_HIRED: 1,
    TAX_COLLECTOR_HARVESTED: 2,
    TAX_COLLECTOR_DEFEATED: 3,
    TAX_COLLECTOR_DESTROYED: 4
};

module.exports.SocialGroupInvitationStateEnum = {
    SOCIAL_GROUP_INVITATION_FAILED: 0,
    SOCIAL_GROUP_INVITATION_SENT: 1,
    SOCIAL_GROUP_INVITATION_CANCELED: 2,
    SOCIAL_GROUP_INVITATION_OK: 3
};

module.exports.TaxCollectorStateEnum = {
    STATE_COLLECTING: 0,
    STATE_WAITING_FOR_HELP: 1,
    STATE_FIGHTING: 2
};

module.exports.TeamEnum = {
    TEAM_CHALLENGER: 0,
    TEAM_DEFENDER: 1,
    TEAM_SPECTATOR: 2
};

module.exports.SocialNoticeErrorEnum = {
    SOCIAL_NOTICE_UNKNOWN_ERROR: 0,
    SOCIAL_NOTICE_INVALID_RIGHTS: 1,
    SOCIAL_NOTICE_COOLDOWN: 2
};

module.exports.TeamTypeEnum = {
    TEAM_TYPE_PLAYER: 0,
    TEAM_TYPE_MONSTER: 1,
    TEAM_TYPE_MUTANT: 2,
    TEAM_TYPE_TAXCOLLECTOR: 3,
    TEAM_TYPE_BAD_PLAYER: 4,
    TEAM_TYPE_PRISM: 5
};

module.exports.TextInformationTypeEnum = {
    TEXT_INFORMATION_MESSAGE: 0,
    TEXT_INFORMATION_ERROR: 1,
    TEXT_INFORMATION_PVP: 2,
    TEXT_INFORMATION_FIGHT_LOG: 3,
    TEXT_INFORMATION_POPUP: 4,
    TEXT_LIVING_OBJECT: 5,
    TEXT_ENTITY_TALK: 6,
    TEXT_INFORMATION_FIGHT: 7
};

module.exports.TreasureHuntFlagRequestEnum = {
    TREASURE_HUNT_FLAG_ERROR_UNDEFINED: 0,
    TREASURE_HUNT_FLAG_OK: 1,
    TREASURE_HUNT_FLAG_WRONG: 2,
    TREASURE_HUNT_FLAG_TOO_MANY: 3,
    TREASURE_HUNT_FLAG_ERROR_IMPOSSIBLE: 4,
    TREASURE_HUNT_FLAG_WRONG_INDEX: 5,
    TREASURE_HUNT_FLAG_SAME_MAP: 6
};

module.exports.TeleporterTypeEnum = {
    TELEPORTER_ZAAP: 0,
    TELEPORTER_SUBWAY: 1,
    TELEPORTER_PRISM: 2,
    TELEPORTER_HAVENBAG: 3
};

module.exports.TreasureHuntRequestEnum = {
    TREASURE_HUNT_ERROR_UNDEFINED: 0,
    TREASURE_HUNT_ERROR_NO_QUEST_FOUND: 2,
    TREASURE_HUNT_ERROR_ALREADY_HAVE_QUEST: 3,
    TREASURE_HUNT_ERROR_NOT_AVAILABLE: 4,
    TREASURE_HUNT_OK: 1
};

module.exports.TreasureHuntTypeEnum = {
    TREASURE_HUNT_CLASSIC: 0,
    TREASURE_HUNT_PORTAL: 1,
    TREASURE_HUNT_LEGENDARY: 2
};

module.exports.TreasureHuntFlagStateEnum = {
    TREASURE_HUNT_FLAG_STATE_UNKNOWN: 0,
    TREASURE_HUNT_FLAG_STATE_OK: 1,
    TREASURE_HUNT_FLAG_STATE_WRONG: 2
};

module.exports.UpdatableMountBoostEnum = {
    STAMINA: 3,
    MATURITY: 5,
    ENERGY: 1,
    SERENITY: 2,
    LOVE: 4,
    TIREDNESS: 6,
    RIDEABLE: 7
};

module.exports.TreasureHuntDigRequestEnum = {
    TREASURE_HUNT_DIG_ERROR_UNDEFINED: 0,
    TREASURE_HUNT_DIG_NEW_HINT: 1,
    TREASURE_HUNT_DIG_FINISHED: 2,
    TREASURE_HUNT_DIG_WRONG: 3,
    TREASURE_HUNT_DIG_LOST: 4,
    TREASURE_HUNT_DIG_ERROR_IMPOSSIBLE: 5,
    TREASURE_HUNT_DIG_WRONG_AND_YOU_KNOW_IT: 6
};

class StatisticData extends ProtocolType {
    constructor() {
        super();
        this.messageId = 484;
    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.StatisticData = StatisticData;
module.exports.types[484] = StatisticData;

class StatisticDataBoolean extends StatisticData {
    constructor(value) {
        super();
        this.value = value;
        this.messageId = 482;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readBoolean();
    }
};
module.exports.StatisticDataBoolean = StatisticDataBoolean;
module.exports.types[482] = StatisticDataBoolean;

class StatisticDataByte extends StatisticData {
    constructor(value) {
        super();
        this.value = value;
        this.messageId = 486;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readByte();
    }
};
module.exports.StatisticDataByte = StatisticDataByte;
module.exports.types[486] = StatisticDataByte;

class StatisticDataInt extends StatisticData {
    constructor(value) {
        super();
        this.value = value;
        this.messageId = 485;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readInt();
    }
};
module.exports.StatisticDataInt = StatisticDataInt;
module.exports.types[485] = StatisticDataInt;

class StatisticDataShort extends StatisticData {
    constructor(value) {
        super();
        this.value = value;
        this.messageId = 488;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readShort();
    }
};
module.exports.StatisticDataShort = StatisticDataShort;
module.exports.types[488] = StatisticDataShort;

class StatisticDataString extends StatisticData {
    constructor(value) {
        super();
        this.value = value;
        this.messageId = 487;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readUTF();
    }
};
module.exports.StatisticDataString = StatisticDataString;
module.exports.types[487] = StatisticDataString;

class GameServerInformations extends ProtocolType {
    constructor(id, type, status, completion, isSelectable, charactersCount, charactersSlots, date) {
        super();
        this.id = id;
        this.type = type;
        this.status = status;
        this.completion = completion;
        this.isSelectable = isSelectable;
        this.charactersCount = charactersCount;
        this.charactersSlots = charactersSlots;
        this.date = date;
        this.messageId = 25;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
        this.buffer.writeByte(this.type);
        this.buffer.writeByte(this.status);
        this.buffer.writeByte(this.completion);
        this.buffer.writeBoolean(this.isSelectable);
        if (this.charactersCount < 0) {
            throw new Error("Forbidden value (" + this.charactersCount + ") on element charactersCount.");
        }
        this.buffer.writeByte(this.charactersCount);
        if (this.charactersSlots < 0) {
            throw new Error("Forbidden value (" + this.charactersSlots + ") on element charactersSlots.");
        }
        this.buffer.writeByte(this.charactersSlots);
        if (this.date < -9007199254740990 || this.date > 9007199254740990) {
            throw new Error("Forbidden value (" + this.date + ") on element date.");
        }
        this.buffer.writeDouble(this.date);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of GameServerInformations.id.");
        }
        this.type = buffer.readByte();
        this.status = buffer.readByte();
        if (this.status < 0) {
            throw new Error("Forbidden value (" + this.status + ") on element of GameServerInformations.status.");
        };
        this.completion = buffer.readByte();
        if (this.completion < 0) {
            throw new Error("Forbidden value (" + this.completion + ") on element of GameServerInformations.completion.");
        };
        this.isSelectable = buffer.readBoolean();;
        this.charactersCount = buffer.readByte();
        if (this.charactersCount < 0) {
            throw new Error("Forbidden value (" + this.charactersCount + ") on element of GameServerInformations.charactersCount.");
        };
        this.charactersSlots = buffer.readByte();
        if (this.charactersSlots < 0) {
            throw new Error("Forbidden value (" + this.charactersSlots + ") on element of GameServerInformations.charactersSlots.");
        };
        this.date = buffer.readDouble();
        if (this.date < -9007199254740990 || this.date > 9007199254740990) {
            throw new Error("Forbidden value (" + this.date + ") on element of GameServerInformations.date.");
        };
    }
};
module.exports.GameServerInformations = GameServerInformations;
module.exports.types[25] = GameServerInformations;

class Achievement extends ProtocolType {
    constructor(id, finishedObjective, startedObjectives) {
        super();
        this.id = id;
        this.finishedObjective = finishedObjective;
        this.startedObjectives = startedObjectives;
        this.messageId = 363;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
        this.buffer.writeShort(this.finishedObjective.length);
        var _loc2_ = 0;
        while (_loc2_ < this.finishedObjective.length) {
            (this.finishedObjective[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.startedObjectives.length);
        var _loc3_ = 0;
        while (_loc3_ < this.startedObjectives.length) {
            (this.startedObjectives[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of Achievement.id.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new AchievementObjective();
            _loc6_.deserialize(buffer);
            this.finishedObjective.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new AchievementStartedObjective();
            _loc7_.deserialize(buffer);
            this.startedObjectives.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.Achievement = Achievement;
module.exports.types[363] = Achievement;

class AchievementObjective extends ProtocolType {
    constructor(id, maxValue) {
        super();
        this.id = id;
        this.maxValue = maxValue;
        this.messageId = 404;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarInt(this.id);
        if (this.maxValue < 0) {
            throw new Error("Forbidden value (" + this.maxValue + ") on element maxValue.");
        }
        this.buffer.writeVarShort(this.maxValue);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhInt();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of AchievementObjective.id.");
        }
        this.maxValue = buffer.readVarUhShort();
        if (this.maxValue < 0) {
            throw new Error("Forbidden value (" + this.maxValue + ") on element of AchievementObjective.maxValue.");
        };
    }
};
module.exports.AchievementObjective = AchievementObjective;
module.exports.types[404] = AchievementObjective;

class AchievementRewardable extends ProtocolType {
    constructor(id, finishedlevel) {
        super();
        this.id = id;
        this.finishedlevel = finishedlevel;
        this.messageId = 412;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
        if (this.finishedlevel < 0 || this.finishedlevel > 206) {
            throw new Error("Forbidden value (" + this.finishedlevel + ") on element finishedlevel.");
        }
        this.buffer.writeByte(this.finishedlevel);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of AchievementRewardable.id.");
        }
        this.finishedlevel = buffer.readUnsignedByte();
        if (this.finishedlevel < 0 || this.finishedlevel > 206) {
            throw new Error("Forbidden value (" + this.finishedlevel + ") on element of AchievementRewardable.finishedlevel.");
        };
    }
};
module.exports.AchievementRewardable = AchievementRewardable;
module.exports.types[412] = AchievementRewardable;

class AchievementStartedObjective extends AchievementObjective {
    constructor(id, maxValue, value) {
        super(id, maxValue);
        this.value = value;
        this.messageId = 402;
    }

    serialize() {
        super.serialize();
        if (this.value < 0) {
            throw new Error("Forbidden value (" + this.value + ") on element value.");
        }
        this.buffer.writeVarShort(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readVarUhShort();
        if (this.value < 0) {
            throw new Error("Forbidden value (" + this.value + ") on element of AchievementStartedObjective.value.");
        }
    }
};
module.exports.AchievementStartedObjective = AchievementStartedObjective;
module.exports.types[402] = AchievementStartedObjective;

class FightDispellableEffectExtendedInformations extends ProtocolType {
    constructor(actionId, sourceId, effect) {
        super();
        this.actionId = actionId;
        this.sourceId = sourceId;
        this.effect = effect;
        this.messageId = 208;
    }

    serialize() {
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        this.buffer.writeVarShort(this.actionId);
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeDouble(this.sourceId);
        this.buffer.writeShort(this.effect.getTypeId());
        this.effect.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.actionId = buffer.readVarUhShort();
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element of FightDispellableEffectExtendedInformations.actionId.");
        }
        this.sourceId = buffer.readDouble();
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element of FightDispellableEffectExtendedInformations.sourceId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        this.effect = ProtocolTypeManager.getInstance(AbstractFightDispellableEffect, _loc2_);
        this.effect.deserialize(buffer);
    }
};
module.exports.FightDispellableEffectExtendedInformations = FightDispellableEffectExtendedInformations;
module.exports.types[208] = FightDispellableEffectExtendedInformations;

class AbstractFightDispellableEffect extends ProtocolType {
    constructor(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid) {
        super();
        this.uid = uid;
        this.targetId = targetId;
        this.turnDuration = turnDuration;
        this.dispelable = dispelable;
        this.spellId = spellId;
        this.effectId = effectId;
        this.parentBoostUid = parentBoostUid;
        this.messageId = 206;
    }

    serialize() {
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element uid.");
        }
        this.buffer.writeVarInt(this.uid);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        this.buffer.writeShort(this.turnDuration);
        this.buffer.writeByte(this.dispelable);
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.effectId < 0) {
            throw new Error("Forbidden value (" + this.effectId + ") on element effectId.");
        }
        this.buffer.writeVarInt(this.effectId);
        if (this.parentBoostUid < 0) {
            throw new Error("Forbidden value (" + this.parentBoostUid + ") on element parentBoostUid.");
        }
        this.buffer.writeVarInt(this.parentBoostUid);
    }

    deserialize(buffer) {
        this.uid = buffer.readVarUhInt();
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element of AbstractFightDispellableEffect.uid.");
        }
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of AbstractFightDispellableEffect.targetId.");
        };
        this.turnDuration = buffer.readShort();
        this.dispelable = buffer.readByte();
        if (this.dispelable < 0) {
            throw new Error("Forbidden value (" + this.dispelable + ") on element of AbstractFightDispellableEffect.dispelable.");
        };
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of AbstractFightDispellableEffect.spellId.");
        };
        this.effectId = buffer.readVarUhInt();
        if (this.effectId < 0) {
            throw new Error("Forbidden value (" + this.effectId + ") on element of AbstractFightDispellableEffect.effectId.");
        };
        this.parentBoostUid = buffer.readVarUhInt();
        if (this.parentBoostUid < 0) {
            throw new Error("Forbidden value (" + this.parentBoostUid + ") on element of AbstractFightDispellableEffect.parentBoostUid.");
        };
    }
};
module.exports.AbstractFightDispellableEffect = AbstractFightDispellableEffect;
module.exports.types[206] = AbstractFightDispellableEffect;

class FightTemporaryBoostEffect extends AbstractFightDispellableEffect {
    constructor(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid, delta) {
        super(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid);
        this.delta = delta;
        this.messageId = 209;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.delta);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.delta = buffer.readShort();
    }
};
module.exports.FightTemporaryBoostEffect = FightTemporaryBoostEffect;
module.exports.types[209] = FightTemporaryBoostEffect;

class FightTemporaryBoostStateEffect extends FightTemporaryBoostEffect {
    constructor(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid, delta, stateId) {
        super(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid, delta);
        this.stateId = stateId;
        this.messageId = 214;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.stateId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.stateId = buffer.readShort();
    }
};
module.exports.FightTemporaryBoostStateEffect = FightTemporaryBoostStateEffect;
module.exports.types[214] = FightTemporaryBoostStateEffect;

class FightTemporaryBoostWeaponDamagesEffect extends FightTemporaryBoostEffect {
    constructor(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid, delta, weaponTypeId) {
        super(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid, delta);
        this.weaponTypeId = weaponTypeId;
        this.messageId = 211;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.weaponTypeId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.weaponTypeId = buffer.readShort();
    }
};
module.exports.FightTemporaryBoostWeaponDamagesEffect = FightTemporaryBoostWeaponDamagesEffect;
module.exports.types[211] = FightTemporaryBoostWeaponDamagesEffect;

class FightTemporarySpellBoostEffect extends FightTemporaryBoostEffect {
    constructor(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid, delta, boostedSpellId) {
        super(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid, delta);
        this.boostedSpellId = boostedSpellId;
        this.messageId = 207;
    }

    serialize() {
        super.serialize();
        if (this.boostedSpellId < 0) {
            throw new Error("Forbidden value (" + this.boostedSpellId + ") on element boostedSpellId.");
        }
        this.buffer.writeVarShort(this.boostedSpellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.boostedSpellId = buffer.readVarUhShort();
        if (this.boostedSpellId < 0) {
            throw new Error("Forbidden value (" + this.boostedSpellId + ") on element of FightTemporarySpellBoostEffect.boostedSpellId.");
        }
    }
};
module.exports.FightTemporarySpellBoostEffect = FightTemporarySpellBoostEffect;
module.exports.types[207] = FightTemporarySpellBoostEffect;

class FightTemporarySpellImmunityEffect extends AbstractFightDispellableEffect {
    constructor(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid, immuneSpellId) {
        super(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid);
        this.immuneSpellId = immuneSpellId;
        this.messageId = 366;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.immuneSpellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.immuneSpellId = buffer.readInt();
    }
};
module.exports.FightTemporarySpellImmunityEffect = FightTemporarySpellImmunityEffect;
module.exports.types[366] = FightTemporarySpellImmunityEffect;

class FightTriggeredEffect extends AbstractFightDispellableEffect {
    constructor(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid, param1, param2, param3, delay) {
        super(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid);
        this.param1 = param1;
        this.param2 = param2;
        this.param3 = param3;
        this.delay = delay;
        this.messageId = 210;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.this.buffer);
        this.buffer.writeInt(this.param2);
        this.buffer.writeInt(this.param3);
        this.buffer.writeShort(this.delay);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.buffer = buffer.readInt();
        this.param2 = buffer.readInt();;
        this.param3 = buffer.readInt();;
        this.delay = buffer.readShort();;
    }
};
module.exports.FightTriggeredEffect = FightTriggeredEffect;
module.exports.types[210] = FightTriggeredEffect;

class GameActionMark extends ProtocolType {
    constructor(markAuthorId, markTeamId, markSpellId, markSpellLevel, markId, markType, markimpactCell, cells, active) {
        super();
        this.markAuthorId = markAuthorId;
        this.markTeamId = markTeamId;
        this.markSpellId = markSpellId;
        this.markSpellLevel = markSpellLevel;
        this.markId = markId;
        this.markType = markType;
        this.markimpactCell = markimpactCell;
        this.cells = cells;
        this.active = active;
        this.messageId = 351;
    }

    serialize() {
        if (this.markAuthorId < -9007199254740990 || this.markAuthorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.markAuthorId + ") on element markAuthorId.");
        }
        this.buffer.writeDouble(this.markAuthorId);
        this.buffer.writeByte(this.markTeamId);
        if (this.markSpellId < 0) {
            throw new Error("Forbidden value (" + this.markSpellId + ") on element markSpellId.");
        }
        this.buffer.writeInt(this.markSpellId);
        if (this.markSpellLevel < 1 || this.markSpellLevel > 200) {
            throw new Error("Forbidden value (" + this.markSpellLevel + ") on element markSpellLevel.");
        }
        this.buffer.writeShort(this.markSpellLevel);
        this.buffer.writeShort(this.markId);
        this.buffer.writeByte(this.markType);
        if (this.markimpactCell < -1 || this.markimpactCell > 559) {
            throw new Error("Forbidden value (" + this.markimpactCell + ") on element markimpactCell.");
        }
        this.buffer.writeShort(this.markimpactCell);
        this.buffer.writeShort(this.cells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cells.length) {
            (this.cells[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeBoolean(this.active);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.markAuthorId = buffer.readDouble();
        if (this.markAuthorId < -9007199254740990 || this.markAuthorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.markAuthorId + ") on element of GameActionMark.markAuthorId.");
        }
        this.markTeamId = buffer.readByte();
        if (this.markTeamId < 0) {
            throw new Error("Forbidden value (" + this.markTeamId + ") on element of GameActionMark.markTeamId.");
        };
        this.markSpellId = buffer.readInt();
        if (this.markSpellId < 0) {
            throw new Error("Forbidden value (" + this.markSpellId + ") on element of GameActionMark.markSpellId.");
        };
        this.markSpellLevel = buffer.readShort();
        if (this.markSpellLevel < 1 || this.markSpellLevel > 200) {
            throw new Error("Forbidden value (" + this.markSpellLevel + ") on element of GameActionMark.markSpellLevel.");
        };
        this.markId = buffer.readShort();
        this.markType = buffer.readByte();;
        this.markimpactCell = buffer.readShort();
        if (this.markimpactCell < -1 || this.markimpactCell > 559) {
            throw new Error("Forbidden value (" + this.markimpactCell + ") on element of GameActionMark.markimpactCell.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GameActionMarkedCell();
            _loc4_.deserialize(buffer);
            this.cells.push(_loc4_);
            _loc3_++;
        }
        this._activeFunc(buffer);
    }
};
module.exports.GameActionMark = GameActionMark;
module.exports.types[351] = GameActionMark;

class GameActionMarkedCell extends ProtocolType {
    constructor(cellId, zoneSize, cellColor, cellsType) {
        super();
        this.cellId = cellId;
        this.zoneSize = zoneSize;
        this.cellColor = cellColor;
        this.cellsType = cellsType;
        this.messageId = 85;
    }

    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
        this.buffer.writeByte(this.zoneSize);
        this.buffer.writeInt(this.cellColor);
        this.buffer.writeByte(this.cellsType);
    }

    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionMarkedCell.cellId.");
        }
        this.zoneSize = buffer.readByte();
        this.cellColor = buffer.readInt();;
        this.cellsType = buffer.readByte();;
    }
};
module.exports.GameActionMarkedCell = GameActionMarkedCell;
module.exports.types[85] = GameActionMarkedCell;

class ServerSessionConstant extends ProtocolType {
    constructor(id) {
        super();
        this.id = id;
        this.messageId = 430;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of ServerSessionConstant.id.");
        }
    }
};
module.exports.ServerSessionConstant = ServerSessionConstant;
module.exports.types[430] = ServerSessionConstant;

class ServerSessionConstantInteger extends ServerSessionConstant {
    constructor(id, value) {
        super(id);
        this.value = value;
        this.messageId = 433;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readInt();
    }
};
module.exports.ServerSessionConstantInteger = ServerSessionConstantInteger;
module.exports.types[433] = ServerSessionConstantInteger;

class ServerSessionConstantLong extends ServerSessionConstant {
    constructor(id, value) {
        super(id);
        this.value = value;
        this.messageId = 429;
    }

    serialize() {
        super.serialize();
        if (this.value < -9007199254740990 || this.value > 9007199254740990) {
            throw new Error("Forbidden value (" + this.value + ") on element value.");
        }
        this.buffer.writeDouble(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readDouble();
        if (this.value < -9007199254740990 || this.value > 9007199254740990) {
            throw new Error("Forbidden value (" + this.value + ") on element of ServerSessionConstantLong.value.");
        }
    }
};
module.exports.ServerSessionConstantLong = ServerSessionConstantLong;
module.exports.types[429] = ServerSessionConstantLong;

class ServerSessionConstantString extends ServerSessionConstant {
    constructor(id, value) {
        super(id);
        this.value = value;
        this.messageId = 436;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readUTF();
    }
};
module.exports.ServerSessionConstantString = ServerSessionConstantString;
module.exports.types[436] = ServerSessionConstantString;

class AbstractCharacterInformation extends ProtocolType {
    constructor(id) {
        super();
        this.id = id;
        this.messageId = 400;
    }

    serialize() {
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of AbstractCharacterInformation.id.");
        }
    }
};
module.exports.AbstractCharacterInformation = AbstractCharacterInformation;
module.exports.types[400] = AbstractCharacterInformation;

class ActorAlignmentInformations extends ProtocolType {
    constructor(alignmentSide, alignmentValue, alignmentGrade, characterPower) {
        super();
        this.alignmentSide = alignmentSide;
        this.alignmentValue = alignmentValue;
        this.alignmentGrade = alignmentGrade;
        this.characterPower = characterPower;
        this.messageId = 201;
    }

    serialize() {
        this.buffer.writeByte(this.alignmentSide);
        if (this.alignmentValue < 0) {
            throw new Error("Forbidden value (" + this.alignmentValue + ") on element alignmentValue.");
        }
        this.buffer.writeByte(this.alignmentValue);
        if (this.alignmentGrade < 0) {
            throw new Error("Forbidden value (" + this.alignmentGrade + ") on element alignmentGrade.");
        }
        this.buffer.writeByte(this.alignmentGrade);
        if (this.characterPower < -9007199254740990 || this.characterPower > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterPower + ") on element characterPower.");
        }
        this.buffer.writeDouble(this.characterPower);
    }

    deserialize(buffer) {
        this.alignmentSide = buffer.readByte();
        this.alignmentValue = buffer.readByte();
        if (this.alignmentValue < 0) {
            throw new Error("Forbidden value (" + this.alignmentValue + ") on element of ActorAlignmentInformations.alignmentValue.");
        }
        this.alignmentGrade = buffer.readByte();
        if (this.alignmentGrade < 0) {
            throw new Error("Forbidden value (" + this.alignmentGrade + ") on element of ActorAlignmentInformations.alignmentGrade.");
        };
        this.characterPower = buffer.readDouble();
        if (this.characterPower < -9007199254740990 || this.characterPower > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterPower + ") on element of ActorAlignmentInformations.characterPower.");
        };
    }
};
module.exports.ActorAlignmentInformations = ActorAlignmentInformations;
module.exports.types[201] = ActorAlignmentInformations;

class ActorExtendedAlignmentInformations extends ActorAlignmentInformations {
    constructor(alignmentSide, alignmentValue, alignmentGrade, characterPower, honor, honorGradeFloor, honorNextGradeFloor, aggressable) {
        super(alignmentSide, alignmentValue, alignmentGrade, characterPower);
        this.honor = honor;
        this.honorGradeFloor = honorGradeFloor;
        this.honorNextGradeFloor = honorNextGradeFloor;
        this.aggressable = aggressable;
        this.messageId = 202;
    }

    serialize() {
        super.serialize();
        if (this.honor < 0 || this.honor > 20000) {
            throw new Error("Forbidden value (" + this.honor + ") on element honor.");
        }
        this.buffer.writeVarShort(this.honor);
        if (this.honorGradeFloor < 0 || this.honorGradeFloor > 20000) {
            throw new Error("Forbidden value (" + this.honorGradeFloor + ") on element honorGradeFloor.");
        }
        this.buffer.writeVarShort(this.honorGradeFloor);
        if (this.honorNextGradeFloor < 0 || this.honorNextGradeFloor > 20000) {
            throw new Error("Forbidden value (" + this.honorNextGradeFloor + ") on element honorNextGradeFloor.");
        }
        this.buffer.writeVarShort(this.honorNextGradeFloor);
        this.buffer.writeByte(this.aggressable);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.honor = buffer.readVarUhShort();
        if (this.honor < 0 || this.honor > 20000) {
            throw new Error("Forbidden value (" + this.honor + ") on element of ActorExtendedAlignmentInformations.honor.");
        }
        this.honorGradeFloor = buffer.readVarUhShort();
        if (this.honorGradeFloor < 0 || this.honorGradeFloor > 20000) {
            throw new Error("Forbidden value (" + this.honorGradeFloor + ") on element of ActorExtendedAlignmentInformations.honorGradeFloor.");
        };
        this.honorNextGradeFloor = buffer.readVarUhShort();
        if (this.honorNextGradeFloor < 0 || this.honorNextGradeFloor > 20000) {
            throw new Error("Forbidden value (" + this.honorNextGradeFloor + ") on element of ActorExtendedAlignmentInformations.honorNextGradeFloor.");
        };
        this.aggressable = buffer.readByte();
        if (this.aggressable < 0) {
            throw new Error("Forbidden value (" + this.aggressable + ") on element of ActorExtendedAlignmentInformations.aggressable.");
        };
    }
};
module.exports.ActorExtendedAlignmentInformations = ActorExtendedAlignmentInformations;
module.exports.types[202] = ActorExtendedAlignmentInformations;

class CharacterBasicMinimalInformations extends AbstractCharacterInformation {
    constructor(id, name) {
        super(id);
        this.name = name;
        this.messageId = 503;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.name);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
    }
};
module.exports.CharacterBasicMinimalInformations = CharacterBasicMinimalInformations;
module.exports.types[503] = CharacterBasicMinimalInformations;

class CharacterBaseCharacteristic extends ProtocolType {
    constructor(base, additionnal, objectsAndMountBonus, alignGiftBonus, contextModif) {
        super();
        this.base = base;
        this.additionnal = additionnal;
        this.objectsAndMountBonus = objectsAndMountBonus;
        this.alignGiftBonus = alignGiftBonus;
        this.contextModif = contextModif;
        this.messageId = 4;
    }

    serialize() {
        this.buffer.writeVarShort(this.base);
        this.buffer.writeVarShort(this.additionnal);
        this.buffer.writeVarShort(this.objectsAndMountBonus);
        this.buffer.writeVarShort(this.alignGiftBonus);
        this.buffer.writeVarShort(this.contextModif);
    }

    deserialize(buffer) {
        this.base = buffer.readVarShort();
        this.additionnal = buffer.readVarShort();;
        this.objectsAndMountBonus = buffer.readVarShort();;
        this.alignGiftBonus = buffer.readVarShort();;
        this.contextModif = buffer.readVarShort();;
    }
};
module.exports.CharacterBaseCharacteristic = CharacterBaseCharacteristic;
module.exports.types[4] = CharacterBaseCharacteristic;

class CharacterCharacteristicsInformations extends ProtocolType {
    constructor(experience, experienceLevelFloor, experienceNextLevelFloor, experienceBonusLimit, kamas, statsPoints, additionnalPoints, spellsPoints, alignmentInfos, lifePoints, maxLifePoints, energyPoints, maxEnergyPoints, actionPointsCurrent, movementPointsCurrent, initiative, prospecting, actionPoints, movementPoints, strength, vitality, wisdom, chance, agility, intelligence, range, summonableCreaturesBoost, reflect, criticalHit, criticalHitWeapon, criticalMiss, healBonus, allDamagesBonus, weaponDamagesBonusPercent, damagesBonusPercent, trapBonus, trapBonusPercent, glyphBonusPercent, runeBonusPercent, permanentDamagePercent, tackleBlock, tackleEvade, PAAttack, PMAttack, pushDamageBonus, criticalDamageBonus, neutralDamageBonus, earthDamageBonus, waterDamageBonus, airDamageBonus, fireDamageBonus, dodgePALostProbability, dodgePMLostProbability, neutralElementResistPercent, earthElementResistPercent, waterElementResistPercent, airElementResistPercent, fireElementResistPercent, neutralElementReduction, earthElementReduction, waterElementReduction, airElementReduction, fireElementReduction, pushDamageReduction, criticalDamageReduction, pvpNeutralElementResistPercent, pvpEarthElementResistPercent, pvpWaterElementResistPercent, pvpAirElementResistPercent, pvpFireElementResistPercent, pvpNeutralElementReduction, pvpEarthElementReduction, pvpWaterElementReduction, pvpAirElementReduction, pvpFireElementReduction, meleeDamageDonePercent, meleeDamageReceivedPercent, rangedDamageDonePercent, rangedDamageReceivedPercent, weaponDamageDonePercent, weaponDamageReceivedPercent, spellDamageDonePercent, spellDamageReceivedPercent, spellModifications, probationTime) {
        super();
        this.experience = experience;
        this.experienceLevelFloor = experienceLevelFloor;
        this.experienceNextLevelFloor = experienceNextLevelFloor;
        this.experienceBonusLimit = experienceBonusLimit;
        this.kamas = kamas;
        this.statsPoints = statsPoints;
        this.additionnalPoints = additionnalPoints;
        this.spellsPoints = spellsPoints;
        this.alignmentInfos = alignmentInfos;
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
        this.energyPoints = energyPoints;
        this.maxEnergyPoints = maxEnergyPoints;
        this.actionPointsCurrent = actionPointsCurrent;
        this.movementPointsCurrent = movementPointsCurrent;
        this.initiative = initiative;
        this.prospecting = prospecting;
        this.actionPoints = actionPoints;
        this.movementPoints = movementPoints;
        this.strength = strength;
        this.vitality = vitality;
        this.wisdom = wisdom;
        this.chance = chance;
        this.agility = agility;
        this.intelligence = intelligence;
        this.range = range;
        this.summonableCreaturesBoost = summonableCreaturesBoost;
        this.reflect = reflect;
        this.criticalHit = criticalHit;
        this.criticalHitWeapon = criticalHitWeapon;
        this.criticalMiss = criticalMiss;
        this.healBonus = healBonus;
        this.allDamagesBonus = allDamagesBonus;
        this.weaponDamagesBonusPercent = weaponDamagesBonusPercent;
        this.damagesBonusPercent = damagesBonusPercent;
        this.trapBonus = trapBonus;
        this.trapBonusPercent = trapBonusPercent;
        this.glyphBonusPercent = glyphBonusPercent;
        this.runeBonusPercent = runeBonusPercent;
        this.permanentDamagePercent = permanentDamagePercent;
        this.tackleBlock = tackleBlock;
        this.tackleEvade = tackleEvade;
        this.PAAttack = PAAttack;
        this.PMAttack = PMAttack;
        this.pushDamageBonus = pushDamageBonus;
        this.criticalDamageBonus = criticalDamageBonus;
        this.neutralDamageBonus = neutralDamageBonus;
        this.earthDamageBonus = earthDamageBonus;
        this.waterDamageBonus = waterDamageBonus;
        this.airDamageBonus = airDamageBonus;
        this.fireDamageBonus = fireDamageBonus;
        this.dodgePALostProbability = dodgePALostProbability;
        this.dodgePMLostProbability = dodgePMLostProbability;
        this.neutralElementResistPercent = neutralElementResistPercent;
        this.earthElementResistPercent = earthElementResistPercent;
        this.waterElementResistPercent = waterElementResistPercent;
        this.airElementResistPercent = airElementResistPercent;
        this.fireElementResistPercent = fireElementResistPercent;
        this.neutralElementReduction = neutralElementReduction;
        this.earthElementReduction = earthElementReduction;
        this.waterElementReduction = waterElementReduction;
        this.airElementReduction = airElementReduction;
        this.fireElementReduction = fireElementReduction;
        this.pushDamageReduction = pushDamageReduction;
        this.criticalDamageReduction = criticalDamageReduction;
        this.pvpNeutralElementResistPercent = pvpNeutralElementResistPercent;
        this.pvpEarthElementResistPercent = pvpEarthElementResistPercent;
        this.pvpWaterElementResistPercent = pvpWaterElementResistPercent;
        this.pvpAirElementResistPercent = pvpAirElementResistPercent;
        this.pvpFireElementResistPercent = pvpFireElementResistPercent;
        this.pvpNeutralElementReduction = pvpNeutralElementReduction;
        this.pvpEarthElementReduction = pvpEarthElementReduction;
        this.pvpWaterElementReduction = pvpWaterElementReduction;
        this.pvpAirElementReduction = pvpAirElementReduction;
        this.pvpFireElementReduction = pvpFireElementReduction;
        this.meleeDamageDonePercent = meleeDamageDonePercent;
        this.meleeDamageReceivedPercent = meleeDamageReceivedPercent;
        this.rangedDamageDonePercent = rangedDamageDonePercent;
        this.rangedDamageReceivedPercent = rangedDamageReceivedPercent;
        this.weaponDamageDonePercent = weaponDamageDonePercent;
        this.weaponDamageReceivedPercent = weaponDamageReceivedPercent;
        this.spellDamageDonePercent = spellDamageDonePercent;
        this.spellDamageReceivedPercent = spellDamageReceivedPercent;
        this.spellModifications = spellModifications;
        this.probationTime = probationTime;
        this.messageId = 8;
    }

    serialize() {
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element experience.");
        }
        this.buffer.writeVarLong(this.experience);
        if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element experienceLevelFloor.");
        }
        this.buffer.writeVarLong(this.experienceLevelFloor);
        if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element experienceNextLevelFloor.");
        }
        this.buffer.writeVarLong(this.experienceNextLevelFloor);
        if (this.experienceBonusLimit < 0 || this.experienceBonusLimit > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceBonusLimit + ") on element experienceBonusLimit.");
        }
        this.buffer.writeVarLong(this.experienceBonusLimit);
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        this.buffer.writeVarLong(this.kamas);
        if (this.statsPoints < 0) {
            throw new Error("Forbidden value (" + this.statsPoints + ") on element statsPoints.");
        }
        this.buffer.writeVarShort(this.statsPoints);
        if (this.additionnalPoints < 0) {
            throw new Error("Forbidden value (" + this.additionnalPoints + ") on element additionnalPoints.");
        }
        this.buffer.writeVarShort(this.additionnalPoints);
        if (this.spellsPoints < 0) {
            throw new Error("Forbidden value (" + this.spellsPoints + ") on element spellsPoints.");
        }
        this.buffer.writeVarShort(this.spellsPoints);
        this.alignmentInfos.serialize(this.buffer);
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        this.buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        this.buffer.writeVarInt(this.maxLifePoints);
        if (this.energyPoints < 0) {
            throw new Error("Forbidden value (" + this.energyPoints + ") on element energyPoints.");
        }
        this.buffer.writeVarShort(this.energyPoints);
        if (this.maxEnergyPoints < 0) {
            throw new Error("Forbidden value (" + this.maxEnergyPoints + ") on element maxEnergyPoints.");
        }
        this.buffer.writeVarShort(this.maxEnergyPoints);
        this.buffer.writeVarShort(this.actionPointsCurrent);
        this.buffer.writeVarShort(this.movementPointsCurrent);
        this.initiative.serialize(this.buffer);
        this.prospecting.serialize(this.buffer);
        this.actionPoints.serialize(this.buffer);
        this.movementPoints.serialize(this.buffer);
        this.strength.serialize(this.buffer);
        this.vitality.serialize(this.buffer);
        this.wisdom.serialize(this.buffer);
        this.chance.serialize(this.buffer);
        this.agility.serialize(this.buffer);
        this.intelligence.serialize(this.buffer);
        this.range.serialize(this.buffer);
        this.summonableCreaturesBoost.serialize(this.buffer);
        this.reflect.serialize(this.buffer);
        this.criticalHit.serialize(this.buffer);
        if (this.criticalHitWeapon < 0) {
            throw new Error("Forbidden value (" + this.criticalHitWeapon + ") on element criticalHitWeapon.");
        }
        this.buffer.writeVarShort(this.criticalHitWeapon);
        this.criticalMiss.serialize(this.buffer);
        this.healBonus.serialize(this.buffer);
        this.allDamagesBonus.serialize(this.buffer);
        this.weaponDamagesBonusPercent.serialize(this.buffer);
        this.damagesBonusPercent.serialize(this.buffer);
        this.trapBonus.serialize(this.buffer);
        this.trapBonusPercent.serialize(this.buffer);
        this.glyphBonusPercent.serialize(this.buffer);
        this.runeBonusPercent.serialize(this.buffer);
        this.permanentDamagePercent.serialize(this.buffer);
        this.tackleBlock.serialize(this.buffer);
        this.tackleEvade.serialize(this.buffer);
        this.PAAttack.serialize(this.buffer);
        this.PMAttack.serialize(this.buffer);
        this.pushDamageBonus.serialize(this.buffer);
        this.criticalDamageBonus.serialize(this.buffer);
        this.neutralDamageBonus.serialize(this.buffer);
        this.earthDamageBonus.serialize(this.buffer);
        this.waterDamageBonus.serialize(this.buffer);
        this.airDamageBonus.serialize(this.buffer);
        this.fireDamageBonus.serialize(this.buffer);
        this.dodgePALostProbability.serialize(this.buffer);
        this.dodgePMLostProbability.serialize(this.buffer);
        this.neutralElementResistPercent.serialize(this.buffer);
        this.earthElementResistPercent.serialize(this.buffer);
        this.waterElementResistPercent.serialize(this.buffer);
        this.airElementResistPercent.serialize(this.buffer);
        this.fireElementResistPercent.serialize(this.buffer);
        this.neutralElementReduction.serialize(this.buffer);
        this.earthElementReduction.serialize(this.buffer);
        this.waterElementReduction.serialize(this.buffer);
        this.airElementReduction.serialize(this.buffer);
        this.fireElementReduction.serialize(this.buffer);
        this.pushDamageReduction.serialize(this.buffer);
        this.criticalDamageReduction.serialize(this.buffer);
        this.pvpNeutralElementResistPercent.serialize(this.buffer);
        this.pvpEarthElementResistPercent.serialize(this.buffer);
        this.pvpWaterElementResistPercent.serialize(this.buffer);
        this.pvpAirElementResistPercent.serialize(this.buffer);
        this.pvpFireElementResistPercent.serialize(this.buffer);
        this.pvpNeutralElementReduction.serialize(this.buffer);
        this.pvpEarthElementReduction.serialize(this.buffer);
        this.pvpWaterElementReduction.serialize(this.buffer);
        this.pvpAirElementReduction.serialize(this.buffer);
        this.pvpFireElementReduction.serialize(this.buffer);
        this.meleeDamageDonePercent.serialize(this.buffer);
        this.meleeDamageReceivedPercent.serialize(this.buffer);
        this.rangedDamageDonePercent.serialize(this.buffer);
        this.rangedDamageReceivedPercent.serialize(this.buffer);
        this.weaponDamageDonePercent.serialize(this.buffer);
        this.weaponDamageReceivedPercent.serialize(this.buffer);
        this.spellDamageDonePercent.serialize(this.buffer);
        this.spellDamageReceivedPercent.serialize(this.buffer);
        this.buffer.writeShort(this.spellModifications.length);
        var _loc2_ = 0;
        while (_loc2_ < this.spellModifications.length) {
            (this.spellModifications[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.probationTime < 0) {
            throw new Error("Forbidden value (" + this.probationTime + ") on element probationTime.");
        }
        this.buffer.writeInt(this.probationTime);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element of CharacterCharacteristicsInformations.experience.");
        }
        this.experienceLevelFloor = buffer.readVarUhLong();
        if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element of CharacterCharacteristicsInformations.experienceLevelFloor.");
        };
        this.experienceNextLevelFloor = buffer.readVarUhLong();
        if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element of CharacterCharacteristicsInformations.experienceNextLevelFloor.");
        };
        this.experienceBonusLimit = buffer.readVarUhLong();
        if (this.experienceBonusLimit < 0 || this.experienceBonusLimit > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceBonusLimit + ") on element of CharacterCharacteristicsInformations.experienceBonusLimit.");
        };
        this.kamas = buffer.readVarUhLong();
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element of CharacterCharacteristicsInformations.kamas.");
        };
        this.statsPoints = buffer.readVarUhShort();
        if (this.statsPoints < 0) {
            throw new Error("Forbidden value (" + this.statsPoints + ") on element of CharacterCharacteristicsInformations.statsPoints.");
        };
        this.additionnalPoints = buffer.readVarUhShort();
        if (this.additionnalPoints < 0) {
            throw new Error("Forbidden value (" + this.additionnalPoints + ") on element of CharacterCharacteristicsInformations.additionnalPoints.");
        };
        this.spellsPoints = buffer.readVarUhShort();
        if (this.spellsPoints < 0) {
            throw new Error("Forbidden value (" + this.spellsPoints + ") on element of CharacterCharacteristicsInformations.spellsPoints.");
        };
        this.alignmentInfos = new ActorExtendedAlignmentInformations();
        this.alignmentInfos.deserialize(buffer);
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element of CharacterCharacteristicsInformations.lifePoints.");
        };
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of CharacterCharacteristicsInformations.maxLifePoints.");
        };
        this.energyPoints = buffer.readVarUhShort();
        if (this.energyPoints < 0) {
            throw new Error("Forbidden value (" + this.energyPoints + ") on element of CharacterCharacteristicsInformations.energyPoints.");
        };
        this.maxEnergyPoints = buffer.readVarUhShort();
        if (this.maxEnergyPoints < 0) {
            throw new Error("Forbidden value (" + this.maxEnergyPoints + ") on element of CharacterCharacteristicsInformations.maxEnergyPoints.");
        };
        this.actionPointsCurrent = buffer.readVarShort();
        this.movementPointsCurrent = buffer.readVarShort();;
        this.initiative = new CharacterBaseCharacteristic();
        this.initiative.deserialize(buffer);
        this.prospecting = new CharacterBaseCharacteristic();
        this.prospecting.deserialize(buffer);
        this.actionPoints = new CharacterBaseCharacteristic();
        this.actionPoints.deserialize(buffer);
        this.movementPoints = new CharacterBaseCharacteristic();
        this.movementPoints.deserialize(buffer);
        this.strength = new CharacterBaseCharacteristic();
        this.strength.deserialize(buffer);
        this.vitality = new CharacterBaseCharacteristic();
        this.vitality.deserialize(buffer);
        this.wisdom = new CharacterBaseCharacteristic();
        this.wisdom.deserialize(buffer);
        this.chance = new CharacterBaseCharacteristic();
        this.chance.deserialize(buffer);
        this.agility = new CharacterBaseCharacteristic();
        this.agility.deserialize(buffer);
        this.intelligence = new CharacterBaseCharacteristic();
        this.intelligence.deserialize(buffer);
        this.range = new CharacterBaseCharacteristic();
        this.range.deserialize(buffer);
        this.summonableCreaturesBoost = new CharacterBaseCharacteristic();
        this.summonableCreaturesBoost.deserialize(buffer);
        this.reflect = new CharacterBaseCharacteristic();
        this.reflect.deserialize(buffer);
        this.criticalHit = new CharacterBaseCharacteristic();
        this.criticalHit.deserialize(buffer);
        this.criticalHitWeapon = buffer.readVarUhShort();
        if (this.criticalHitWeapon < 0) {
            throw new Error("Forbidden value (" + this.criticalHitWeapon + ") on element of CharacterCharacteristicsInformations.criticalHitWeapon.");
        };
        this.criticalMiss = new CharacterBaseCharacteristic();
        this.criticalMiss.deserialize(buffer);
        this.healBonus = new CharacterBaseCharacteristic();
        this.healBonus.deserialize(buffer);
        this.allDamagesBonus = new CharacterBaseCharacteristic();
        this.allDamagesBonus.deserialize(buffer);
        this.weaponDamagesBonusPercent = new CharacterBaseCharacteristic();
        this.weaponDamagesBonusPercent.deserialize(buffer);
        this.damagesBonusPercent = new CharacterBaseCharacteristic();
        this.damagesBonusPercent.deserialize(buffer);
        this.trapBonus = new CharacterBaseCharacteristic();
        this.trapBonus.deserialize(buffer);
        this.trapBonusPercent = new CharacterBaseCharacteristic();
        this.trapBonusPercent.deserialize(buffer);
        this.glyphBonusPercent = new CharacterBaseCharacteristic();
        this.glyphBonusPercent.deserialize(buffer);
        this.runeBonusPercent = new CharacterBaseCharacteristic();
        this.runeBonusPercent.deserialize(buffer);
        this.permanentDamagePercent = new CharacterBaseCharacteristic();
        this.permanentDamagePercent.deserialize(buffer);
        this.tackleBlock = new CharacterBaseCharacteristic();
        this.tackleBlock.deserialize(buffer);
        this.tackleEvade = new CharacterBaseCharacteristic();
        this.tackleEvade.deserialize(buffer);
        this.PAAttack = new CharacterBaseCharacteristic();
        this.PAAttack.deserialize(buffer);
        this.PMAttack = new CharacterBaseCharacteristic();
        this.PMAttack.deserialize(buffer);
        this.pushDamageBonus = new CharacterBaseCharacteristic();
        this.pushDamageBonus.deserialize(buffer);
        this.criticalDamageBonus = new CharacterBaseCharacteristic();
        this.criticalDamageBonus.deserialize(buffer);
        this.neutralDamageBonus = new CharacterBaseCharacteristic();
        this.neutralDamageBonus.deserialize(buffer);
        this.earthDamageBonus = new CharacterBaseCharacteristic();
        this.earthDamageBonus.deserialize(buffer);
        this.waterDamageBonus = new CharacterBaseCharacteristic();
        this.waterDamageBonus.deserialize(buffer);
        this.airDamageBonus = new CharacterBaseCharacteristic();
        this.airDamageBonus.deserialize(buffer);
        this.fireDamageBonus = new CharacterBaseCharacteristic();
        this.fireDamageBonus.deserialize(buffer);
        this.dodgePALostProbability = new CharacterBaseCharacteristic();
        this.dodgePALostProbability.deserialize(buffer);
        this.dodgePMLostProbability = new CharacterBaseCharacteristic();
        this.dodgePMLostProbability.deserialize(buffer);
        this.neutralElementResistPercent = new CharacterBaseCharacteristic();
        this.neutralElementResistPercent.deserialize(buffer);
        this.earthElementResistPercent = new CharacterBaseCharacteristic();
        this.earthElementResistPercent.deserialize(buffer);
        this.waterElementResistPercent = new CharacterBaseCharacteristic();
        this.waterElementResistPercent.deserialize(buffer);
        this.airElementResistPercent = new CharacterBaseCharacteristic();
        this.airElementResistPercent.deserialize(buffer);
        this.fireElementResistPercent = new CharacterBaseCharacteristic();
        this.fireElementResistPercent.deserialize(buffer);
        this.neutralElementReduction = new CharacterBaseCharacteristic();
        this.neutralElementReduction.deserialize(buffer);
        this.earthElementReduction = new CharacterBaseCharacteristic();
        this.earthElementReduction.deserialize(buffer);
        this.waterElementReduction = new CharacterBaseCharacteristic();
        this.waterElementReduction.deserialize(buffer);
        this.airElementReduction = new CharacterBaseCharacteristic();
        this.airElementReduction.deserialize(buffer);
        this.fireElementReduction = new CharacterBaseCharacteristic();
        this.fireElementReduction.deserialize(buffer);
        this.pushDamageReduction = new CharacterBaseCharacteristic();
        this.pushDamageReduction.deserialize(buffer);
        this.criticalDamageReduction = new CharacterBaseCharacteristic();
        this.criticalDamageReduction.deserialize(buffer);
        this.pvpNeutralElementResistPercent = new CharacterBaseCharacteristic();
        this.pvpNeutralElementResistPercent.deserialize(buffer);
        this.pvpEarthElementResistPercent = new CharacterBaseCharacteristic();
        this.pvpEarthElementResistPercent.deserialize(buffer);
        this.pvpWaterElementResistPercent = new CharacterBaseCharacteristic();
        this.pvpWaterElementResistPercent.deserialize(buffer);
        this.pvpAirElementResistPercent = new CharacterBaseCharacteristic();
        this.pvpAirElementResistPercent.deserialize(buffer);
        this.pvpFireElementResistPercent = new CharacterBaseCharacteristic();
        this.pvpFireElementResistPercent.deserialize(buffer);
        this.pvpNeutralElementReduction = new CharacterBaseCharacteristic();
        this.pvpNeutralElementReduction.deserialize(buffer);
        this.pvpEarthElementReduction = new CharacterBaseCharacteristic();
        this.pvpEarthElementReduction.deserialize(buffer);
        this.pvpWaterElementReduction = new CharacterBaseCharacteristic();
        this.pvpWaterElementReduction.deserialize(buffer);
        this.pvpAirElementReduction = new CharacterBaseCharacteristic();
        this.pvpAirElementReduction.deserialize(buffer);
        this.pvpFireElementReduction = new CharacterBaseCharacteristic();
        this.pvpFireElementReduction.deserialize(buffer);
        this.meleeDamageDonePercent = new CharacterBaseCharacteristic();
        this.meleeDamageDonePercent.deserialize(buffer);
        this.meleeDamageReceivedPercent = new CharacterBaseCharacteristic();
        this.meleeDamageReceivedPercent.deserialize(buffer);
        this.rangedDamageDonePercent = new CharacterBaseCharacteristic();
        this.rangedDamageDonePercent.deserialize(buffer);
        this.rangedDamageReceivedPercent = new CharacterBaseCharacteristic();
        this.rangedDamageReceivedPercent.deserialize(buffer);
        this.weaponDamageDonePercent = new CharacterBaseCharacteristic();
        this.weaponDamageDonePercent.deserialize(buffer);
        this.weaponDamageReceivedPercent = new CharacterBaseCharacteristic();
        this.weaponDamageReceivedPercent.deserialize(buffer);
        this.spellDamageDonePercent = new CharacterBaseCharacteristic();
        this.spellDamageDonePercent.deserialize(buffer);
        this.spellDamageReceivedPercent = new CharacterBaseCharacteristic();
        this.spellDamageReceivedPercent.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new CharacterSpellModification();
            _loc4_.deserialize(buffer);
            this.spellModifications.push(_loc4_);
            _loc3_++;
        }
        this._probationTimeFunc(buffer);
    }
};
module.exports.CharacterCharacteristicsInformations = CharacterCharacteristicsInformations;
module.exports.types[8] = CharacterCharacteristicsInformations;

class CharacterSpellModification extends ProtocolType {
    constructor(modificationType, spellId, value) {
        super();
        this.modificationType = modificationType;
        this.spellId = spellId;
        this.value = value;
        this.messageId = 215;
    }

    serialize() {
        this.buffer.writeByte(this.modificationType);
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        this.value.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.modificationType = buffer.readByte();
        if (this.modificationType < 0) {
            throw new Error("Forbidden value (" + this.modificationType + ") on element of CharacterSpellModification.modificationType.");
        }
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of CharacterSpellModification.spellId.");
        };
        this.value = new CharacterBaseCharacteristic();
        this.value.deserialize(buffer);
    }
};
module.exports.CharacterSpellModification = CharacterSpellModification;
module.exports.types[215] = CharacterSpellModification;

class CharacterMinimalInformations extends CharacterBasicMinimalInformations {
    constructor(id, name, level) {
        super(id, name);
        this.level = level;
        this.messageId = 110;
    }

    serialize() {
        super.serialize();
        if (this.level < 1 || this.level > 206) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.level = buffer.readUnsignedByte();
        if (this.level < 1 || this.level > 206) {
            throw new Error("Forbidden value (" + this.level + ") on element of CharacterMinimalInformations.level.");
        }
    }
};
module.exports.CharacterMinimalInformations = CharacterMinimalInformations;
module.exports.types[110] = CharacterMinimalInformations;

class CharacterMinimalPlusLookInformations extends CharacterMinimalInformations {
    constructor(param1, name, level, entityLook) {
        super(id, name, level);
        this.entityLook = entityLook;
        this.messageId = 163;
    }

    serialize() {
        super.serialize();
        this.entityLook.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.entityLook = new EntityLook();
        this.entityLook.deserialize(buffer);
    }
};
module.exports.CharacterMinimalPlusLookInformations = CharacterMinimalPlusLookInformations;
module.exports.types[163] = CharacterMinimalPlusLookInformations;

class CharacterMinimalGuildInformations extends CharacterMinimalPlusLookInformations {
    constructor(param1, param2, level, entityLook, guild) {
        super(param1, name, level, entityLook);
        this.guild = guild;
        this.messageId = 445;
    }

    serialize() {
        super.serialize();
        this.guild.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.guild = new BasicGuildInformations();
        this.guild.deserialize(buffer);
    }
};
module.exports.CharacterMinimalGuildInformations = CharacterMinimalGuildInformations;
module.exports.types[445] = CharacterMinimalGuildInformations;

class CharacterMinimalAllianceInformations extends CharacterMinimalGuildInformations {
    constructor(param1, param2, param3, entityLook, guild, alliance) {
        super(param1, param2, level, entityLook, guild);
        this.alliance = alliance;
        this.messageId = 444;
    }

    serialize() {
        super.serialize();
        this.alliance.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.alliance = new BasicAllianceInformations();
        this.alliance.deserialize(buffer);
    }
};
module.exports.CharacterMinimalAllianceInformations = CharacterMinimalAllianceInformations;
module.exports.types[444] = CharacterMinimalAllianceInformations;

class CharacterMinimalPlusLookAndGradeInformations extends CharacterMinimalPlusLookInformations {
    constructor(param1, param2, level, entityLook, grade) {
        super(param1, name, level, entityLook);
        this.grade = grade;
        this.messageId = 193;
    }

    serialize() {
        super.serialize();
        if (this.grade < 0) {
            throw new Error("Forbidden value (" + this.grade + ") on element grade.");
        }
        this.buffer.writeVarInt(this.grade);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.grade = buffer.readVarUhInt();
        if (this.grade < 0) {
            throw new Error("Forbidden value (" + this.grade + ") on element of CharacterMinimalPlusLookAndGradeInformations.grade.");
        }
    }
};
module.exports.CharacterMinimalPlusLookAndGradeInformations = CharacterMinimalPlusLookAndGradeInformations;
module.exports.types[193] = CharacterMinimalPlusLookAndGradeInformations;

class AbstractCharacterToRefurbishInformation extends AbstractCharacterInformation {
    constructor(id, colors, cosmeticId) {
        super(id);
        this.colors = colors;
        this.cosmeticId = cosmeticId;
        this.messageId = 475;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.colors.length);
        var _loc2_ = 0;
        while (_loc2_ < this.colors.length) {
            this.buffer.writeInt(this.colors[_loc2_]);
            _loc2_++;
        }
        if (this.cosmeticId < 0) {
            throw new Error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
        }
        this.buffer.writeVarInt(this.cosmeticId);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.colors.push(_loc4_);
            _loc3_++;
        }
        this._cosmeticIdFunc(buffer);
    }
};
module.exports.AbstractCharacterToRefurbishInformation = AbstractCharacterToRefurbishInformation;
module.exports.types[475] = AbstractCharacterToRefurbishInformation;

class CharacterBaseInformations extends CharacterMinimalPlusLookInformations {
    constructor(param1, param2, level, entityLook, breed, sex) {
        super(param1, name, level, entityLook);
        this.breed = breed;
        this.sex = sex;
        this.messageId = 45;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.breed);
        this.buffer.writeBoolean(this.sex);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.breed = buffer.readByte();
        this.sex = buffer.readBoolean();;
    }
};
module.exports.CharacterBaseInformations = CharacterBaseInformations;
module.exports.types[45] = CharacterBaseInformations;

class CharacterHardcoreOrEpicInformations extends CharacterBaseInformations {
    constructor(param1, param2, param3, entityLook, breed, sex, deathState, deathCount, deathMaxLevel) {
        super(param1, param2, level, entityLook, breed, sex);
        this.deathState = deathState;
        this.deathCount = deathCount;
        this.deathMaxLevel = deathMaxLevel;
        this.messageId = 474;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.deathState);
        if (this.deathCount < 0) {
            throw new Error("Forbidden value (" + this.deathCount + ") on element deathCount.");
        }
        this.buffer.writeVarShort(this.deathCount);
        if (this.deathMaxLevel < 1 || this.deathMaxLevel > 206) {
            throw new Error("Forbidden value (" + this.deathMaxLevel + ") on element deathMaxLevel.");
        }
        this.buffer.writeByte(this.deathMaxLevel);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.deathState = buffer.readByte();
        if (this.deathState < 0) {
            throw new Error("Forbidden value (" + this.deathState + ") on element of CharacterHardcoreOrEpicInformations.deathState.");
        }
        this.deathCount = buffer.readVarUhShort();
        if (this.deathCount < 0) {
            throw new Error("Forbidden value (" + this.deathCount + ") on element of CharacterHardcoreOrEpicInformations.deathCount.");
        };
        this.deathMaxLevel = buffer.readUnsignedByte();
        if (this.deathMaxLevel < 1 || this.deathMaxLevel > 206) {
            throw new Error("Forbidden value (" + this.deathMaxLevel + ") on element of CharacterHardcoreOrEpicInformations.deathMaxLevel.");
        };
    }
};
module.exports.CharacterHardcoreOrEpicInformations = CharacterHardcoreOrEpicInformations;
module.exports.types[474] = CharacterHardcoreOrEpicInformations;

class CharacterRemodelingInformation extends AbstractCharacterInformation {
    constructor(id, name, breed, sex, cosmeticId, colors) {
        super(id);
        this.name = name;
        this.breed = breed;
        this.sex = sex;
        this.cosmeticId = cosmeticId;
        this.colors = colors;
        this.messageId = 479;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.name);
        this.buffer.writeByte(this.breed);
        this.buffer.writeBoolean(this.sex);
        if (this.cosmeticId < 0) {
            throw new Error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
        }
        this.buffer.writeVarShort(this.cosmeticId);
        this.buffer.writeShort(this.colors.length);
        var _loc2_ = 0;
        while (_loc2_ < this.colors.length) {
            this.buffer.writeInt(this.colors[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        this.name = buffer.readUTF();
        this.breed = buffer.readByte();;
        this.sex = buffer.readBoolean();;
        this.cosmeticId = buffer.readVarUhShort();
        if (this.cosmeticId < 0) {
            throw new Error("Forbidden value (" + this.cosmeticId + ") on element of CharacterRemodelingInformation.cosmeticId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.colors.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.CharacterRemodelingInformation = CharacterRemodelingInformation;
module.exports.types[479] = CharacterRemodelingInformation;

class CharacterToRecolorInformation extends AbstractCharacterToRefurbishInformation {
    constructor(id, colors, cosmeticId) {
        super(id, colors, cosmeticId);
        this.messageId = 212;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.CharacterToRecolorInformation = CharacterToRecolorInformation;
module.exports.types[212] = CharacterToRecolorInformation;

class CharacterToRelookInformation extends AbstractCharacterToRefurbishInformation {
    constructor(id, colors, cosmeticId) {
        super(id, colors, cosmeticId);
        this.messageId = 399;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.CharacterToRelookInformation = CharacterToRelookInformation;
module.exports.types[399] = CharacterToRelookInformation;

class CharacterToRemodelInformations extends CharacterRemodelingInformation {
    constructor(id, name, breed, sex, cosmeticId, colors, possibleChangeMask, mandatoryChangeMask) {
        super(id, name, breed, sex, cosmeticId, colors);
        this.possibleChangeMask = possibleChangeMask;
        this.mandatoryChangeMask = mandatoryChangeMask;
        this.messageId = 477;
    }

    serialize() {
        super.serialize();
        if (this.possibleChangeMask < 0) {
            throw new Error("Forbidden value (" + this.possibleChangeMask + ") on element possibleChangeMask.");
        }
        this.buffer.writeByte(this.possibleChangeMask);
        if (this.mandatoryChangeMask < 0) {
            throw new Error("Forbidden value (" + this.mandatoryChangeMask + ") on element mandatoryChangeMask.");
        }
        this.buffer.writeByte(this.mandatoryChangeMask);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.possibleChangeMask = buffer.readByte();
        if (this.possibleChangeMask < 0) {
            throw new Error("Forbidden value (" + this.possibleChangeMask + ") on element of CharacterToRemodelInformations.possibleChangeMask.");
        }
        this.mandatoryChangeMask = buffer.readByte();
        if (this.mandatoryChangeMask < 0) {
            throw new Error("Forbidden value (" + this.mandatoryChangeMask + ") on element of CharacterToRemodelInformations.mandatoryChangeMask.");
        };
    }
};
module.exports.CharacterToRemodelInformations = CharacterToRemodelInformations;
module.exports.types[477] = CharacterToRemodelInformations;

class RemodelingInformation extends ProtocolType {
    constructor(name, breed, sex, cosmeticId, colors) {
        super();
        this.name = name;
        this.breed = breed;
        this.sex = sex;
        this.cosmeticId = cosmeticId;
        this.colors = colors;
        this.messageId = 480;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
        this.buffer.writeByte(this.breed);
        this.buffer.writeBoolean(this.sex);
        if (this.cosmeticId < 0) {
            throw new Error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
        }
        this.buffer.writeVarShort(this.cosmeticId);
        this.buffer.writeShort(this.colors.length);
        var _loc2_ = 0;
        while (_loc2_ < this.colors.length) {
            this.buffer.writeInt(this.colors[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.name = buffer.readUTF();
        this.breed = buffer.readByte();;
        this.sex = buffer.readBoolean();;
        this.cosmeticId = buffer.readVarUhShort();
        if (this.cosmeticId < 0) {
            throw new Error("Forbidden value (" + this.cosmeticId + ") on element of RemodelingInformation.cosmeticId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.colors.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.RemodelingInformation = RemodelingInformation;
module.exports.types[480] = RemodelingInformation;

class ActorRestrictionsInformations extends ProtocolType {
    constructor(cantBeAggressed, cantBeChallenged, cantTrade, cantBeAttackedByMutant, cantRun, forceSlowWalk, cantMinimize, cantMove, cantAggress, cantChallenge, cantExchange, cantAttack, cantChat, cantBeMerchant, cantUseObject, cantUseTaxCollector, cantUseInteractive, cantSpeakToNPC, cantChangeZone, cantAttackMonster, cantWalk8Directions) {
        super();
        this.cantBeAggressed = cantBeAggressed;
        this.cantBeChallenged = cantBeChallenged;
        this.cantTrade = cantTrade;
        this.cantBeAttackedByMutant = cantBeAttackedByMutant;
        this.cantRun = cantRun;
        this.forceSlowWalk = forceSlowWalk;
        this.cantMinimize = cantMinimize;
        this.cantMove = cantMove;
        this.cantAggress = cantAggress;
        this.cantChallenge = cantChallenge;
        this.cantExchange = cantExchange;
        this.cantAttack = cantAttack;
        this.cantChat = cantChat;
        this.cantBeMerchant = cantBeMerchant;
        this.cantUseObject = cantUseObject;
        this.cantUseTaxCollector = cantUseTaxCollector;
        this.cantUseInteractive = cantUseInteractive;
        this.cantSpeakToNPC = cantSpeakToNPC;
        this.cantChangeZone = cantChangeZone;
        this.cantAttackMonster = cantAttackMonster;
        this.cantWalk8Directions = cantWalk8Directions;
        this.messageId = 204;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.cantBeAggressed);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.cantBeChallenged);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.cantTrade);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.cantBeAttackedByMutant);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 4, this.cantRun);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 5, this.forceSlowWalk);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 6, this.cantMinimize);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 7, this.cantMove);
        this.buffer.writeByte(_loc2_);
        var _loc3_ = 0;
        _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 0, this.cantAggress);
        _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 1, this.cantChallenge);
        _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 2, this.cantExchange);
        _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 3, this.cantAttack);
        _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 4, this.cantChat);
        _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 5, this.cantBeMerchant);
        _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 6, this.cantUseObject);
        _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 7, this.cantUseTaxCollector);
        this.buffer.writeByte(_loc3_);
        var _loc4_ = 0;
        _loc4_ = BooleanByteWrapper.setFlag(_loc4_, 0, this.cantUseInteractive);
        _loc4_ = BooleanByteWrapper.setFlag(_loc4_, 1, this.cantSpeakToNPC);
        _loc4_ = BooleanByteWrapper.setFlag(_loc4_, 2, this.cantChangeZone);
        _loc4_ = BooleanByteWrapper.setFlag(_loc4_, 3, this.cantAttackMonster);
        _loc4_ = BooleanByteWrapper.setFlag(_loc4_, 4, this.cantWalk8Directions);
        this.buffer.writeByte(_loc4_);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
    }
};
module.exports.ActorRestrictionsInformations = ActorRestrictionsInformations;
module.exports.types[204] = ActorRestrictionsInformations;

class PlayerStatus extends ProtocolType {
    constructor(statusId) {
        super();
        this.statusId = statusId;
        this.messageId = 415;
    }

    serialize() {
        this.buffer.writeByte(this.statusId);
    }

    deserialize(buffer) {
        this.statusId = buffer.readByte();
        if (this.statusId < 0) {
            throw new Error("Forbidden value (" + this.statusId + ") on element of PlayerStatus.statusId.");
        }
    }
};
module.exports.PlayerStatus = PlayerStatus;
module.exports.types[415] = PlayerStatus;

class PlayerStatusExtended extends PlayerStatus {
    constructor(statusId, message) {
        super(statusId);
        this.message = message;
        this.messageId = 414;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.message);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.message = buffer.readUTF();
    }
};
module.exports.PlayerStatusExtended = PlayerStatusExtended;
module.exports.types[414] = PlayerStatusExtended;

class ActorOrientation extends ProtocolType {
    constructor(id, direction) {
        super();
        this.id = id;
        this.direction = direction;
        this.messageId = 353;
    }

    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        this.buffer.writeByte(this.direction);
    }

    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of ActorOrientation.id.");
        }
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            throw new Error("Forbidden value (" + this.direction + ") on element of ActorOrientation.direction.");
        };
    }
};
module.exports.ActorOrientation = ActorOrientation;
module.exports.types[353] = ActorOrientation;

class EntityDispositionInformations extends ProtocolType {
    constructor(cellId, direction) {
        super();
        this.cellId = cellId;
        this.direction = direction;
        this.messageId = 60;
    }

    serialize() {
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
        this.buffer.writeByte(this.direction);
    }

    deserialize(buffer) {
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of EntityDispositionInformations.cellId.");
        }
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            throw new Error("Forbidden value (" + this.direction + ") on element of EntityDispositionInformations.direction.");
        };
    }
};
module.exports.EntityDispositionInformations = EntityDispositionInformations;
module.exports.types[60] = EntityDispositionInformations;

class EntityMovementInformations extends ProtocolType {
    constructor(id, steps) {
        super();
        this.id = id;
        this.steps = steps;
        this.messageId = 63;
    }

    serialize() {
        this.buffer.writeInt(this.id);
        this.buffer.writeShort(this.steps.length);
        var _loc2_ = 0;
        while (_loc2_ < this.steps.length) {
            this.buffer.writeByte(this.steps[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.id = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.steps.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.EntityMovementInformations = EntityMovementInformations;
module.exports.types[63] = EntityMovementInformations;

class AbstractFightTeamInformations extends ProtocolType {
    constructor(teamId, leaderId, teamSide, teamTypeId, nbWaves) {
        super();
        this.teamId = teamId;
        this.leaderId = leaderId;
        this.teamSide = teamSide;
        this.teamTypeId = teamTypeId;
        this.nbWaves = nbWaves;
        this.messageId = 116;
    }

    serialize() {
        this.buffer.writeByte(this.teamId);
        if (this.leaderId < -9007199254740990 || this.leaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
        }
        this.buffer.writeDouble(this.leaderId);
        this.buffer.writeByte(this.teamSide);
        this.buffer.writeByte(this.teamTypeId);
        if (this.nbWaves < 0) {
            throw new Error("Forbidden value (" + this.nbWaves + ") on element nbWaves.");
        }
        this.buffer.writeByte(this.nbWaves);
    }

    deserialize(buffer) {
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            throw new Error("Forbidden value (" + this.teamId + ") on element of AbstractFightTeamInformations.teamId.");
        }
        this.leaderId = buffer.readDouble();
        if (this.leaderId < -9007199254740990 || this.leaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leaderId + ") on element of AbstractFightTeamInformations.leaderId.");
        };
        this.teamSide = buffer.readByte();
        this.teamTypeId = buffer.readByte();
        if (this.teamTypeId < 0) {
            throw new Error("Forbidden value (" + this.teamTypeId + ") on element of AbstractFightTeamInformations.teamTypeId.");
        };
        this.nbWaves = buffer.readByte();
        if (this.nbWaves < 0) {
            throw new Error("Forbidden value (" + this.nbWaves + ") on element of AbstractFightTeamInformations.nbWaves.");
        };
    }
};
module.exports.AbstractFightTeamInformations = AbstractFightTeamInformations;
module.exports.types[116] = AbstractFightTeamInformations;

class FightTeamInformations extends AbstractFightTeamInformations {
    constructor(teamId, leaderId, teamSide, teamTypeId, nbWaves, teamMembers) {
        super(teamId, leaderId, teamSide, teamTypeId, nbWaves);
        this.teamMembers = teamMembers;
        this.messageId = 33;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.teamMembers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.teamMembers.length) {
            this.buffer.writeShort((this.teamMembers[_loc2_]).getTypeId());
            (this.teamMembers[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(FightTeamMemberInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.teamMembers.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.FightTeamInformations = FightTeamInformations;
module.exports.types[33] = FightTeamInformations;

class FightAllianceTeamInformations extends FightTeamInformations {
    constructor(teamId, leaderId, teamSide, teamTypeId, nbWaves, teamMembers, relation) {
        super(teamId, leaderId, teamSide, teamTypeId, nbWaves, teamMembers);
        this.relation = relation;
        this.messageId = 439;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.relation);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.relation = buffer.readByte();
        if (this.relation < 0) {
            throw new Error("Forbidden value (" + this.relation + ") on element of FightAllianceTeamInformations.relation.");
        }
    }
};
module.exports.FightAllianceTeamInformations = FightAllianceTeamInformations;
module.exports.types[439] = FightAllianceTeamInformations;

class FightCommonInformations extends ProtocolType {
    constructor(fightId, fightType, fightTeams, fightTeamsPositions, fightTeamsOptions) {
        super();
        this.fightId = fightId;
        this.fightType = fightType;
        this.fightTeams = fightTeams;
        this.fightTeamsPositions = fightTeamsPositions;
        this.fightTeamsOptions = fightTeamsOptions;
        this.messageId = 43;
    }

    serialize() {
        this.buffer.writeInt(this.fightId);
        this.buffer.writeByte(this.fightType);
        this.buffer.writeShort(this.fightTeams.length);
        var _loc2_ = 0;
        while (_loc2_ < this.fightTeams.length) {
            this.buffer.writeShort((this.fightTeams[_loc2_]).getTypeId());
            (this.fightTeams[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.fightTeamsPositions.length);
        var _loc3_ = 0;
        while (_loc3_ < this.fightTeamsPositions.length) {
            if (this.fightTeamsPositions[_loc3_] < 0 || this.fightTeamsPositions[_loc3_] > 559) {
                throw new Error("Forbidden value (" + this.fightTeamsPositions[_loc3_] + ") on element 4 (starting at 1) of fightTeamsPositions.");
            }
            this.buffer.writeVarShort(this.fightTeamsPositions[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.fightTeamsOptions.length);
        var _loc4_ = 0;
        while (_loc4_ < this.fightTeamsOptions.length) {
            (this.fightTeamsOptions[_loc4_]).serialize(this.buffer);
            _loc4_++;
        }
    }

    deserialize(buffer) {
        var _loc8_ = 0;
        var _loc9_ = null;
        var _loc10_ = 0;
        var _loc11_ = null;
        this.fightId = buffer.readInt();
        this.fightType = buffer.readByte();
        if (this.fightType < 0) {
            throw new Error("Forbidden value (" + this.fightType + ") on element of FightCommonInformations.fightType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readUnsignedShort();
            _loc9_ = ProtocolTypeManager.getInstance(FightTeamInformations, _loc8_);
            _loc9_.deserialize(buffer);
            this.fightTeams.push(_loc9_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc10_ = buffer.readVarUhShort();
            if (_loc10_ < 0 || _loc10_ > 559) {
                throw new Error("Forbidden value (" + _loc10_ + ") on elements of fightTeamsPositions.");
            }
            this.fightTeamsPositions.push(_loc10_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc11_ = new FightOptionsInformations();
            _loc11_.deserialize(buffer);
            this.fightTeamsOptions.push(_loc11_);
            _loc7_++;
        }
    }
};
module.exports.FightCommonInformations = FightCommonInformations;
module.exports.types[43] = FightCommonInformations;

class FightExternalInformations extends ProtocolType {
    constructor(fightId, fightType, fightStart, fightSpectatorLocked, fightTeams, fightTeamsOptions) {
        super();
        this.fightId = fightId;
        this.fightType = fightType;
        this.fightStart = fightStart;
        this.fightSpectatorLocked = fightSpectatorLocked;
        this.fightTeams = fightTeams;
        this.fightTeamsOptions = fightTeamsOptions;
        this.messageId = 117;
    }

    serialize() {
        this.buffer.writeInt(this.fightId);
        this.buffer.writeByte(this.fightType);
        if (this.fightStart < 0) {
            throw new Error("Forbidden value (" + this.fightStart + ") on element fightStart.");
        }
        this.buffer.writeInt(this.fightStart);
        this.buffer.writeBoolean(this.fightSpectatorLocked);
        var _loc2_ = 0;
        while (_loc2_ < 2) {
            this.fightTeams[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        var _loc3_ = 0;
        while (_loc3_ < 2) {
            this.fightTeamsOptions[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.fightType = buffer.readByte();
        if (this.fightType < 0) {
            throw new Error("Forbidden value (" + this.fightType + ") on element of FightExternalInformations.fightType.");
        }
        this.fightStart = buffer.readInt();
        if (this.fightStart < 0) {
            throw new Error("Forbidden value (" + this.fightStart + ") on element of FightExternalInformations.fightStart.");
        };
        this.fightSpectatorLocked = buffer.readBoolean();;
        var _loc2_ = 0;
        while (_loc2_ < 2) {
            this.fightTeams[_loc2_] = new FightTeamLightInformations();
            this.fightTeams[_loc2_].deserialize(buffer);
            _loc2_++;
        }
        var _loc3_ = 0;
        while (_loc3_ < 2) {
            this.fightTeamsOptions[_loc3_] = new FightOptionsInformations();
            this.fightTeamsOptions[_loc3_].deserialize(buffer);
            _loc3_++;
        }
    }
};
module.exports.FightExternalInformations = FightExternalInformations;
module.exports.types[117] = FightExternalInformations;

class FightLoot extends ProtocolType {
    constructor(objects, kamas) {
        super();
        this.objects = objects;
        this.kamas = kamas;
        this.messageId = 41;
    }

    serialize() {
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            if (this.objects[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.objects[_loc2_] + ") on element 1 (starting at 1) of objects.");
            }
            this.buffer.writeVarShort(this.objects[_loc2_]);
            _loc2_++;
        }
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        this.buffer.writeVarLong(this.kamas);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of objects.");
            }
            this.objects.push(_loc4_);
            _loc3_++;
        }
        this._kamasFunc(buffer);
    }
};
module.exports.FightLoot = FightLoot;
module.exports.types[41] = FightLoot;

class FightOptionsInformations extends ProtocolType {
    constructor(isSecret, isRestrictedToPartyOnly, isClosed, isAskingForHelp) {
        super();
        this.isSecret = isSecret;
        this.isRestrictedToPartyOnly = isRestrictedToPartyOnly;
        this.isClosed = isClosed;
        this.isAskingForHelp = isAskingForHelp;
        this.messageId = 20;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.isSecret);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.isRestrictedToPartyOnly);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.isClosed);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.isAskingForHelp);
        this.buffer.writeByte(_loc2_);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
    }
};
module.exports.FightOptionsInformations = FightOptionsInformations;
module.exports.types[20] = FightOptionsInformations;

class FightResultAdditionalData extends ProtocolType {
    constructor() {
        super();
        this.messageId = 191;
    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.FightResultAdditionalData = FightResultAdditionalData;
module.exports.types[191] = FightResultAdditionalData;

class FightResultExperienceData extends FightResultAdditionalData {
    constructor(experience, showExperience, experienceLevelFloor, showExperienceLevelFloor, experienceNextLevelFloor, showExperienceNextLevelFloor, experienceFightDelta, showExperienceFightDelta, experienceForGuild, showExperienceForGuild, experienceForMount, showExperienceForMount, isIncarnationExperience, rerollExperienceMul) {
        super();
        this.experience = experience;
        this.showExperience = showExperience;
        this.experienceLevelFloor = experienceLevelFloor;
        this.showExperienceLevelFloor = showExperienceLevelFloor;
        this.experienceNextLevelFloor = experienceNextLevelFloor;
        this.showExperienceNextLevelFloor = showExperienceNextLevelFloor;
        this.experienceFightDelta = experienceFightDelta;
        this.showExperienceFightDelta = showExperienceFightDelta;
        this.experienceForGuild = experienceForGuild;
        this.showExperienceForGuild = showExperienceForGuild;
        this.experienceForMount = experienceForMount;
        this.showExperienceForMount = showExperienceForMount;
        this.isIncarnationExperience = isIncarnationExperience;
        this.rerollExperienceMul = rerollExperienceMul;
        this.messageId = 192;
    }

    serialize() {
        super.serialize();
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.showExperience);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.showExperienceLevelFloor);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.showExperienceNextLevelFloor);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.showExperienceFightDelta);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 4, this.showExperienceForGuild);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 5, this.showExperienceForMount);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 6, this.isIncarnationExperience);
        this.buffer.writeByte(_loc2_);
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element experience.");
        }
        this.buffer.writeVarLong(this.experience);
        if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element experienceLevelFloor.");
        }
        this.buffer.writeVarLong(this.experienceLevelFloor);
        if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element experienceNextLevelFloor.");
        }
        this.buffer.writeVarLong(this.experienceNextLevelFloor);
        if (this.experienceFightDelta < 0 || this.experienceFightDelta > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceFightDelta + ") on element experienceFightDelta.");
        }
        this.buffer.writeVarLong(this.experienceFightDelta);
        if (this.experienceForGuild < 0 || this.experienceForGuild > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceForGuild + ") on element experienceForGuild.");
        }
        this.buffer.writeVarLong(this.experienceForGuild);
        if (this.experienceForMount < 0 || this.experienceForMount > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceForMount + ") on element experienceForMount.");
        }
        this.buffer.writeVarLong(this.experienceForMount);
        if (this.rerollExperienceMul < 0) {
            throw new Error("Forbidden value (" + this.rerollExperienceMul + ") on element rerollExperienceMul.");
        }
        this.buffer.writeByte(this.rerollExperienceMul);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.deserializeByteBoxes(buffer);
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element of FightResultExperienceData.experience.");
        }
        this.experienceLevelFloor = buffer.readVarUhLong();
        if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element of FightResultExperienceData.experienceLevelFloor.");
        };
        this.experienceNextLevelFloor = buffer.readVarUhLong();
        if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element of FightResultExperienceData.experienceNextLevelFloor.");
        };
        this.experienceFightDelta = buffer.readVarUhLong();
        if (this.experienceFightDelta < 0 || this.experienceFightDelta > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceFightDelta + ") on element of FightResultExperienceData.experienceFightDelta.");
        };
        this.experienceForGuild = buffer.readVarUhLong();
        if (this.experienceForGuild < 0 || this.experienceForGuild > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceForGuild + ") on element of FightResultExperienceData.experienceForGuild.");
        };
        this.experienceForMount = buffer.readVarUhLong();
        if (this.experienceForMount < 0 || this.experienceForMount > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceForMount + ") on element of FightResultExperienceData.experienceForMount.");
        };
        this.rerollExperienceMul = buffer.readByte();
        if (this.rerollExperienceMul < 0) {
            throw new Error("Forbidden value (" + this.rerollExperienceMul + ") on element of FightResultExperienceData.rerollExperienceMul.");
        };
    }
};
module.exports.FightResultExperienceData = FightResultExperienceData;
module.exports.types[192] = FightResultExperienceData;

class FightResultListEntry extends ProtocolType {
    constructor(outcome, wave, rewards) {
        super();
        this.outcome = outcome;
        this.wave = wave;
        this.rewards = rewards;
        this.messageId = 16;
    }

    serialize() {
        this.buffer.writeVarShort(this.outcome);
        if (this.wave < 0) {
            throw new Error("Forbidden value (" + this.wave + ") on element wave.");
        }
        this.buffer.writeByte(this.wave);
        this.rewards.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.outcome = buffer.readVarUhShort();
        if (this.outcome < 0) {
            throw new Error("Forbidden value (" + this.outcome + ") on element of FightResultListEntry.outcome.");
        }
        this.wave = buffer.readByte();
        if (this.wave < 0) {
            throw new Error("Forbidden value (" + this.wave + ") on element of FightResultListEntry.wave.");
        };
        this.rewards = new FightLoot();
        this.rewards.deserialize(buffer);
    }
};
module.exports.FightResultListEntry = FightResultListEntry;
module.exports.types[16] = FightResultListEntry;

class FightResultFighterListEntry extends FightResultListEntry {
    constructor(outcome, wave, rewards, id, alive) {
        super(outcome, wave, rewards);
        this.id = id;
        this.alive = alive;
        this.messageId = 189;
    }

    serialize() {
        super.serialize();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        this.buffer.writeBoolean(this.alive);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of FightResultFighterListEntry.id.");
        }
        this.alive = buffer.readBoolean();
    }
};
module.exports.FightResultFighterListEntry = FightResultFighterListEntry;
module.exports.types[189] = FightResultFighterListEntry;

class FightResultMutantListEntry extends FightResultFighterListEntry {
    constructor(outcome, wave, rewards, id, alive, level) {
        super(outcome, wave, rewards, id, alive);
        this.level = level;
        this.messageId = 216;
    }

    serialize() {
        super.serialize();
        if (this.level < 0) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeVarShort(this.level);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.level = buffer.readVarUhShort();
        if (this.level < 0) {
            throw new Error("Forbidden value (" + this.level + ") on element of FightResultMutantListEntry.level.");
        }
    }
};
module.exports.FightResultMutantListEntry = FightResultMutantListEntry;
module.exports.types[216] = FightResultMutantListEntry;

class FightResultPlayerListEntry extends FightResultFighterListEntry {
    constructor(outcome, wave, rewards, id, alive, level, additional) {
        super(outcome, wave, rewards, id, alive);
        this.level = level;
        this.additional = additional;
        this.messageId = 24;
    }

    serialize() {
        super.serialize();
        if (this.level < 1 || this.level > 206) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
        this.buffer.writeShort(this.additional.length);
        var _loc2_ = 0;
        while (_loc2_ < this.additional.length) {
            this.buffer.writeShort((this.additional[_loc2_]).getTypeId());
            (this.additional[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.level = buffer.readUnsignedByte();
        if (this.level < 1 || this.level > 206) {
            throw new Error("Forbidden value (" + this.level + ") on element of FightResultPlayerListEntry.level.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(FightResultAdditionalData, _loc4_);
            _loc5_.deserialize(buffer);
            this.additional.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.FightResultPlayerListEntry = FightResultPlayerListEntry;
module.exports.types[24] = FightResultPlayerListEntry;

class FightResultPvpData extends FightResultAdditionalData {
    constructor(grade, minHonorForGrade, maxHonorForGrade, honor, honorDelta) {
        super();
        this.grade = grade;
        this.minHonorForGrade = minHonorForGrade;
        this.maxHonorForGrade = maxHonorForGrade;
        this.honor = honor;
        this.honorDelta = honorDelta;
        this.messageId = 190;
    }

    serialize() {
        super.serialize();
        if (this.grade < 0 || this.grade > 255) {
            throw new Error("Forbidden value (" + this.grade + ") on element grade.");
        }
        this.buffer.writeByte(this.grade);
        if (this.minHonorForGrade < 0 || this.minHonorForGrade > 20000) {
            throw new Error("Forbidden value (" + this.minHonorForGrade + ") on element minHonorForGrade.");
        }
        this.buffer.writeVarShort(this.minHonorForGrade);
        if (this.maxHonorForGrade < 0 || this.maxHonorForGrade > 20000) {
            throw new Error("Forbidden value (" + this.maxHonorForGrade + ") on element maxHonorForGrade.");
        }
        this.buffer.writeVarShort(this.maxHonorForGrade);
        if (this.honor < 0 || this.honor > 20000) {
            throw new Error("Forbidden value (" + this.honor + ") on element honor.");
        }
        this.buffer.writeVarShort(this.honor);
        this.buffer.writeVarShort(this.honorDelta);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.grade = buffer.readUnsignedByte();
        if (this.grade < 0 || this.grade > 255) {
            throw new Error("Forbidden value (" + this.grade + ") on element of FightResultPvpData.grade.");
        }
        this.minHonorForGrade = buffer.readVarUhShort();
        if (this.minHonorForGrade < 0 || this.minHonorForGrade > 20000) {
            throw new Error("Forbidden value (" + this.minHonorForGrade + ") on element of FightResultPvpData.minHonorForGrade.");
        };
        this.maxHonorForGrade = buffer.readVarUhShort();
        if (this.maxHonorForGrade < 0 || this.maxHonorForGrade > 20000) {
            throw new Error("Forbidden value (" + this.maxHonorForGrade + ") on element of FightResultPvpData.maxHonorForGrade.");
        };
        this.honor = buffer.readVarUhShort();
        if (this.honor < 0 || this.honor > 20000) {
            throw new Error("Forbidden value (" + this.honor + ") on element of FightResultPvpData.honor.");
        };
        this.honorDelta = buffer.readVarShort();
    }
};
module.exports.FightResultPvpData = FightResultPvpData;
module.exports.types[190] = FightResultPvpData;

class FightResultTaxCollectorListEntry extends FightResultFighterListEntry {
    constructor(outcome, wave, rewards, id, alive, level, guildInfo, experienceForGuild) {
        super(outcome, wave, rewards, id, alive);
        this.level = level;
        this.guildInfo = guildInfo;
        this.experienceForGuild = experienceForGuild;
        this.messageId = 84;
    }

    serialize() {
        super.serialize();
        if (this.level < 1 || this.level > 200) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
        this.guildInfo.serialize(this.buffer);
        this.buffer.writeInt(this.experienceForGuild);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.level = buffer.readUnsignedByte();
        if (this.level < 1 || this.level > 200) {
            throw new Error("Forbidden value (" + this.level + ") on element of FightResultTaxCollectorListEntry.level.");
        }
        this.guildInfo = new BasicGuildInformations();
        this.guildInfo.deserialize(buffer);
        this.experienceForGuild = buffer.readInt();
    }
};
module.exports.FightResultTaxCollectorListEntry = FightResultTaxCollectorListEntry;
module.exports.types[84] = FightResultTaxCollectorListEntry;

class FightStartingPositions extends ProtocolType {
    constructor(positionsForChallengers, positionsForDefenders) {
        super();
        this.positionsForChallengers = positionsForChallengers;
        this.positionsForDefenders = positionsForDefenders;
        this.messageId = 513;
    }

    serialize() {
        this.buffer.writeShort(this.positionsForChallengers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.positionsForChallengers.length) {
            if (this.positionsForChallengers[_loc2_] < 0 || this.positionsForChallengers[_loc2_] > 559) {
                throw new Error("Forbidden value (" + this.positionsForChallengers[_loc2_] + ") on element 1 (starting at 1) of positionsForChallengers.");
            }
            this.buffer.writeVarShort(this.positionsForChallengers[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.positionsForDefenders.length);
        var _loc3_ = 0;
        while (_loc3_ < this.positionsForDefenders.length) {
            if (this.positionsForDefenders[_loc3_] < 0 || this.positionsForDefenders[_loc3_] > 559) {
                throw new Error("Forbidden value (" + this.positionsForDefenders[_loc3_] + ") on element 2 (starting at 1) of positionsForDefenders.");
            }
            this.buffer.writeVarShort(this.positionsForDefenders[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0 || _loc6_ > 559) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of positionsForChallengers.");
            }
            this.positionsForChallengers.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0 || _loc7_ > 559) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of positionsForDefenders.");
            }
            this.positionsForDefenders.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.FightStartingPositions = FightStartingPositions;
module.exports.types[513] = FightStartingPositions;

class FightTeamLightInformations extends AbstractFightTeamInformations {
    constructor(teamId, leaderId, teamSide, teamTypeId, nbWaves, teamMembersCount, meanLevel, hasFriend, hasGuildMember, hasAllianceMember, hasGroupMember, hasMyTaxCollector) {
        super(teamId, leaderId, teamSide, teamTypeId, nbWaves);
        this.teamMembersCount = teamMembersCount;
        this.meanLevel = meanLevel;
        this.hasFriend = hasFriend;
        this.hasGuildMember = hasGuildMember;
        this.hasAllianceMember = hasAllianceMember;
        this.hasGroupMember = hasGroupMember;
        this.hasMyTaxCollector = hasMyTaxCollector;
        this.messageId = 115;
    }

    serialize() {
        super.serialize();
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.hasFriend);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.hasGuildMember);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.hasAllianceMember);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.hasGroupMember);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 4, this.hasMyTaxCollector);
        this.buffer.writeByte(_loc2_);
        if (this.teamMembersCount < 0) {
            throw new Error("Forbidden value (" + this.teamMembersCount + ") on element teamMembersCount.");
        }
        this.buffer.writeByte(this.teamMembersCount);
        if (this.meanLevel < 0) {
            throw new Error("Forbidden value (" + this.meanLevel + ") on element meanLevel.");
        }
        this.buffer.writeVarInt(this.meanLevel);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.deserializeByteBoxes(buffer);
        this.teamMembersCount = buffer.readByte();
        if (this.teamMembersCount < 0) {
            throw new Error("Forbidden value (" + this.teamMembersCount + ") on element of FightTeamLightInformations.teamMembersCount.");
        }
        this.meanLevel = buffer.readVarUhInt();
        if (this.meanLevel < 0) {
            throw new Error("Forbidden value (" + this.meanLevel + ") on element of FightTeamLightInformations.meanLevel.");
        };
    }
};
module.exports.FightTeamLightInformations = FightTeamLightInformations;
module.exports.types[115] = FightTeamLightInformations;

class FightTeamMemberInformations extends ProtocolType {
    constructor(id) {
        super();
        this.id = id;
        this.messageId = 44;
    }

    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of FightTeamMemberInformations.id.");
        }
    }
};
module.exports.FightTeamMemberInformations = FightTeamMemberInformations;
module.exports.types[44] = FightTeamMemberInformations;

class FightTeamMemberCharacterInformations extends FightTeamMemberInformations {
    constructor(id, name, level) {
        super(id);
        this.name = name;
        this.level = level;
        this.messageId = 13;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.name);
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element of FightTeamMemberCharacterInformations.level.");
        }
    }
};
module.exports.FightTeamMemberCharacterInformations = FightTeamMemberCharacterInformations;
module.exports.types[13] = FightTeamMemberCharacterInformations;

class FightTeamMemberCompanionInformations extends FightTeamMemberInformations {
    constructor(id, companionId, level, masterId) {
        super(id);
        this.companionId = companionId;
        this.level = level;
        this.masterId = masterId;
        this.messageId = 451;
    }

    serialize() {
        super.serialize();
        if (this.companionId < 0) {
            throw new Error("Forbidden value (" + this.companionId + ") on element companionId.");
        }
        this.buffer.writeByte(this.companionId);
        if (this.level < 1 || this.level > 200) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
        }
        this.buffer.writeDouble(this.masterId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.companionId = buffer.readByte();
        if (this.companionId < 0) {
            throw new Error("Forbidden value (" + this.companionId + ") on element of FightTeamMemberCompanionInformations.companionId.");
        }
        this.level = buffer.readUnsignedByte();
        if (this.level < 1 || this.level > 200) {
            throw new Error("Forbidden value (" + this.level + ") on element of FightTeamMemberCompanionInformations.level.");
        };
        this.masterId = buffer.readDouble();
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.masterId + ") on element of FightTeamMemberCompanionInformations.masterId.");
        };
    }
};
module.exports.FightTeamMemberCompanionInformations = FightTeamMemberCompanionInformations;
module.exports.types[451] = FightTeamMemberCompanionInformations;

class FightTeamMemberMonsterInformations extends FightTeamMemberInformations {
    constructor(id, monsterId, grade) {
        super(id);
        this.monsterId = monsterId;
        this.grade = grade;
        this.messageId = 6;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.monsterId);
        if (this.grade < 0) {
            throw new Error("Forbidden value (" + this.grade + ") on element grade.");
        }
        this.buffer.writeByte(this.grade);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.monsterId = buffer.readInt();
        this.grade = buffer.readByte();
        if (this.grade < 0) {
            throw new Error("Forbidden value (" + this.grade + ") on element of FightTeamMemberMonsterInformations.grade.");
        }
    }
};
module.exports.FightTeamMemberMonsterInformations = FightTeamMemberMonsterInformations;
module.exports.types[6] = FightTeamMemberMonsterInformations;

class FightTeamMemberTaxCollectorInformations extends FightTeamMemberInformations {
    constructor(id, firstNameId, lastNameId, level, guildId, uid) {
        super(id);
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.level = level;
        this.guildId = guildId;
        this.uid = uid;
        this.messageId = 177;
    }

    serialize() {
        super.serialize();
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        this.buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        this.buffer.writeVarShort(this.lastNameId);
        if (this.level < 1 || this.level > 200) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element uid.");
        }
        this.buffer.writeVarInt(this.uid);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element of FightTeamMemberTaxCollectorInformations.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element of FightTeamMemberTaxCollectorInformations.lastNameId.");
        };
        this.level = buffer.readUnsignedByte();
        if (this.level < 1 || this.level > 200) {
            throw new Error("Forbidden value (" + this.level + ") on element of FightTeamMemberTaxCollectorInformations.level.");
        };
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element of FightTeamMemberTaxCollectorInformations.guildId.");
        };
        this.uid = buffer.readVarUhInt();
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element of FightTeamMemberTaxCollectorInformations.uid.");
        };
    }
};
module.exports.FightTeamMemberTaxCollectorInformations = FightTeamMemberTaxCollectorInformations;
module.exports.types[177] = FightTeamMemberTaxCollectorInformations;

class FightTeamMemberWithAllianceCharacterInformations extends FightTeamMemberCharacterInformations {
    constructor(id, name, level, allianceInfos) {
        super(id, name, level);
        this.allianceInfos = allianceInfos;
        this.messageId = 426;
    }

    serialize() {
        super.serialize();
        this.allianceInfos.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceInfos = new BasicAllianceInformations();
        this.allianceInfos.deserialize(buffer);
    }
};
module.exports.FightTeamMemberWithAllianceCharacterInformations = FightTeamMemberWithAllianceCharacterInformations;
module.exports.types[426] = FightTeamMemberWithAllianceCharacterInformations;

class GameContextActorInformations extends ProtocolType {
    constructor(contextualId, look, disposition) {
        super();
        this.contextualId = contextualId;
        this.look = look;
        this.disposition = disposition;
        this.messageId = 150;
    }

    serialize() {
        if (this.contextualId < -9007199254740990 || this.contextualId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.contextualId + ") on element contextualId.");
        }
        this.buffer.writeDouble(this.contextualId);
        this.look.serialize(this.buffer);
        this.buffer.writeShort(this.disposition.getTypeId());
        this.disposition.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.contextualId = buffer.readDouble();
        if (this.contextualId < -9007199254740990 || this.contextualId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.contextualId + ") on element of GameContextActorInformations.contextualId.");
        }
        this.look = new EntityLook();
        this.look.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.disposition = ProtocolTypeManager.getInstance(EntityDispositionInformations, _loc2_);
        this.disposition.deserialize(buffer);
    }
};
module.exports.GameContextActorInformations = GameContextActorInformations;
module.exports.types[150] = GameContextActorInformations;

class GameFightFighterInformations extends GameContextActorInformations {
    constructor(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions) {
        super(contextualId, look, disposition);
        this.teamId = teamId;
        this.wave = wave;
        this.alive = alive;
        this.stats = stats;
        this.previousPositions = previousPositions;
        this.messageId = 143;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.teamId);
        if (this.wave < 0) {
            throw new Error("Forbidden value (" + this.wave + ") on element wave.");
        }
        this.buffer.writeByte(this.wave);
        this.buffer.writeBoolean(this.alive);
        this.buffer.writeShort(this.stats.getTypeId());
        this.stats.serialize(this.buffer);
        this.buffer.writeShort(this.previousPositions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.previousPositions.length) {
            if (this.previousPositions[_loc2_] < 0 || this.previousPositions[_loc2_] > 559) {
                throw new Error("Forbidden value (" + this.previousPositions[_loc2_] + ") on element 5 (starting at 1) of previousPositions.");
            }
            this.buffer.writeVarShort(this.previousPositions[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc5_ = 0;
        super.deserialize(buffer);
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            throw new Error("Forbidden value (" + this.teamId + ") on element of GameFightFighterInformations.teamId.");
        }
        this.wave = buffer.readByte();
        if (this.wave < 0) {
            throw new Error("Forbidden value (" + this.wave + ") on element of GameFightFighterInformations.wave.");
        };
        this.alive = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        this.stats = ProtocolTypeManager.getInstance(GameFightMinimalStats, _loc2_);
        this.stats.deserialize(buffer);
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = buffer.readVarUhShort();
            if (_loc5_ < 0 || _loc5_ > 559) {
                throw new Error("Forbidden value (" + _loc5_ + ") on elements of previousPositions.");
            }
            this.previousPositions.push(_loc5_);
            _loc4_++;
        }
    }
};
module.exports.GameFightFighterInformations = GameFightFighterInformations;
module.exports.types[143] = GameFightFighterInformations;

class GameFightAIInformations extends GameFightFighterInformations {
    constructor(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions) {
        super(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions);
        this.messageId = 151;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GameFightAIInformations = GameFightAIInformations;
module.exports.types[151] = GameFightAIInformations;

class GameFightFighterNamedInformations extends GameFightFighterInformations {
    constructor(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions, name, status) {
        super(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions);
        this.name = name;
        this.status = status;
        this.messageId = 158;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.name);
        this.status.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
        this.status = new PlayerStatus();
        this.status.deserialize(buffer);
    }
};
module.exports.GameFightFighterNamedInformations = GameFightFighterNamedInformations;
module.exports.types[158] = GameFightFighterNamedInformations;

class GameFightCharacterInformations extends GameFightFighterNamedInformations {
    constructor(param1, param2, param3, teamId, wave, alive, stats, previousPositions, name, status, level, alignmentInfos, breed, sex) {
        super(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions, name, status);
        this.level = level;
        this.alignmentInfos = alignmentInfos;
        this.breed = breed;
        this.sex = sex;
        this.messageId = 46;
    }

    serialize() {
        super.serialize();
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
        this.alignmentInfos.serialize(this.buffer);
        this.buffer.writeByte(this.breed);
        this.buffer.writeBoolean(this.sex);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element of GameFightCharacterInformations.level.");
        }
        this.alignmentInfos = new ActorAlignmentInformations();
        this.alignmentInfos.deserialize(buffer);
        this.breed = buffer.readByte();
        this.sex = buffer.readBoolean();;
    }
};
module.exports.GameFightCharacterInformations = GameFightCharacterInformations;
module.exports.types[46] = GameFightCharacterInformations;

class GameFightCompanionInformations extends GameFightFighterInformations {
    constructor(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions, companionGenericId, level, masterId) {
        super(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions);
        this.companionGenericId = companionGenericId;
        this.level = level;
        this.masterId = masterId;
        this.messageId = 450;
    }

    serialize() {
        super.serialize();
        if (this.companionGenericId < 0) {
            throw new Error("Forbidden value (" + this.companionGenericId + ") on element companionGenericId.");
        }
        this.buffer.writeByte(this.companionGenericId);
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
        }
        this.buffer.writeDouble(this.masterId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.companionGenericId = buffer.readByte();
        if (this.companionGenericId < 0) {
            throw new Error("Forbidden value (" + this.companionGenericId + ") on element of GameFightCompanionInformations.companionGenericId.");
        }
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element of GameFightCompanionInformations.level.");
        };
        this.masterId = buffer.readDouble();
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.masterId + ") on element of GameFightCompanionInformations.masterId.");
        };
    }
};
module.exports.GameFightCompanionInformations = GameFightCompanionInformations;
module.exports.types[450] = GameFightCompanionInformations;

class GameFightFighterLightInformations extends ProtocolType {
    constructor(id, wave, level, breed, sex, alive) {
        super();
        this.id = id;
        this.wave = wave;
        this.level = level;
        this.breed = breed;
        this.sex = sex;
        this.alive = alive;
        this.messageId = 413;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.sex);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.alive);
        this.buffer.writeByte(_loc2_);
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        if (this.wave < 0) {
            throw new Error("Forbidden value (" + this.wave + ") on element wave.");
        }
        this.buffer.writeByte(this.wave);
        if (this.level < 0) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeVarShort(this.level);
        this.buffer.writeByte(this.breed);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of GameFightFighterLightInformations.id.");
        }
        this.wave = buffer.readByte();
        if (this.wave < 0) {
            throw new Error("Forbidden value (" + this.wave + ") on element of GameFightFighterLightInformations.wave.");
        };
        this.level = buffer.readVarUhShort();
        if (this.level < 0) {
            throw new Error("Forbidden value (" + this.level + ") on element of GameFightFighterLightInformations.level.");
        };
        this.breed = buffer.readByte();
    }
};
module.exports.GameFightFighterLightInformations = GameFightFighterLightInformations;
module.exports.types[413] = GameFightFighterLightInformations;

class GameFightFighterCompanionLightInformations extends GameFightFighterLightInformations {
    constructor(id, wave, level, breed, sex, alive, companionId, masterId) {
        super(id, wave, level, breed, sex, alive);
        this.companionId = companionId;
        this.masterId = masterId;
        this.messageId = 454;
    }

    serialize() {
        super.serialize();
        if (this.companionId < 0) {
            throw new Error("Forbidden value (" + this.companionId + ") on element companionId.");
        }
        this.buffer.writeByte(this.companionId);
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
        }
        this.buffer.writeDouble(this.masterId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.companionId = buffer.readByte();
        if (this.companionId < 0) {
            throw new Error("Forbidden value (" + this.companionId + ") on element of GameFightFighterCompanionLightInformations.companionId.");
        }
        this.masterId = buffer.readDouble();
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.masterId + ") on element of GameFightFighterCompanionLightInformations.masterId.");
        };
    }
};
module.exports.GameFightFighterCompanionLightInformations = GameFightFighterCompanionLightInformations;
module.exports.types[454] = GameFightFighterCompanionLightInformations;

class GameFightFighterMonsterLightInformations extends GameFightFighterLightInformations {
    constructor(id, wave, level, breed, sex, alive, creatureGenericId) {
        super(id, wave, level, breed, sex, alive);
        this.creatureGenericId = creatureGenericId;
        this.messageId = 455;
    }

    serialize() {
        super.serialize();
        if (this.creatureGenericId < 0) {
            throw new Error("Forbidden value (" + this.creatureGenericId + ") on element creatureGenericId.");
        }
        this.buffer.writeVarShort(this.creatureGenericId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.creatureGenericId = buffer.readVarUhShort();
        if (this.creatureGenericId < 0) {
            throw new Error("Forbidden value (" + this.creatureGenericId + ") on element of GameFightFighterMonsterLightInformations.creatureGenericId.");
        }
    }
};
module.exports.GameFightFighterMonsterLightInformations = GameFightFighterMonsterLightInformations;
module.exports.types[455] = GameFightFighterMonsterLightInformations;

class GameFightFighterNamedLightInformations extends GameFightFighterLightInformations {
    constructor(id, wave, level, breed, sex, alive, name) {
        super(id, wave, level, breed, sex, alive);
        this.name = name;
        this.messageId = 456;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.name);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
    }
};
module.exports.GameFightFighterNamedLightInformations = GameFightFighterNamedLightInformations;
module.exports.types[456] = GameFightFighterNamedLightInformations;

class GameFightFighterTaxCollectorLightInformations extends GameFightFighterLightInformations {
    constructor(id, wave, level, breed, sex, alive, firstNameId, lastNameId) {
        super(id, wave, level, breed, sex, alive);
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.messageId = 457;
    }

    serialize() {
        super.serialize();
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        this.buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        this.buffer.writeVarShort(this.lastNameId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element of GameFightFighterTaxCollectorLightInformations.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element of GameFightFighterTaxCollectorLightInformations.lastNameId.");
        };
    }
};
module.exports.GameFightFighterTaxCollectorLightInformations = GameFightFighterTaxCollectorLightInformations;
module.exports.types[457] = GameFightFighterTaxCollectorLightInformations;

class GameFightMinimalStats extends ProtocolType {
    constructor(lifePoints, maxLifePoints, baseMaxLifePoints, permanentDamagePercent, shieldPoints, actionPoints, maxActionPoints, movementPoints, maxMovementPoints, summoner, summoned, neutralElementResistPercent, earthElementResistPercent, waterElementResistPercent, airElementResistPercent, fireElementResistPercent, neutralElementReduction, earthElementReduction, waterElementReduction, airElementReduction, fireElementReduction, criticalDamageFixedResist, pushDamageFixedResist, pvpNeutralElementResistPercent, pvpEarthElementResistPercent, pvpWaterElementResistPercent, pvpAirElementResistPercent, pvpFireElementResistPercent, pvpNeutralElementReduction, pvpEarthElementReduction, pvpWaterElementReduction, pvpAirElementReduction, pvpFireElementReduction, dodgePALostProbability, dodgePMLostProbability, tackleBlock, tackleEvade, fixedDamageReflection, invisibilityState, meleeDamageReceivedPercent, rangedDamageReceivedPercent, weaponDamageReceivedPercent, spellDamageReceivedPercent) {
        super();
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
        this.baseMaxLifePoints = baseMaxLifePoints;
        this.permanentDamagePercent = permanentDamagePercent;
        this.shieldPoints = shieldPoints;
        this.actionPoints = actionPoints;
        this.maxActionPoints = maxActionPoints;
        this.movementPoints = movementPoints;
        this.maxMovementPoints = maxMovementPoints;
        this.summoner = summoner;
        this.summoned = summoned;
        this.neutralElementResistPercent = neutralElementResistPercent;
        this.earthElementResistPercent = earthElementResistPercent;
        this.waterElementResistPercent = waterElementResistPercent;
        this.airElementResistPercent = airElementResistPercent;
        this.fireElementResistPercent = fireElementResistPercent;
        this.neutralElementReduction = neutralElementReduction;
        this.earthElementReduction = earthElementReduction;
        this.waterElementReduction = waterElementReduction;
        this.airElementReduction = airElementReduction;
        this.fireElementReduction = fireElementReduction;
        this.criticalDamageFixedResist = criticalDamageFixedResist;
        this.pushDamageFixedResist = pushDamageFixedResist;
        this.pvpNeutralElementResistPercent = pvpNeutralElementResistPercent;
        this.pvpEarthElementResistPercent = pvpEarthElementResistPercent;
        this.pvpWaterElementResistPercent = pvpWaterElementResistPercent;
        this.pvpAirElementResistPercent = pvpAirElementResistPercent;
        this.pvpFireElementResistPercent = pvpFireElementResistPercent;
        this.pvpNeutralElementReduction = pvpNeutralElementReduction;
        this.pvpEarthElementReduction = pvpEarthElementReduction;
        this.pvpWaterElementReduction = pvpWaterElementReduction;
        this.pvpAirElementReduction = pvpAirElementReduction;
        this.pvpFireElementReduction = pvpFireElementReduction;
        this.dodgePALostProbability = dodgePALostProbability;
        this.dodgePMLostProbability = dodgePMLostProbability;
        this.tackleBlock = tackleBlock;
        this.tackleEvade = tackleEvade;
        this.fixedDamageReflection = fixedDamageReflection;
        this.invisibilityState = invisibilityState;
        this.meleeDamageReceivedPercent = meleeDamageReceivedPercent;
        this.rangedDamageReceivedPercent = rangedDamageReceivedPercent;
        this.weaponDamageReceivedPercent = weaponDamageReceivedPercent;
        this.spellDamageReceivedPercent = spellDamageReceivedPercent;
        this.messageId = 31;
    }

    serialize() {
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        this.buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        this.buffer.writeVarInt(this.maxLifePoints);
        if (this.baseMaxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.baseMaxLifePoints + ") on element baseMaxLifePoints.");
        }
        this.buffer.writeVarInt(this.baseMaxLifePoints);
        if (this.permanentDamagePercent < 0) {
            throw new Error("Forbidden value (" + this.permanentDamagePercent + ") on element permanentDamagePercent.");
        }
        this.buffer.writeVarInt(this.permanentDamagePercent);
        if (this.shieldPoints < 0) {
            throw new Error("Forbidden value (" + this.shieldPoints + ") on element shieldPoints.");
        }
        this.buffer.writeVarInt(this.shieldPoints);
        this.buffer.writeVarShort(this.actionPoints);
        this.buffer.writeVarShort(this.maxActionPoints);
        this.buffer.writeVarShort(this.movementPoints);
        this.buffer.writeVarShort(this.maxMovementPoints);
        if (this.summoner < -9007199254740990 || this.summoner > 9007199254740990) {
            throw new Error("Forbidden value (" + this.summoner + ") on element summoner.");
        }
        this.buffer.writeDouble(this.summoner);
        this.buffer.writeBoolean(this.summoned);
        this.buffer.writeVarShort(this.neutralElementResistPercent);
        this.buffer.writeVarShort(this.earthElementResistPercent);
        this.buffer.writeVarShort(this.waterElementResistPercent);
        this.buffer.writeVarShort(this.airElementResistPercent);
        this.buffer.writeVarShort(this.fireElementResistPercent);
        this.buffer.writeVarShort(this.neutralElementReduction);
        this.buffer.writeVarShort(this.earthElementReduction);
        this.buffer.writeVarShort(this.waterElementReduction);
        this.buffer.writeVarShort(this.airElementReduction);
        this.buffer.writeVarShort(this.fireElementReduction);
        this.buffer.writeVarShort(this.criticalDamageFixedResist);
        this.buffer.writeVarShort(this.pushDamageFixedResist);
        this.buffer.writeVarShort(this.pvpNeutralElementResistPercent);
        this.buffer.writeVarShort(this.pvpEarthElementResistPercent);
        this.buffer.writeVarShort(this.pvpWaterElementResistPercent);
        this.buffer.writeVarShort(this.pvpAirElementResistPercent);
        this.buffer.writeVarShort(this.pvpFireElementResistPercent);
        this.buffer.writeVarShort(this.pvpNeutralElementReduction);
        this.buffer.writeVarShort(this.pvpEarthElementReduction);
        this.buffer.writeVarShort(this.pvpWaterElementReduction);
        this.buffer.writeVarShort(this.pvpAirElementReduction);
        this.buffer.writeVarShort(this.pvpFireElementReduction);
        if (this.dodgePALostProbability < 0) {
            throw new Error("Forbidden value (" + this.dodgePALostProbability + ") on element dodgePALostProbability.");
        }
        this.buffer.writeVarShort(this.dodgePALostProbability);
        if (this.dodgePMLostProbability < 0) {
            throw new Error("Forbidden value (" + this.dodgePMLostProbability + ") on element dodgePMLostProbability.");
        }
        this.buffer.writeVarShort(this.dodgePMLostProbability);
        this.buffer.writeVarShort(this.tackleBlock);
        this.buffer.writeVarShort(this.tackleEvade);
        this.buffer.writeVarShort(this.fixedDamageReflection);
        this.buffer.writeByte(this.invisibilityState);
        if (this.meleeDamageReceivedPercent < 0) {
            throw new Error("Forbidden value (" + this.meleeDamageReceivedPercent + ") on element meleeDamageReceivedPercent.");
        }
        this.buffer.writeVarShort(this.meleeDamageReceivedPercent);
        if (this.rangedDamageReceivedPercent < 0) {
            throw new Error("Forbidden value (" + this.rangedDamageReceivedPercent + ") on element rangedDamageReceivedPercent.");
        }
        this.buffer.writeVarShort(this.rangedDamageReceivedPercent);
        if (this.weaponDamageReceivedPercent < 0) {
            throw new Error("Forbidden value (" + this.weaponDamageReceivedPercent + ") on element weaponDamageReceivedPercent.");
        }
        this.buffer.writeVarShort(this.weaponDamageReceivedPercent);
        if (this.spellDamageReceivedPercent < 0) {
            throw new Error("Forbidden value (" + this.spellDamageReceivedPercent + ") on element spellDamageReceivedPercent.");
        }
        this.buffer.writeVarShort(this.spellDamageReceivedPercent);
    }

    deserialize(buffer) {
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element of GameFightMinimalStats.lifePoints.");
        }
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of GameFightMinimalStats.maxLifePoints.");
        };
        this.baseMaxLifePoints = buffer.readVarUhInt();
        if (this.baseMaxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.baseMaxLifePoints + ") on element of GameFightMinimalStats.baseMaxLifePoints.");
        };
        this.permanentDamagePercent = buffer.readVarUhInt();
        if (this.permanentDamagePercent < 0) {
            throw new Error("Forbidden value (" + this.permanentDamagePercent + ") on element of GameFightMinimalStats.permanentDamagePercent.");
        };
        this.shieldPoints = buffer.readVarUhInt();
        if (this.shieldPoints < 0) {
            throw new Error("Forbidden value (" + this.shieldPoints + ") on element of GameFightMinimalStats.shieldPoints.");
        };
        this.actionPoints = buffer.readVarShort();
        this.maxActionPoints = buffer.readVarShort();;
        this.movementPoints = buffer.readVarShort();;
        this.maxMovementPoints = buffer.readVarShort();;
        this.summoner = buffer.readDouble();
        if (this.summoner < -9007199254740990 || this.summoner > 9007199254740990) {
            throw new Error("Forbidden value (" + this.summoner + ") on element of GameFightMinimalStats.summoner.");
        };
        this.summoned = buffer.readBoolean();;
        this.neutralElementResistPercent = buffer.readVarShort();;
        this.earthElementResistPercent = buffer.readVarShort();;
        this.waterElementResistPercent = buffer.readVarShort();;
        this.airElementResistPercent = buffer.readVarShort();;
        this.fireElementResistPercent = buffer.readVarShort();;
        this.neutralElementReduction = buffer.readVarShort();;
        this.earthElementReduction = buffer.readVarShort();;
        this.waterElementReduction = buffer.readVarShort();;
        this.airElementReduction = buffer.readVarShort();;
        this.fireElementReduction = buffer.readVarShort();;
        this.criticalDamageFixedResist = buffer.readVarShort();;
        this.pushDamageFixedResist = buffer.readVarShort();;
        this.pvpNeutralElementResistPercent = buffer.readVarShort();;
        this.pvpEarthElementResistPercent = buffer.readVarShort();;
        this.pvpWaterElementResistPercent = buffer.readVarShort();;
        this.pvpAirElementResistPercent = buffer.readVarShort();;
        this.pvpFireElementResistPercent = buffer.readVarShort();;
        this.pvpNeutralElementReduction = buffer.readVarShort();;
        this.pvpEarthElementReduction = buffer.readVarShort();;
        this.pvpWaterElementReduction = buffer.readVarShort();;
        this.pvpAirElementReduction = buffer.readVarShort();;
        this.pvpFireElementReduction = buffer.readVarShort();;
        this.dodgePALostProbability = buffer.readVarUhShort();
        if (this.dodgePALostProbability < 0) {
            throw new Error("Forbidden value (" + this.dodgePALostProbability + ") on element of GameFightMinimalStats.dodgePALostProbability.");
        };
        this.dodgePMLostProbability = buffer.readVarUhShort();
        if (this.dodgePMLostProbability < 0) {
            throw new Error("Forbidden value (" + this.dodgePMLostProbability + ") on element of GameFightMinimalStats.dodgePMLostProbability.");
        };
        this.tackleBlock = buffer.readVarShort();;
        this.tackleEvade = buffer.readVarShort();;
        this.fixedDamageReflection = buffer.readVarShort();;
        this.invisibilityState = buffer.readByte();
        if (this.invisibilityState < 0) {
            throw new Error("Forbidden value (" + this.invisibilityState + ") on element of GameFightMinimalStats.invisibilityState.");
        };
        this.meleeDamageReceivedPercent = buffer.readVarUhShort();
        if (this.meleeDamageReceivedPercent < 0) {
            throw new Error("Forbidden value (" + this.meleeDamageReceivedPercent + ") on element of GameFightMinimalStats.meleeDamageReceivedPercent.");
        };
        this.rangedDamageReceivedPercent = buffer.readVarUhShort();
        if (this.rangedDamageReceivedPercent < 0) {
            throw new Error("Forbidden value (" + this.rangedDamageReceivedPercent + ") on element of GameFightMinimalStats.rangedDamageReceivedPercent.");
        };
        this.weaponDamageReceivedPercent = buffer.readVarUhShort();
        if (this.weaponDamageReceivedPercent < 0) {
            throw new Error("Forbidden value (" + this.weaponDamageReceivedPercent + ") on element of GameFightMinimalStats.weaponDamageReceivedPercent.");
        };
        this.spellDamageReceivedPercent = buffer.readVarUhShort();
        if (this.spellDamageReceivedPercent < 0) {
            throw new Error("Forbidden value (" + this.spellDamageReceivedPercent + ") on element of GameFightMinimalStats.spellDamageReceivedPercent.");
        };
    }
};
module.exports.GameFightMinimalStats = GameFightMinimalStats;
module.exports.types[31] = GameFightMinimalStats;

class GameFightMinimalStatsPreparation extends GameFightMinimalStats {
    constructor(lifePoints, maxLifePoints, baseMaxLifePoints, permanentDamagePercent, shieldPoints, actionPoints, maxActionPoints, movementPoints, maxMovementPoints, summoner, summoned, neutralElementResistPercent, earthElementResistPercent, waterElementResistPercent, airElementResistPercent, fireElementResistPercent, neutralElementReduction, earthElementReduction, waterElementReduction, airElementReduction, fireElementReduction, criticalDamageFixedResist, pushDamageFixedResist, pvpNeutralElementResistPercent, pvpEarthElementResistPercent, pvpWaterElementResistPercent, pvpAirElementResistPercent, pvpFireElementResistPercent, pvpNeutralElementReduction, pvpEarthElementReduction, pvpWaterElementReduction, pvpAirElementReduction, pvpFireElementReduction, dodgePALostProbability, dodgePMLostProbability, tackleBlock, tackleEvade, fixedDamageReflection, invisibilityState, meleeDamageReceivedPercent, rangedDamageReceivedPercent, weaponDamageReceivedPercent, spellDamageReceivedPercent, initiative) {
        super(lifePoints, maxLifePoints, baseMaxLifePoints, permanentDamagePercent, shieldPoints, actionPoints, maxActionPoints, movementPoints, maxMovementPoints, summoner, summoned, neutralElementResistPercent, earthElementResistPercent, waterElementResistPercent, airElementResistPercent, fireElementResistPercent, neutralElementReduction, earthElementReduction, waterElementReduction, airElementReduction, fireElementReduction, criticalDamageFixedResist, pushDamageFixedResist, pvpNeutralElementResistPercent, pvpEarthElementResistPercent, pvpWaterElementResistPercent, pvpAirElementResistPercent, pvpFireElementResistPercent, pvpNeutralElementReduction, pvpEarthElementReduction, pvpWaterElementReduction, pvpAirElementReduction, pvpFireElementReduction, dodgePALostProbability, dodgePMLostProbability, tackleBlock, tackleEvade, fixedDamageReflection, invisibilityState, meleeDamageReceivedPercent, rangedDamageReceivedPercent, weaponDamageReceivedPercent, spellDamageReceivedPercent);
        this.initiative = initiative;
        this.messageId = 360;
    }

    serialize() {
        super.serialize();
        if (this.initiative < 0) {
            throw new Error("Forbidden value (" + this.initiative + ") on element initiative.");
        }
        this.buffer.writeVarInt(this.initiative);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.initiative = buffer.readVarUhInt();
        if (this.initiative < 0) {
            throw new Error("Forbidden value (" + this.initiative + ") on element of GameFightMinimalStatsPreparation.initiative.");
        }
    }
};
module.exports.GameFightMinimalStatsPreparation = GameFightMinimalStatsPreparation;
module.exports.types[360] = GameFightMinimalStatsPreparation;

class GameFightMonsterInformations extends GameFightAIInformations {
    constructor(param1, param2, param3, teamId, wave, alive, stats, previousPositions, creatureGenericId, creatureGrade) {
        super(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions);
        this.creatureGenericId = creatureGenericId;
        this.creatureGrade = creatureGrade;
        this.messageId = 29;
    }

    serialize() {
        super.serialize();
        if (this.creatureGenericId < 0) {
            throw new Error("Forbidden value (" + this.creatureGenericId + ") on element creatureGenericId.");
        }
        this.buffer.writeVarShort(this.creatureGenericId);
        if (this.creatureGrade < 0) {
            throw new Error("Forbidden value (" + this.creatureGrade + ") on element creatureGrade.");
        }
        this.buffer.writeByte(this.creatureGrade);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.creatureGenericId = buffer.readVarUhShort();
        if (this.creatureGenericId < 0) {
            throw new Error("Forbidden value (" + this.creatureGenericId + ") on element of GameFightMonsterInformations.creatureGenericId.");
        }
        this.creatureGrade = buffer.readByte();
        if (this.creatureGrade < 0) {
            throw new Error("Forbidden value (" + this.creatureGrade + ") on element of GameFightMonsterInformations.creatureGrade.");
        };
    }
};
module.exports.GameFightMonsterInformations = GameFightMonsterInformations;
module.exports.types[29] = GameFightMonsterInformations;

class GameFightMonsterWithAlignmentInformations extends GameFightMonsterInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, creatureGenericId, creatureGrade, alignmentInfos) {
        super(param1, param2, param3, teamId, wave, alive, stats, previousPositions, creatureGenericId, creatureGrade);
        this.alignmentInfos = alignmentInfos;
        this.messageId = 203;
    }

    serialize() {
        super.serialize();
        this.alignmentInfos.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.alignmentInfos = new ActorAlignmentInformations();
        this.alignmentInfos.deserialize(buffer);
    }
};
module.exports.GameFightMonsterWithAlignmentInformations = GameFightMonsterWithAlignmentInformations;
module.exports.types[203] = GameFightMonsterWithAlignmentInformations;

class GameFightMutantInformations extends GameFightFighterNamedInformations {
    constructor(param1, param2, param3, teamId, wave, alive, stats, previousPositions, name, status, powerLevel) {
        super(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions, name, status);
        this.powerLevel = powerLevel;
        this.messageId = 50;
    }

    serialize() {
        super.serialize();
        if (this.powerLevel < 0) {
            throw new Error("Forbidden value (" + this.powerLevel + ") on element powerLevel.");
        }
        this.buffer.writeByte(this.powerLevel);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.powerLevel = buffer.readByte();
        if (this.powerLevel < 0) {
            throw new Error("Forbidden value (" + this.powerLevel + ") on element of GameFightMutantInformations.powerLevel.");
        }
    }
};
module.exports.GameFightMutantInformations = GameFightMutantInformations;
module.exports.types[50] = GameFightMutantInformations;

class GameFightResumeSlaveInfo extends ProtocolType {
    constructor(slaveId, spellCooldowns, summonCount, bombCount) {
        super();
        this.slaveId = slaveId;
        this.spellCooldowns = spellCooldowns;
        this.summonCount = summonCount;
        this.bombCount = bombCount;
        this.messageId = 364;
    }

    serialize() {
        if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.slaveId + ") on element slaveId.");
        }
        this.buffer.writeDouble(this.slaveId);
        this.buffer.writeShort(this.spellCooldowns.length);
        var _loc2_ = 0;
        while (_loc2_ < this.spellCooldowns.length) {
            (this.spellCooldowns[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.summonCount < 0) {
            throw new Error("Forbidden value (" + this.summonCount + ") on element summonCount.");
        }
        this.buffer.writeByte(this.summonCount);
        if (this.bombCount < 0) {
            throw new Error("Forbidden value (" + this.bombCount + ") on element bombCount.");
        }
        this.buffer.writeByte(this.bombCount);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.slaveId = buffer.readDouble();
        if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.slaveId + ") on element of GameFightResumeSlaveInfo.slaveId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GameFightSpellCooldown();
            _loc4_.deserialize(buffer);
            this.spellCooldowns.push(_loc4_);
            _loc3_++;
        }
        this._summonCountFunc(buffer);
        this.bombCount = buffer.readByte();
        if (this.bombCount < 0) {
            throw new Error("Forbidden value (" + this.bombCount + ") on element of GameFightResumeSlaveInfo.bombCount.");
        };
    }
};
module.exports.GameFightResumeSlaveInfo = GameFightResumeSlaveInfo;
module.exports.types[364] = GameFightResumeSlaveInfo;

class GameFightSpellCooldown extends ProtocolType {
    constructor(spellId, cooldown) {
        super();
        this.spellId = spellId;
        this.cooldown = cooldown;
        this.messageId = 205;
    }

    serialize() {
        this.buffer.writeInt(this.spellId);
        if (this.cooldown < 0) {
            throw new Error("Forbidden value (" + this.cooldown + ") on element cooldown.");
        }
        this.buffer.writeByte(this.cooldown);
    }

    deserialize(buffer) {
        this.spellId = buffer.readInt();
        this.cooldown = buffer.readByte();
        if (this.cooldown < 0) {
            throw new Error("Forbidden value (" + this.cooldown + ") on element of GameFightSpellCooldown.cooldown.");
        }
    }
};
module.exports.GameFightSpellCooldown = GameFightSpellCooldown;
module.exports.types[205] = GameFightSpellCooldown;

class GameFightTaxCollectorInformations extends GameFightAIInformations {
    constructor(param1, param2, param3, teamId, wave, alive, stats, previousPositions, firstNameId, lastNameId, level) {
        super(contextualId, look, disposition, teamId, wave, alive, stats, previousPositions);
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.level = level;
        this.messageId = 48;
    }

    serialize() {
        super.serialize();
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        this.buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        this.buffer.writeVarShort(this.lastNameId);
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element of GameFightTaxCollectorInformations.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element of GameFightTaxCollectorInformations.lastNameId.");
        };
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element of GameFightTaxCollectorInformations.level.");
        };
    }
};
module.exports.GameFightTaxCollectorInformations = GameFightTaxCollectorInformations;
module.exports.types[48] = GameFightTaxCollectorInformations;

class FightEntityDispositionInformations extends EntityDispositionInformations {
    constructor(cellId, direction, carryingCharacterId) {
        super(cellId, direction);
        this.carryingCharacterId = carryingCharacterId;
        this.messageId = 217;
    }

    serialize() {
        super.serialize();
        if (this.carryingCharacterId < -9007199254740990 || this.carryingCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.carryingCharacterId + ") on element carryingCharacterId.");
        }
        this.buffer.writeDouble(this.carryingCharacterId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.carryingCharacterId = buffer.readDouble();
        if (this.carryingCharacterId < -9007199254740990 || this.carryingCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.carryingCharacterId + ") on element of FightEntityDispositionInformations.carryingCharacterId.");
        }
    }
};
module.exports.FightEntityDispositionInformations = FightEntityDispositionInformations;
module.exports.types[217] = FightEntityDispositionInformations;

class GameRolePlayActorInformations extends GameContextActorInformations {
    constructor(contextualId, look, disposition) {
        super(contextualId, look, disposition);
        this.messageId = 141;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GameRolePlayActorInformations = GameRolePlayActorInformations;
module.exports.types[141] = GameRolePlayActorInformations;

class GameRolePlayTaxCollectorInformations extends GameRolePlayActorInformations {
    constructor(contextualId, look, disposition, identification, guildLevel, taxCollectorAttack) {
        super(contextualId, look, disposition);
        this.identification = identification;
        this.guildLevel = guildLevel;
        this.taxCollectorAttack = taxCollectorAttack;
        this.messageId = 148;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.identification.getTypeId());
        this.identification.serialize(this.buffer);
        if (this.guildLevel < 0 || this.guildLevel > 255) {
            throw new Error("Forbidden value (" + this.guildLevel + ") on element guildLevel.");
        }
        this.buffer.writeByte(this.guildLevel);
        this.buffer.writeInt(this.taxCollectorAttack);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.identification = ProtocolTypeManager.getInstance(TaxCollectorStaticInformations, _loc2_);
        this.identification.deserialize(buffer);
        this.guildLevel = buffer.readUnsignedByte();
        if (this.guildLevel < 0 || this.guildLevel > 255) {
            throw new Error("Forbidden value (" + this.guildLevel + ") on element of GameRolePlayTaxCollectorInformations.guildLevel.");
        }
        this.taxCollectorAttack = buffer.readInt();
    }
};
module.exports.GameRolePlayTaxCollectorInformations = GameRolePlayTaxCollectorInformations;
module.exports.types[148] = GameRolePlayTaxCollectorInformations;

class IdentifiedEntityDispositionInformations extends EntityDispositionInformations {
    constructor(cellId, direction, id) {
        super(cellId, direction);
        this.id = id;
        this.messageId = 107;
    }

    serialize() {
        super.serialize();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of IdentifiedEntityDispositionInformations.id.");
        }
    }
};
module.exports.IdentifiedEntityDispositionInformations = IdentifiedEntityDispositionInformations;
module.exports.types[107] = IdentifiedEntityDispositionInformations;

class MapCoordinates extends ProtocolType {
    constructor(worldX, worldY) {
        super();
        this.worldX = worldX;
        this.worldY = worldY;
        this.messageId = 174;
    }

    serialize() {
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
    }

    deserialize(buffer) {
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of MapCoordinates.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of MapCoordinates.worldY.");
        };
    }
};
module.exports.MapCoordinates = MapCoordinates;
module.exports.types[174] = MapCoordinates;

class MapCoordinatesAndId extends MapCoordinates {
    constructor(worldX, worldY, mapId) {
        super(worldX, worldY);
        this.mapId = mapId;
        this.messageId = 392;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.mapId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.mapId = buffer.readInt();
    }
};
module.exports.MapCoordinatesAndId = MapCoordinatesAndId;
module.exports.types[392] = MapCoordinatesAndId;

class MapCoordinatesExtended extends MapCoordinatesAndId {
    constructor(worldX, worldY, mapId, subAreaId) {
        super(worldX, worldY, mapId);
        this.subAreaId = subAreaId;
        this.messageId = 176;
    }

    serialize() {
        super.serialize();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of MapCoordinatesExtended.subAreaId.");
        }
    }
};
module.exports.MapCoordinatesExtended = MapCoordinatesExtended;
module.exports.types[176] = MapCoordinatesExtended;

class AbstractSocialGroupInfos extends ProtocolType {
    constructor() {
        super();
        this.messageId = 416;
    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.AbstractSocialGroupInfos = AbstractSocialGroupInfos;
module.exports.types[416] = AbstractSocialGroupInfos;

class BasicAllianceInformations extends AbstractSocialGroupInfos {
    constructor(allianceId, allianceTag) {
        super();
        this.allianceId = allianceId;
        this.allianceTag = allianceTag;
        this.messageId = 419;
    }

    serialize() {
        super.serialize();
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        this.buffer.writeVarInt(this.allianceId);
        this.buffer.writeUTF(this.allianceTag);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element of BasicAllianceInformations.allianceId.");
        }
        this.allianceTag = buffer.readUTF();
    }
};
module.exports.BasicAllianceInformations = BasicAllianceInformations;
module.exports.types[419] = BasicAllianceInformations;

class BasicNamedAllianceInformations extends BasicAllianceInformations {
    constructor(allianceId, allianceTag, allianceName) {
        super(allianceId, allianceTag);
        this.allianceName = allianceName;
        this.messageId = 418;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.allianceName);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceName = buffer.readUTF();
    }
};
module.exports.BasicNamedAllianceInformations = BasicNamedAllianceInformations;
module.exports.types[418] = BasicNamedAllianceInformations;

class AllianceInformations extends BasicNamedAllianceInformations {
    constructor(allianceId, allianceTag, allianceName, allianceEmblem) {
        super(allianceId, allianceTag, allianceName);
        this.allianceEmblem = allianceEmblem;
        this.messageId = 417;
    }

    serialize() {
        super.serialize();
        this.allianceEmblem.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceEmblem = new GuildEmblem();
        this.allianceEmblem.deserialize(buffer);
    }
};
module.exports.AllianceInformations = AllianceInformations;
module.exports.types[417] = AllianceInformations;

class AlternativeMonstersInGroupLightInformations extends ProtocolType {
    constructor(playerCount, monsters) {
        super();
        this.playerCount = playerCount;
        this.monsters = monsters;
        this.messageId = 394;
    }

    serialize() {
        this.buffer.writeInt(this.playerCount);
        this.buffer.writeShort(this.monsters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.monsters.length) {
            (this.monsters[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.playerCount = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MonsterInGroupLightInformations();
            _loc4_.deserialize(buffer);
            this.monsters.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.AlternativeMonstersInGroupLightInformations = AlternativeMonstersInGroupLightInformations;
module.exports.types[394] = AlternativeMonstersInGroupLightInformations;

class AtlasPointsInformations extends ProtocolType {
    constructor(type, coords) {
        super();
        this.type = type;
        this.coords = coords;
        this.messageId = 175;
    }

    serialize() {
        this.buffer.writeByte(this.type);
        this.buffer.writeShort(this.coords.length);
        var _loc2_ = 0;
        while (_loc2_ < this.coords.length) {
            (this.coords[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of AtlasPointsInformations.type.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MapCoordinatesExtended();
            _loc4_.deserialize(buffer);
            this.coords.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.AtlasPointsInformations = AtlasPointsInformations;
module.exports.types[175] = AtlasPointsInformations;

class BasicGuildInformations extends AbstractSocialGroupInfos {
    constructor(guildId, guildName, guildLevel) {
        super();
        this.guildId = guildId;
        this.guildName = guildName;
        this.guildLevel = guildLevel;
        this.messageId = 365;
    }

    serialize() {
        super.serialize();
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
        this.buffer.writeUTF(this.guildName);
        if (this.guildLevel < 0 || this.guildLevel > 200) {
            throw new Error("Forbidden value (" + this.guildLevel + ") on element guildLevel.");
        }
        this.buffer.writeByte(this.guildLevel);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element of BasicGuildInformations.guildId.");
        }
        this.guildName = buffer.readUTF();
        this.guildLevel = buffer.readUnsignedByte();
        if (this.guildLevel < 0 || this.guildLevel > 200) {
            throw new Error("Forbidden value (" + this.guildLevel + ") on element of BasicGuildInformations.guildLevel.");
        };
    }
};
module.exports.BasicGuildInformations = BasicGuildInformations;
module.exports.types[365] = BasicGuildInformations;

class ArenaRankInfos extends ProtocolType {
    constructor(rank, bestRank, victoryCount, fightcount) {
        super();
        this.rank = rank;
        this.bestRank = bestRank;
        this.victoryCount = victoryCount;
        this.fightcount = fightcount;
        this.messageId = 499;
    }

    serialize() {
        if (this.rank < 0 || this.rank > 20000) {
            throw new Error("Forbidden value (" + this.rank + ") on element rank.");
        }
        this.buffer.writeVarShort(this.rank);
        if (this.bestRank < 0 || this.bestRank > 20000) {
            throw new Error("Forbidden value (" + this.bestRank + ") on element bestRank.");
        }
        this.buffer.writeVarShort(this.bestRank);
        if (this.victoryCount < 0) {
            throw new Error("Forbidden value (" + this.victoryCount + ") on element victoryCount.");
        }
        this.buffer.writeVarShort(this.victoryCount);
        if (this.fightcount < 0) {
            throw new Error("Forbidden value (" + this.fightcount + ") on element fightcount.");
        }
        this.buffer.writeVarShort(this.fightcount);
    }

    deserialize(buffer) {
        this.rank = buffer.readVarUhShort();
        if (this.rank < 0 || this.rank > 20000) {
            throw new Error("Forbidden value (" + this.rank + ") on element of ArenaRankInfos.rank.");
        }
        this.bestRank = buffer.readVarUhShort();
        if (this.bestRank < 0 || this.bestRank > 20000) {
            throw new Error("Forbidden value (" + this.bestRank + ") on element of ArenaRankInfos.bestRank.");
        };
        this.victoryCount = buffer.readVarUhShort();
        if (this.victoryCount < 0) {
            throw new Error("Forbidden value (" + this.victoryCount + ") on element of ArenaRankInfos.victoryCount.");
        };
        this.fightcount = buffer.readVarUhShort();
        if (this.fightcount < 0) {
            throw new Error("Forbidden value (" + this.fightcount + ") on element of ArenaRankInfos.fightcount.");
        };
    }
};
module.exports.ArenaRankInfos = ArenaRankInfos;
module.exports.types[499] = ArenaRankInfos;

class GameRolePlayNamedActorInformations extends GameRolePlayActorInformations {
    constructor(contextualId, look, disposition, name) {
        super(contextualId, look, disposition);
        this.name = name;
        this.messageId = 154;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.name);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
    }
};
module.exports.GameRolePlayNamedActorInformations = GameRolePlayNamedActorInformations;
module.exports.types[154] = GameRolePlayNamedActorInformations;

class GameRolePlayHumanoidInformations extends GameRolePlayNamedActorInformations {
    constructor(param1, param2, param3, name, humanoidInfo, accountId) {
        super(contextualId, look, disposition, name);
        this.humanoidInfo = humanoidInfo;
        this.accountId = accountId;
        this.messageId = 159;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.humanoidInfo.getTypeId());
        this.humanoidInfo.serialize(this.buffer);
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.humanoidInfo = ProtocolTypeManager.getInstance(HumanInformations, _loc2_);
        this.humanoidInfo.deserialize(buffer);
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of GameRolePlayHumanoidInformations.accountId.");
        }
    }
};
module.exports.GameRolePlayHumanoidInformations = GameRolePlayHumanoidInformations;
module.exports.types[159] = GameRolePlayHumanoidInformations;

class GameRolePlayCharacterInformations extends GameRolePlayHumanoidInformations {
    constructor(param1, param2, param3, name, humanoidInfo, accountId, alignmentInfos) {
        super(param1, param2, param3, name, humanoidInfo, accountId);
        this.alignmentInfos = alignmentInfos;
        this.messageId = 36;
    }

    serialize() {
        super.serialize();
        this.alignmentInfos.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.alignmentInfos = new ActorAlignmentInformations();
        this.alignmentInfos.deserialize(buffer);
    }
};
module.exports.GameRolePlayCharacterInformations = GameRolePlayCharacterInformations;
module.exports.types[36] = GameRolePlayCharacterInformations;

class GameRolePlayGroupMonsterInformations extends GameRolePlayActorInformations {
    constructor(contextualId, look, disposition, staticInfos, creationTime, ageBonusRate, lootShare, alignmentSide, keyRingBonus, hasHardcoreDrop, hasAVARewardToken) {
        super(contextualId, look, disposition);
        this.staticInfos = staticInfos;
        this.creationTime = creationTime;
        this.ageBonusRate = ageBonusRate;
        this.lootShare = lootShare;
        this.alignmentSide = alignmentSide;
        this.keyRingBonus = keyRingBonus;
        this.hasHardcoreDrop = hasHardcoreDrop;
        this.hasAVARewardToken = hasAVARewardToken;
        this.messageId = 160;
    }

    serialize() {
        super.serialize();
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.keyRingBonus);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.hasHardcoreDrop);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.hasAVARewardToken);
        this.buffer.writeByte(_loc2_);
        this.buffer.writeShort(this.staticInfos.getTypeId());
        this.staticInfos.serialize(this.buffer);
        if (this.creationTime < 0 || this.creationTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.creationTime + ") on element creationTime.");
        }
        this.buffer.writeDouble(this.creationTime);
        if (this.ageBonusRate < 0) {
            throw new Error("Forbidden value (" + this.ageBonusRate + ") on element ageBonusRate.");
        }
        this.buffer.writeInt(this.ageBonusRate);
        if (this.lootShare < -1 || this.lootShare > 8) {
            throw new Error("Forbidden value (" + this.lootShare + ") on element lootShare.");
        }
        this.buffer.writeByte(this.lootShare);
        this.buffer.writeByte(this.alignmentSide);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.deserializeByteBoxes(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.staticInfos = ProtocolTypeManager.getInstance(GroupMonsterStaticInformations, _loc2_);
        this.staticInfos.deserialize(buffer);
        this.creationTime = buffer.readDouble();
        if (this.creationTime < 0 || this.creationTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.creationTime + ") on element of GameRolePlayGroupMonsterInformations.creationTime.");
        }
        this.ageBonusRate = buffer.readInt();
        if (this.ageBonusRate < 0) {
            throw new Error("Forbidden value (" + this.ageBonusRate + ") on element of GameRolePlayGroupMonsterInformations.ageBonusRate.");
        };
        this.lootShare = buffer.readByte();
        if (this.lootShare < -1 || this.lootShare > 8) {
            throw new Error("Forbidden value (" + this.lootShare + ") on element of GameRolePlayGroupMonsterInformations.lootShare.");
        };
        this.alignmentSide = buffer.readByte();
    }
};
module.exports.GameRolePlayGroupMonsterInformations = GameRolePlayGroupMonsterInformations;
module.exports.types[160] = GameRolePlayGroupMonsterInformations;

class GameRolePlayGroupMonsterWaveInformations extends GameRolePlayGroupMonsterInformations {
    constructor(param1, param2, param3, staticInfos, creationTime, ageBonusRate, lootShare, alignmentSide, keyRingBonus, hasHardcoreDrop, hasAVARewardToken, nbWaves, alternatives) {
        super(contextualId, look, disposition, staticInfos, creationTime, ageBonusRate, lootShare, alignmentSide, keyRingBonus, hasHardcoreDrop, hasAVARewardToken);
        this.nbWaves = nbWaves;
        this.alternatives = alternatives;
        this.messageId = 464;
    }

    serialize() {
        super.serialize();
        if (this.nbWaves < 0) {
            throw new Error("Forbidden value (" + this.nbWaves + ") on element nbWaves.");
        }
        this.buffer.writeByte(this.nbWaves);
        this.buffer.writeShort(this.alternatives.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alternatives.length) {
            this.buffer.writeShort((this.alternatives[_loc2_]).getTypeId());
            (this.alternatives[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.nbWaves = buffer.readByte();
        if (this.nbWaves < 0) {
            throw new Error("Forbidden value (" + this.nbWaves + ") on element of GameRolePlayGroupMonsterWaveInformations.nbWaves.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(GroupMonsterStaticInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.alternatives.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.GameRolePlayGroupMonsterWaveInformations = GameRolePlayGroupMonsterWaveInformations;
module.exports.types[464] = GameRolePlayGroupMonsterWaveInformations;

class GameRolePlayMerchantInformations extends GameRolePlayNamedActorInformations {
    constructor(param1, param2, param3, name, sellType, options) {
        super(contextualId, look, disposition, name);
        this.sellType = sellType;
        this.options = options;
        this.messageId = 129;
    }

    serialize() {
        super.serialize();
        if (this.sellType < 0) {
            throw new Error("Forbidden value (" + this.sellType + ") on element sellType.");
        }
        this.buffer.writeByte(this.sellType);
        this.buffer.writeShort(this.options.length);
        var _loc2_ = 0;
        while (_loc2_ < this.options.length) {
            this.buffer.writeShort((this.options[_loc2_]).getTypeId());
            (this.options[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.sellType = buffer.readByte();
        if (this.sellType < 0) {
            throw new Error("Forbidden value (" + this.sellType + ") on element of GameRolePlayMerchantInformations.sellType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(HumanOption, _loc4_);
            _loc5_.deserialize(buffer);
            this.options.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.GameRolePlayMerchantInformations = GameRolePlayMerchantInformations;
module.exports.types[129] = GameRolePlayMerchantInformations;

class GameRolePlayMountInformations extends GameRolePlayNamedActorInformations {
    constructor(param1, param2, param3, name, ownerName, level) {
        super(contextualId, look, disposition, name);
        this.ownerName = ownerName;
        this.level = level;
        this.messageId = 180;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.ownerName);
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.ownerName = buffer.readUTF();
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element of GameRolePlayMountInformations.level.");
        }
    }
};
module.exports.GameRolePlayMountInformations = GameRolePlayMountInformations;
module.exports.types[180] = GameRolePlayMountInformations;

class GameRolePlayMutantInformations extends GameRolePlayHumanoidInformations {
    constructor(param1, param2, param3, name, humanoidInfo, accountId, monsterId, powerLevel) {
        super(param1, param2, param3, name, humanoidInfo, accountId);
        this.monsterId = monsterId;
        this.powerLevel = powerLevel;
        this.messageId = 3;
    }

    serialize() {
        super.serialize();
        if (this.monsterId < 0) {
            throw new Error("Forbidden value (" + this.monsterId + ") on element monsterId.");
        }
        this.buffer.writeVarShort(this.monsterId);
        this.buffer.writeByte(this.powerLevel);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.monsterId = buffer.readVarUhShort();
        if (this.monsterId < 0) {
            throw new Error("Forbidden value (" + this.monsterId + ") on element of GameRolePlayMutantInformations.monsterId.");
        }
        this.powerLevel = buffer.readByte();
    }
};
module.exports.GameRolePlayMutantInformations = GameRolePlayMutantInformations;
module.exports.types[3] = GameRolePlayMutantInformations;

class GameRolePlayNpcInformations extends GameRolePlayActorInformations {
    constructor(contextualId, look, disposition, npcId, sex, specialArtworkId) {
        super(contextualId, look, disposition);
        this.npcId = npcId;
        this.sex = sex;
        this.specialArtworkId = specialArtworkId;
        this.messageId = 156;
    }

    serialize() {
        super.serialize();
        if (this.npcId < 0) {
            throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
        }
        this.buffer.writeVarShort(this.npcId);
        this.buffer.writeBoolean(this.sex);
        if (this.specialArtworkId < 0) {
            throw new Error("Forbidden value (" + this.specialArtworkId + ") on element specialArtworkId.");
        }
        this.buffer.writeVarShort(this.specialArtworkId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.npcId = buffer.readVarUhShort();
        if (this.npcId < 0) {
            throw new Error("Forbidden value (" + this.npcId + ") on element of GameRolePlayNpcInformations.npcId.");
        }
        this.sex = buffer.readBoolean();
        this.specialArtworkId = buffer.readVarUhShort();
        if (this.specialArtworkId < 0) {
            throw new Error("Forbidden value (" + this.specialArtworkId + ") on element of GameRolePlayNpcInformations.specialArtworkId.");
        };
    }
};
module.exports.GameRolePlayNpcInformations = GameRolePlayNpcInformations;
module.exports.types[156] = GameRolePlayNpcInformations;

class GameRolePlayNpcWithQuestInformations extends GameRolePlayNpcInformations {
    constructor(param1, param2, param3, npcId, sex, specialArtworkId, questFlag) {
        super(contextualId, look, disposition, npcId, sex, specialArtworkId);
        this.questFlag = questFlag;
        this.messageId = 383;
    }

    serialize() {
        super.serialize();
        this.questFlag.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.questFlag = new GameRolePlayNpcQuestFlag();
        this.questFlag.deserialize(buffer);
    }
};
module.exports.GameRolePlayNpcWithQuestInformations = GameRolePlayNpcWithQuestInformations;
module.exports.types[383] = GameRolePlayNpcWithQuestInformations;

class GameRolePlayPortalInformations extends GameRolePlayActorInformations {
    constructor(contextualId, look, disposition, portal) {
        super(contextualId, look, disposition);
        this.portal = portal;
        this.messageId = 467;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.portal.getTypeId());
        this.portal.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.portal = ProtocolTypeManager.getInstance(PortalInformation, _loc2_);
        this.portal.deserialize(buffer);
    }
};
module.exports.GameRolePlayPortalInformations = GameRolePlayPortalInformations;
module.exports.types[467] = GameRolePlayPortalInformations;

class GameRolePlayPrismInformations extends GameRolePlayActorInformations {
    constructor(contextualId, look, disposition, prism) {
        super(contextualId, look, disposition);
        this.prism = prism;
        this.messageId = 161;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.prism.getTypeId());
        this.prism.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.prism = ProtocolTypeManager.getInstance(PrismInformation, _loc2_);
        this.prism.deserialize(buffer);
    }
};
module.exports.GameRolePlayPrismInformations = GameRolePlayPrismInformations;
module.exports.types[161] = GameRolePlayPrismInformations;

class GameRolePlayTreasureHintInformations extends GameRolePlayActorInformations {
    constructor(contextualId, look, disposition, npcId) {
        super(contextualId, look, disposition);
        this.npcId = npcId;
        this.messageId = 471;
    }

    serialize() {
        super.serialize();
        if (this.npcId < 0) {
            throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
        }
        this.buffer.writeVarShort(this.npcId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.npcId = buffer.readVarUhShort();
        if (this.npcId < 0) {
            throw new Error("Forbidden value (" + this.npcId + ") on element of GameRolePlayTreasureHintInformations.npcId.");
        }
    }
};
module.exports.GameRolePlayTreasureHintInformations = GameRolePlayTreasureHintInformations;
module.exports.types[471] = GameRolePlayTreasureHintInformations;

class GroupMonsterStaticInformations extends ProtocolType {
    constructor(mainCreatureLightInfos, underlings) {
        super();
        this.mainCreatureLightInfos = mainCreatureLightInfos;
        this.underlings = underlings;
        this.messageId = 140;
    }

    serialize() {
        this.mainCreatureLightInfos.serialize(this.buffer);
        this.buffer.writeShort(this.underlings.length);
        var _loc2_ = 0;
        while (_loc2_ < this.underlings.length) {
            (this.underlings[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
        this.mainCreatureLightInfos.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MonsterInGroupInformations();
            _loc4_.deserialize(buffer);
            this.underlings.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GroupMonsterStaticInformations = GroupMonsterStaticInformations;
module.exports.types[140] = GroupMonsterStaticInformations;

class GroupMonsterStaticInformationsWithAlternatives extends GroupMonsterStaticInformations {
    constructor(mainCreatureLightInfos, underlings, alternatives) {
        super(mainCreatureLightInfos, underlings);
        this.alternatives = alternatives;
        this.messageId = 396;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.alternatives.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alternatives.length) {
            (this.alternatives[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new AlternativeMonstersInGroupLightInformations();
            _loc4_.deserialize(buffer);
            this.alternatives.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GroupMonsterStaticInformationsWithAlternatives = GroupMonsterStaticInformationsWithAlternatives;
module.exports.types[396] = GroupMonsterStaticInformationsWithAlternatives;

class GuildInformations extends BasicGuildInformations {
    constructor(guildId, guildName, guildLevel, guildEmblem) {
        super(guildId, guildName, guildLevel);
        this.guildEmblem = guildEmblem;
        this.messageId = 127;
    }

    serialize() {
        super.serialize();
        this.guildEmblem.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.guildEmblem = new GuildEmblem();
        this.guildEmblem.deserialize(buffer);
    }
};
module.exports.GuildInformations = GuildInformations;
module.exports.types[127] = GuildInformations;

class GuildInAllianceInformations extends GuildInformations {
    constructor(guildId, guildName, guildLevel, guildEmblem, nbMembers) {
        super(guildId, guildName, guildLevel, guildEmblem);
        this.nbMembers = nbMembers;
        this.messageId = 420;
    }

    serialize() {
        super.serialize();
        if (this.nbMembers < 1 || this.nbMembers > 240) {
            throw new Error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
        }
        this.buffer.writeByte(this.nbMembers);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.nbMembers = buffer.readUnsignedByte();
        if (this.nbMembers < 1 || this.nbMembers > 240) {
            throw new Error("Forbidden value (" + this.nbMembers + ") on element of GuildInAllianceInformations.nbMembers.");
        }
    }
};
module.exports.GuildInAllianceInformations = GuildInAllianceInformations;
module.exports.types[420] = GuildInAllianceInformations;

class HumanInformations extends ProtocolType {
    constructor(restrictions, sex, options) {
        super();
        this.restrictions = restrictions;
        this.sex = sex;
        this.options = options;
        this.messageId = 157;
    }

    serialize() {
        this.restrictions.serialize(this.buffer);
        this.buffer.writeBoolean(this.sex);
        this.buffer.writeShort(this.options.length);
        var _loc2_ = 0;
        while (_loc2_ < this.options.length) {
            this.buffer.writeShort((this.options[_loc2_]).getTypeId());
            (this.options[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.restrictions = new ActorRestrictionsInformations();
        this.restrictions.deserialize(buffer);
        this.sex = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(HumanOption, _loc4_);
            _loc5_.deserialize(buffer);
            this.options.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.HumanInformations = HumanInformations;
module.exports.types[157] = HumanInformations;

class HumanOption extends ProtocolType {
    constructor() {
        super();
        this.messageId = 406;
    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.HumanOption = HumanOption;
module.exports.types[406] = HumanOption;

class HumanOptionAlliance extends HumanOption {
    constructor(allianceInformations, aggressable) {
        super();
        this.allianceInformations = allianceInformations;
        this.aggressable = aggressable;
        this.messageId = 425;
    }

    serialize() {
        super.serialize();
        this.allianceInformations.serialize(this.buffer);
        this.buffer.writeByte(this.aggressable);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceInformations = new AllianceInformations();
        this.allianceInformations.deserialize(buffer);
        this.aggressable = buffer.readByte();
        if (this.aggressable < 0) {
            throw new Error("Forbidden value (" + this.aggressable + ") on element of HumanOptionAlliance.aggressable.");
        }
    }
};
module.exports.HumanOptionAlliance = HumanOptionAlliance;
module.exports.types[425] = HumanOptionAlliance;

class HumanOptionEmote extends HumanOption {
    constructor(emoteId, emoteStartTime) {
        super();
        this.emoteId = emoteId;
        this.emoteStartTime = emoteStartTime;
        this.messageId = 407;
    }

    serialize() {
        super.serialize();
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
        if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.emoteStartTime + ") on element emoteStartTime.");
        }
        this.buffer.writeDouble(this.emoteStartTime);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element of HumanOptionEmote.emoteId.");
        }
        this.emoteStartTime = buffer.readDouble();
        if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.emoteStartTime + ") on element of HumanOptionEmote.emoteStartTime.");
        };
    }
};
module.exports.HumanOptionEmote = HumanOptionEmote;
module.exports.types[407] = HumanOptionEmote;

class HumanOptionFollowers extends HumanOption {
    constructor(followingCharactersLook) {
        super();
        this.followingCharactersLook = followingCharactersLook;
        this.messageId = 410;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.followingCharactersLook.length);
        var _loc2_ = 0;
        while (_loc2_ < this.followingCharactersLook.length) {
            (this.followingCharactersLook[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new IndexedEntityLook();
            _loc4_.deserialize(buffer);
            this.followingCharactersLook.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.HumanOptionFollowers = HumanOptionFollowers;
module.exports.types[410] = HumanOptionFollowers;

class HumanOptionGuild extends HumanOption {
    constructor(guildInformations) {
        super();
        this.guildInformations = guildInformations;
        this.messageId = 409;
    }

    serialize() {
        super.serialize();
        this.guildInformations.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.guildInformations = new GuildInformations();
        this.guildInformations.deserialize(buffer);
    }
};
module.exports.HumanOptionGuild = HumanOptionGuild;
module.exports.types[409] = HumanOptionGuild;

class HumanOptionObjectUse extends HumanOption {
    constructor(delayTypeId, delayEndTime, objectGID) {
        super();
        this.delayTypeId = delayTypeId;
        this.delayEndTime = delayEndTime;
        this.objectGID = objectGID;
        this.messageId = 449;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.delayTypeId);
        if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.delayEndTime + ") on element delayEndTime.");
        }
        this.buffer.writeDouble(this.delayEndTime);
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.delayTypeId = buffer.readByte();
        if (this.delayTypeId < 0) {
            throw new Error("Forbidden value (" + this.delayTypeId + ") on element of HumanOptionObjectUse.delayTypeId.");
        }
        this.delayEndTime = buffer.readDouble();
        if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.delayEndTime + ") on element of HumanOptionObjectUse.delayEndTime.");
        };
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of HumanOptionObjectUse.objectGID.");
        };
    }
};
module.exports.HumanOptionObjectUse = HumanOptionObjectUse;
module.exports.types[449] = HumanOptionObjectUse;

class HumanOptionOrnament extends HumanOption {
    constructor(ornamentId) {
        super();
        this.ornamentId = ornamentId;
        this.messageId = 411;
    }

    serialize() {
        super.serialize();
        if (this.ornamentId < 0) {
            throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
        }
        this.buffer.writeVarShort(this.ornamentId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.ornamentId = buffer.readVarUhShort();
        if (this.ornamentId < 0) {
            throw new Error("Forbidden value (" + this.ornamentId + ") on element of HumanOptionOrnament.ornamentId.");
        }
    }
};
module.exports.HumanOptionOrnament = HumanOptionOrnament;
module.exports.types[411] = HumanOptionOrnament;

class HumanOptionSkillUse extends HumanOption {
    constructor(elementId, skillId, skillEndTime) {
        super();
        this.elementId = elementId;
        this.skillId = skillId;
        this.skillEndTime = skillEndTime;
        this.messageId = 495;
    }

    serialize() {
        super.serialize();
        if (this.elementId < 0) {
            throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
        }
        this.buffer.writeVarInt(this.elementId);
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarShort(this.skillId);
        if (this.skillEndTime < -9007199254740990 || this.skillEndTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.skillEndTime + ") on element skillEndTime.");
        }
        this.buffer.writeDouble(this.skillEndTime);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.elementId = buffer.readVarUhInt();
        if (this.elementId < 0) {
            throw new Error("Forbidden value (" + this.elementId + ") on element of HumanOptionSkillUse.elementId.");
        }
        this.skillId = buffer.readVarUhShort();
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element of HumanOptionSkillUse.skillId.");
        };
        this.skillEndTime = buffer.readDouble();
        if (this.skillEndTime < -9007199254740990 || this.skillEndTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.skillEndTime + ") on element of HumanOptionSkillUse.skillEndTime.");
        };
    }
};
module.exports.HumanOptionSkillUse = HumanOptionSkillUse;
module.exports.types[495] = HumanOptionSkillUse;

class HumanOptionTitle extends HumanOption {
    constructor(titleId, titleParam) {
        super();
        this.titleId = titleId;
        this.titleParam = titleParam;
        this.messageId = 408;
    }

    serialize() {
        super.serialize();
        if (this.titleId < 0) {
            throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
        }
        this.buffer.writeVarShort(this.titleId);
        this.buffer.writeUTF(this.titleParam);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.titleId = buffer.readVarUhShort();
        if (this.titleId < 0) {
            throw new Error("Forbidden value (" + this.titleId + ") on element of HumanOptionTitle.titleId.");
        }
        this.titleParam = buffer.readUTF();
    }
};
module.exports.HumanOptionTitle = HumanOptionTitle;
module.exports.types[408] = HumanOptionTitle;

class DecraftedItemStackInfo extends ProtocolType {
    constructor(objectUID, bonusMin, bonusMax, runesId, runesQty) {
        super();
        this.objectUID = objectUID;
        this.bonusMin = bonusMin;
        this.bonusMax = bonusMax;
        this.runesId = runesId;
        this.runesQty = runesQty;
        this.messageId = 481;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        this.buffer.writeFloat(this.bonusMin);
        this.buffer.writeFloat(this.bonusMax);
        this.buffer.writeShort(this.runesId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.runesId.length) {
            if (this.runesId[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.runesId[_loc2_] + ") on element 4 (starting at 1) of runesId.");
            }
            this.buffer.writeVarShort(this.runesId[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.runesQty.length);
        var _loc3_ = 0;
        while (_loc3_ < this.runesQty.length) {
            if (this.runesQty[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.runesQty[_loc3_] + ") on element 5 (starting at 1) of runesQty.");
            }
            this.buffer.writeVarInt(this.runesQty[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of DecraftedItemStackInfo.objectUID.");
        }
        this.bonusMin = buffer.readFloat();
        this.bonusMax = buffer.readFloat();;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of runesId.");
            }
            this.runesId.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhInt();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of runesQty.");
            }
            this.runesQty.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.DecraftedItemStackInfo = DecraftedItemStackInfo;
module.exports.types[481] = DecraftedItemStackInfo;

class JobBookSubscription extends ProtocolType {
    constructor(jobId, subscribed) {
        super();
        this.jobId = jobId;
        this.subscribed = subscribed;
        this.messageId = 500;
    }

    serialize() {
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
        this.buffer.writeBoolean(this.subscribed);
    }

    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element of JobBookSubscription.jobId.");
        }
        this.subscribed = buffer.readBoolean();
    }
};
module.exports.JobBookSubscription = JobBookSubscription;
module.exports.types[500] = JobBookSubscription;

class JobCrafterDirectoryEntryJobInfo extends ProtocolType {
    constructor(jobId, jobLevel, free, minLevel) {
        super();
        this.jobId = jobId;
        this.jobLevel = jobLevel;
        this.free = free;
        this.minLevel = minLevel;
        this.messageId = 195;
    }

    serialize() {
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
        if (this.jobLevel < 1 || this.jobLevel > 200) {
            throw new Error("Forbidden value (" + this.jobLevel + ") on element jobLevel.");
        }
        this.buffer.writeByte(this.jobLevel);
        this.buffer.writeBoolean(this.free);
        if (this.minLevel < 0 || this.minLevel > 255) {
            throw new Error("Forbidden value (" + this.minLevel + ") on element minLevel.");
        }
        this.buffer.writeByte(this.minLevel);
    }

    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryEntryJobInfo.jobId.");
        }
        this.jobLevel = buffer.readUnsignedByte();
        if (this.jobLevel < 1 || this.jobLevel > 200) {
            throw new Error("Forbidden value (" + this.jobLevel + ") on element of JobCrafterDirectoryEntryJobInfo.jobLevel.");
        };
        this.free = buffer.readBoolean();
        this.minLevel = buffer.readUnsignedByte();
        if (this.minLevel < 0 || this.minLevel > 255) {
            throw new Error("Forbidden value (" + this.minLevel + ") on element of JobCrafterDirectoryEntryJobInfo.minLevel.");
        };
    }
};
module.exports.JobCrafterDirectoryEntryJobInfo = JobCrafterDirectoryEntryJobInfo;
module.exports.types[195] = JobCrafterDirectoryEntryJobInfo;

class JobCrafterDirectoryEntryPlayerInfo extends ProtocolType {
    constructor(playerId, playerName, alignmentSide, breed, sex, isInWorkshop, worldX, worldY, mapId, subAreaId, status) {
        super();
        this.playerId = playerId;
        this.playerName = playerName;
        this.alignmentSide = alignmentSide;
        this.breed = breed;
        this.sex = sex;
        this.isInWorkshop = isInWorkshop;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.status = status;
        this.messageId = 194;
    }

    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeUTF(this.playerName);
        this.buffer.writeByte(this.alignmentSide);
        this.buffer.writeByte(this.breed);
        this.buffer.writeBoolean(this.sex);
        this.buffer.writeBoolean(this.isInWorkshop);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeShort(this.status.getTypeId());
        this.status.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryEntryPlayerInfo.playerId.");
        }
        this.playerName = buffer.readUTF();
        this.alignmentSide = buffer.readByte();;
        this.breed = buffer.readByte();
        if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
            throw new Error("Forbidden value (" + this.breed + ") on element of JobCrafterDirectoryEntryPlayerInfo.breed.");
        };
        this.sex = buffer.readBoolean();;
        this.isInWorkshop = buffer.readBoolean();;
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of JobCrafterDirectoryEntryPlayerInfo.worldX.");
        };
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of JobCrafterDirectoryEntryPlayerInfo.worldY.");
        };
        this.mapId = buffer.readInt();;
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of JobCrafterDirectoryEntryPlayerInfo.subAreaId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
    }
};
module.exports.JobCrafterDirectoryEntryPlayerInfo = JobCrafterDirectoryEntryPlayerInfo;
module.exports.types[194] = JobCrafterDirectoryEntryPlayerInfo;

class JobCrafterDirectoryListEntry extends ProtocolType {
    constructor(playerInfo, jobInfo) {
        super();
        this.playerInfo = playerInfo;
        this.jobInfo = jobInfo;
        this.messageId = 196;
    }

    serialize() {
        this.playerInfo.serialize(this.buffer);
        this.jobInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
        this.playerInfo.deserialize(buffer);
        this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
        this.jobInfo.deserialize(buffer);
    }
};
module.exports.JobCrafterDirectoryListEntry = JobCrafterDirectoryListEntry;
module.exports.types[196] = JobCrafterDirectoryListEntry;

class JobCrafterDirectorySettings extends ProtocolType {
    constructor(jobId, minLevel, free) {
        super();
        this.jobId = jobId;
        this.minLevel = minLevel;
        this.free = free;
        this.messageId = 97;
    }

    serialize() {
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
        if (this.minLevel < 0 || this.minLevel > 255) {
            throw new Error("Forbidden value (" + this.minLevel + ") on element minLevel.");
        }
        this.buffer.writeByte(this.minLevel);
        this.buffer.writeBoolean(this.free);
    }

    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectorySettings.jobId.");
        }
        this.minLevel = buffer.readUnsignedByte();
        if (this.minLevel < 0 || this.minLevel > 255) {
            throw new Error("Forbidden value (" + this.minLevel + ") on element of JobCrafterDirectorySettings.minLevel.");
        };
        this.free = buffer.readBoolean();
    }
};
module.exports.JobCrafterDirectorySettings = JobCrafterDirectorySettings;
module.exports.types[97] = JobCrafterDirectorySettings;

class JobDescription extends ProtocolType {
    constructor(jobId, skills) {
        super();
        this.jobId = jobId;
        this.skills = skills;
        this.messageId = 101;
    }

    serialize() {
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
        this.buffer.writeShort(this.skills.length);
        var _loc2_ = 0;
        while (_loc2_ < this.skills.length) {
            this.buffer.writeShort((this.skills[_loc2_]).getTypeId());
            (this.skills[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element of JobDescription.jobId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(SkillActionDescription, _loc4_);
            _loc5_.deserialize(buffer);
            this.skills.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.JobDescription = JobDescription;
module.exports.types[101] = JobDescription;

class JobExperience extends ProtocolType {
    constructor(jobId, jobLevel, jobXP, jobXpLevelFloor, jobXpNextLevelFloor) {
        super();
        this.jobId = jobId;
        this.jobLevel = jobLevel;
        this.jobXP = jobXP;
        this.jobXpLevelFloor = jobXpLevelFloor;
        this.jobXpNextLevelFloor = jobXpNextLevelFloor;
        this.messageId = 98;
    }

    serialize() {
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
        if (this.jobLevel < 0 || this.jobLevel > 255) {
            throw new Error("Forbidden value (" + this.jobLevel + ") on element jobLevel.");
        }
        this.buffer.writeByte(this.jobLevel);
        if (this.jobXP < 0 || this.jobXP > 9007199254740990) {
            throw new Error("Forbidden value (" + this.jobXP + ") on element jobXP.");
        }
        this.buffer.writeVarLong(this.jobXP);
        if (this.jobXpLevelFloor < 0 || this.jobXpLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.jobXpLevelFloor + ") on element jobXpLevelFloor.");
        }
        this.buffer.writeVarLong(this.jobXpLevelFloor);
        if (this.jobXpNextLevelFloor < 0 || this.jobXpNextLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.jobXpNextLevelFloor + ") on element jobXpNextLevelFloor.");
        }
        this.buffer.writeVarLong(this.jobXpNextLevelFloor);
    }

    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element of JobExperience.jobId.");
        }
        this.jobLevel = buffer.readUnsignedByte();
        if (this.jobLevel < 0 || this.jobLevel > 255) {
            throw new Error("Forbidden value (" + this.jobLevel + ") on element of JobExperience.jobLevel.");
        };
        this.jobXP = buffer.readVarUhLong();
        if (this.jobXP < 0 || this.jobXP > 9007199254740990) {
            throw new Error("Forbidden value (" + this.jobXP + ") on element of JobExperience.jobXP.");
        };
        this.jobXpLevelFloor = buffer.readVarUhLong();
        if (this.jobXpLevelFloor < 0 || this.jobXpLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.jobXpLevelFloor + ") on element of JobExperience.jobXpLevelFloor.");
        };
        this.jobXpNextLevelFloor = buffer.readVarUhLong();
        if (this.jobXpNextLevelFloor < 0 || this.jobXpNextLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.jobXpNextLevelFloor + ") on element of JobExperience.jobXpNextLevelFloor.");
        };
    }
};
module.exports.JobExperience = JobExperience;
module.exports.types[98] = JobExperience;

class MonsterBoosts extends ProtocolType {
    constructor(id, xpBoost, dropBoost) {
        super();
        this.id = id;
        this.xpBoost = xpBoost;
        this.dropBoost = dropBoost;
        this.messageId = 497;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarInt(this.id);
        if (this.xpBoost < 0) {
            throw new Error("Forbidden value (" + this.xpBoost + ") on element xpBoost.");
        }
        this.buffer.writeVarShort(this.xpBoost);
        if (this.dropBoost < 0) {
            throw new Error("Forbidden value (" + this.dropBoost + ") on element dropBoost.");
        }
        this.buffer.writeVarShort(this.dropBoost);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhInt();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of MonsterBoosts.id.");
        }
        this.xpBoost = buffer.readVarUhShort();
        if (this.xpBoost < 0) {
            throw new Error("Forbidden value (" + this.xpBoost + ") on element of MonsterBoosts.xpBoost.");
        };
        this.dropBoost = buffer.readVarUhShort();
        if (this.dropBoost < 0) {
            throw new Error("Forbidden value (" + this.dropBoost + ") on element of MonsterBoosts.dropBoost.");
        };
    }
};
module.exports.MonsterBoosts = MonsterBoosts;
module.exports.types[497] = MonsterBoosts;

class MonsterInGroupLightInformations extends ProtocolType {
    constructor(creatureGenericId, grade) {
        super();
        this.creatureGenericId = creatureGenericId;
        this.grade = grade;
        this.messageId = 395;
    }

    serialize() {
        this.buffer.writeInt(this.creatureGenericId);
        if (this.grade < 0) {
            throw new Error("Forbidden value (" + this.grade + ") on element grade.");
        }
        this.buffer.writeByte(this.grade);
    }

    deserialize(buffer) {
        this.creatureGenericId = buffer.readInt();
        this.grade = buffer.readByte();
        if (this.grade < 0) {
            throw new Error("Forbidden value (" + this.grade + ") on element of MonsterInGroupLightInformations.grade.");
        }
    }
};
module.exports.MonsterInGroupLightInformations = MonsterInGroupLightInformations;
module.exports.types[395] = MonsterInGroupLightInformations;

class MonsterInGroupInformations extends MonsterInGroupLightInformations {
    constructor(creatureGenericId, grade, look) {
        super(creatureGenericId, grade);
        this.look = look;
        this.messageId = 144;
    }

    serialize() {
        super.serialize();
        this.look.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.look = new EntityLook();
        this.look.deserialize(buffer);
    }
};
module.exports.MonsterInGroupInformations = MonsterInGroupInformations;
module.exports.types[144] = MonsterInGroupInformations;

class ObjectItemInRolePlay extends ProtocolType {
    constructor(cellId, objectGID) {
        super();
        this.cellId = cellId;
        this.objectGID = objectGID;
        this.messageId = 198;
    }

    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
    }

    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of ObjectItemInRolePlay.cellId.");
        }
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemInRolePlay.objectGID.");
        };
    }
};
module.exports.ObjectItemInRolePlay = ObjectItemInRolePlay;
module.exports.types[198] = ObjectItemInRolePlay;

class PartyCompanionBaseInformations extends ProtocolType {
    constructor(indexId, companionGenericId, entityLook) {
        super();
        this.indexId = indexId;
        this.companionGenericId = companionGenericId;
        this.entityLook = entityLook;
        this.messageId = 453;
    }

    serialize() {
        if (this.indexId < 0) {
            throw new Error("Forbidden value (" + this.indexId + ") on element indexId.");
        }
        this.buffer.writeByte(this.indexId);
        if (this.companionGenericId < 0) {
            throw new Error("Forbidden value (" + this.companionGenericId + ") on element companionGenericId.");
        }
        this.buffer.writeByte(this.companionGenericId);
        this.entityLook.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.indexId = buffer.readByte();
        if (this.indexId < 0) {
            throw new Error("Forbidden value (" + this.indexId + ") on element of PartyCompanionBaseInformations.indexId.");
        }
        this.companionGenericId = buffer.readByte();
        if (this.companionGenericId < 0) {
            throw new Error("Forbidden value (" + this.companionGenericId + ") on element of PartyCompanionBaseInformations.companionGenericId.");
        };
        this.entityLook = new EntityLook();
        this.entityLook.deserialize(buffer);
    }
};
module.exports.PartyCompanionBaseInformations = PartyCompanionBaseInformations;
module.exports.types[453] = PartyCompanionBaseInformations;

class PartyCompanionMemberInformations extends PartyCompanionBaseInformations {
    constructor(indexId, companionGenericId, entityLook, initiative, lifePoints, maxLifePoints, prospecting, regenRate) {
        super(indexId, companionGenericId, entityLook);
        this.initiative = initiative;
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
        this.prospecting = prospecting;
        this.regenRate = regenRate;
        this.messageId = 452;
    }

    serialize() {
        super.serialize();
        if (this.initiative < 0) {
            throw new Error("Forbidden value (" + this.initiative + ") on element initiative.");
        }
        this.buffer.writeVarShort(this.initiative);
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        this.buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        this.buffer.writeVarInt(this.maxLifePoints);
        if (this.prospecting < 0) {
            throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
        }
        this.buffer.writeVarShort(this.prospecting);
        if (this.regenRate < 0 || this.regenRate > 255) {
            throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
        }
        this.buffer.writeByte(this.regenRate);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.initiative = buffer.readVarUhShort();
        if (this.initiative < 0) {
            throw new Error("Forbidden value (" + this.initiative + ") on element of PartyCompanionMemberInformations.initiative.");
        }
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element of PartyCompanionMemberInformations.lifePoints.");
        };
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of PartyCompanionMemberInformations.maxLifePoints.");
        };
        this.prospecting = buffer.readVarUhShort();
        if (this.prospecting < 0) {
            throw new Error("Forbidden value (" + this.prospecting + ") on element of PartyCompanionMemberInformations.prospecting.");
        };
        this.regenRate = buffer.readUnsignedByte();
        if (this.regenRate < 0 || this.regenRate > 255) {
            throw new Error("Forbidden value (" + this.regenRate + ") on element of PartyCompanionMemberInformations.regenRate.");
        };
    }
};
module.exports.PartyCompanionMemberInformations = PartyCompanionMemberInformations;
module.exports.types[452] = PartyCompanionMemberInformations;

class DungeonPartyFinderPlayer extends ProtocolType {
    constructor(playerId, playerName, breed, sex, level) {
        super();
        this.playerId = playerId;
        this.playerName = playerName;
        this.breed = breed;
        this.sex = sex;
        this.level = level;
        this.messageId = 373;
    }

    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeUTF(this.playerName);
        this.buffer.writeByte(this.breed);
        this.buffer.writeBoolean(this.sex);
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
    }

    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of DungeonPartyFinderPlayer.playerId.");
        }
        this.playerName = buffer.readUTF();
        this.breed = buffer.readByte();
        if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
            throw new Error("Forbidden value (" + this.breed + ") on element of DungeonPartyFinderPlayer.breed.");
        };
        this.sex = buffer.readBoolean();;
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element of DungeonPartyFinderPlayer.level.");
        };
    }
};
module.exports.DungeonPartyFinderPlayer = DungeonPartyFinderPlayer;
module.exports.types[373] = DungeonPartyFinderPlayer;

class NamedPartyTeam extends ProtocolType {
    constructor(teamId, partyName) {
        super();
        this.teamId = teamId;
        this.partyName = partyName;
        this.messageId = 469;
    }

    serialize() {
        this.buffer.writeByte(this.teamId);
        this.buffer.writeUTF(this.partyName);
    }

    deserialize(buffer) {
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            throw new Error("Forbidden value (" + this.teamId + ") on element of NamedPartyTeam.teamId.");
        }
        this.partyName = buffer.readUTF();
    }
};
module.exports.NamedPartyTeam = NamedPartyTeam;
module.exports.types[469] = NamedPartyTeam;

class NamedPartyTeamWithOutcome extends ProtocolType {
    constructor(team, outcome) {
        super();
        this.team = team;
        this.outcome = outcome;
        this.messageId = 470;
    }

    serialize() {
        this.team.serialize(this.buffer);
        this.buffer.writeVarShort(this.outcome);
    }

    deserialize(buffer) {
        this.team = new NamedPartyTeam();
        this.team.deserialize(buffer);
        this.outcome = buffer.readVarUhShort();
        if (this.outcome < 0) {
            throw new Error("Forbidden value (" + this.outcome + ") on element of NamedPartyTeamWithOutcome.outcome.");
        }
    }
};
module.exports.NamedPartyTeamWithOutcome = NamedPartyTeamWithOutcome;
module.exports.types[470] = NamedPartyTeamWithOutcome;

class PartyGuestInformations extends ProtocolType {
    constructor(guestId, hostId, name, guestLook, breed, sex, status, companions) {
        super();
        this.guestId = guestId;
        this.hostId = hostId;
        this.name = name;
        this.guestLook = guestLook;
        this.breed = breed;
        this.sex = sex;
        this.status = status;
        this.companions = companions;
        this.messageId = 374;
    }

    serialize() {
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
        if (this.hostId < 0 || this.hostId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.hostId + ") on element hostId.");
        }
        this.buffer.writeVarLong(this.hostId);
        this.buffer.writeUTF(this.name);
        this.guestLook.serialize(this.buffer);
        this.buffer.writeByte(this.breed);
        this.buffer.writeBoolean(this.sex);
        this.buffer.writeShort(this.status.getTypeId());
        this.status.serialize(this.buffer);
        this.buffer.writeShort(this.companions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.companions.length) {
            (this.companions[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc5_ = null;
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element of PartyGuestInformations.guestId.");
        }
        this.hostId = buffer.readVarUhLong();
        if (this.hostId < 0 || this.hostId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.hostId + ") on element of PartyGuestInformations.hostId.");
        };
        this.name = buffer.readUTF();
        this.guestLook = new EntityLook();
        this.guestLook.deserialize(buffer);
        this.breed = buffer.readByte();;
        this.sex = buffer.readBoolean();;
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = new PartyCompanionBaseInformations();
            _loc5_.deserialize(buffer);
            this.companions.push(_loc5_);
            _loc4_++;
        }
    }
};
module.exports.PartyGuestInformations = PartyGuestInformations;
module.exports.types[374] = PartyGuestInformations;

class PartyInvitationMemberInformations extends CharacterBaseInformations {
    constructor(param1, param2, param3, entityLook, breed, sex, worldX, worldY, mapId, subAreaId, companions) {
        super(param1, param2, level, entityLook, breed, sex);
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.companions = companions;
        this.messageId = 376;
    }

    serialize() {
        super.serialize();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeShort(this.companions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.companions.length) {
            (this.companions[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of PartyInvitationMemberInformations.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of PartyInvitationMemberInformations.worldY.");
        };
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PartyInvitationMemberInformations.subAreaId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PartyCompanionBaseInformations();
            _loc4_.deserialize(buffer);
            this.companions.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.PartyInvitationMemberInformations = PartyInvitationMemberInformations;
module.exports.types[376] = PartyInvitationMemberInformations;

class PartyMemberInformations extends CharacterBaseInformations {
    constructor(param1, param2, param3, entityLook, breed, sex, lifePoints, maxLifePoints, prospecting, regenRate, initiative, alignmentSide, worldX, worldY, mapId, subAreaId, status, companions) {
        super(param1, param2, level, entityLook, breed, sex);
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
        this.prospecting = prospecting;
        this.regenRate = regenRate;
        this.initiative = initiative;
        this.alignmentSide = alignmentSide;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.status = status;
        this.companions = companions;
        this.messageId = 90;
    }

    serialize() {
        super.serialize();
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        this.buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        this.buffer.writeVarInt(this.maxLifePoints);
        if (this.prospecting < 0) {
            throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
        }
        this.buffer.writeVarShort(this.prospecting);
        if (this.regenRate < 0 || this.regenRate > 255) {
            throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
        }
        this.buffer.writeByte(this.regenRate);
        if (this.initiative < 0) {
            throw new Error("Forbidden value (" + this.initiative + ") on element initiative.");
        }
        this.buffer.writeVarShort(this.initiative);
        this.buffer.writeByte(this.alignmentSide);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeShort(this.status.getTypeId());
        this.status.serialize(this.buffer);
        this.buffer.writeShort(this.companions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.companions.length) {
            (this.companions[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc5_ = null;
        super.deserialize(buffer);
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element of PartyMemberInformations.lifePoints.");
        }
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of PartyMemberInformations.maxLifePoints.");
        };
        this.prospecting = buffer.readVarUhShort();
        if (this.prospecting < 0) {
            throw new Error("Forbidden value (" + this.prospecting + ") on element of PartyMemberInformations.prospecting.");
        };
        this.regenRate = buffer.readUnsignedByte();
        if (this.regenRate < 0 || this.regenRate > 255) {
            throw new Error("Forbidden value (" + this.regenRate + ") on element of PartyMemberInformations.regenRate.");
        };
        this.initiative = buffer.readVarUhShort();
        if (this.initiative < 0) {
            throw new Error("Forbidden value (" + this.initiative + ") on element of PartyMemberInformations.initiative.");
        };
        this.alignmentSide = buffer.readByte();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of PartyMemberInformations.worldX.");
        };
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of PartyMemberInformations.worldY.");
        };
        this.mapId = buffer.readInt();;
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PartyMemberInformations.subAreaId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = new PartyCompanionMemberInformations();
            _loc5_.deserialize(buffer);
            this.companions.push(_loc5_);
            _loc4_++;
        }
    }
};
module.exports.PartyMemberInformations = PartyMemberInformations;
module.exports.types[90] = PartyMemberInformations;

class PartyMemberArenaInformations extends PartyMemberInformations {
    constructor(param1, param2, param3, param4, breed, sex, lifePoints, maxLifePoints, prospecting, regenRate, initiative, alignmentSide, worldX, worldY, mapId, subAreaId, status, companions, rank) {
        super(param1, param2, param3, entityLook, breed, sex, lifePoints, maxLifePoints, prospecting, regenRate, initiative, alignmentSide, worldX, worldY, mapId, subAreaId, status, companions);
        this.rank = rank;
        this.messageId = 391;
    }

    serialize() {
        super.serialize();
        if (this.rank < 0 || this.rank > 20000) {
            throw new Error("Forbidden value (" + this.rank + ") on element rank.");
        }
        this.buffer.writeVarShort(this.rank);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.rank = buffer.readVarUhShort();
        if (this.rank < 0 || this.rank > 20000) {
            throw new Error("Forbidden value (" + this.rank + ") on element of PartyMemberArenaInformations.rank.");
        }
    }
};
module.exports.PartyMemberArenaInformations = PartyMemberArenaInformations;
module.exports.types[391] = PartyMemberArenaInformations;

class PartyMemberGeoPosition extends ProtocolType {
    constructor(memberId, worldX, worldY, mapId, subAreaId) {
        super();
        this.memberId = memberId;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.messageId = 378;
    }

    serialize() {
        if (this.memberId < 0) {
            throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeInt(this.memberId);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
    }

    deserialize(buffer) {
        this.memberId = buffer.readInt();
        if (this.memberId < 0) {
            throw new Error("Forbidden value (" + this.memberId + ") on element of PartyMemberGeoPosition.memberId.");
        }
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of PartyMemberGeoPosition.worldX.");
        };
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of PartyMemberGeoPosition.worldY.");
        };
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PartyMemberGeoPosition.subAreaId.");
        };
    }
};
module.exports.PartyMemberGeoPosition = PartyMemberGeoPosition;
module.exports.types[378] = PartyMemberGeoPosition;

class GameRolePlayNpcQuestFlag extends ProtocolType {
    constructor(questsToValidId, questsToStartId) {
        super();
        this.questsToValidId = questsToValidId;
        this.questsToStartId = questsToStartId;
        this.messageId = 384;
    }

    serialize() {
        this.buffer.writeShort(this.questsToValidId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.questsToValidId.length) {
            if (this.questsToValidId[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.questsToValidId[_loc2_] + ") on element 1 (starting at 1) of questsToValidId.");
            }
            this.buffer.writeVarShort(this.questsToValidId[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.questsToStartId.length);
        var _loc3_ = 0;
        while (_loc3_ < this.questsToStartId.length) {
            if (this.questsToStartId[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.questsToStartId[_loc3_] + ") on element 2 (starting at 1) of questsToStartId.");
            }
            this.buffer.writeVarShort(this.questsToStartId[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of questsToValidId.");
            }
            this.questsToValidId.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of questsToStartId.");
            }
            this.questsToStartId.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.GameRolePlayNpcQuestFlag = GameRolePlayNpcQuestFlag;
module.exports.types[384] = GameRolePlayNpcQuestFlag;

class QuestActiveInformations extends ProtocolType {
    constructor(questId) {
        super();
        this.questId = questId;
        this.messageId = 381;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of QuestActiveInformations.questId.");
        }
    }
};
module.exports.QuestActiveInformations = QuestActiveInformations;
module.exports.types[381] = QuestActiveInformations;

class QuestActiveDetailedInformations extends QuestActiveInformations {
    constructor(questId, stepId, objectives) {
        super(questId);
        this.stepId = stepId;
        this.objectives = objectives;
        this.messageId = 382;
    }

    serialize() {
        super.serialize();
        if (this.stepId < 0) {
            throw new Error("Forbidden value (" + this.stepId + ") on element stepId.");
        }
        this.buffer.writeVarShort(this.stepId);
        this.buffer.writeShort(this.objectives.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectives.length) {
            this.buffer.writeShort((this.objectives[_loc2_]).getTypeId());
            (this.objectives[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.stepId = buffer.readVarUhShort();
        if (this.stepId < 0) {
            throw new Error("Forbidden value (" + this.stepId + ") on element of QuestActiveDetailedInformations.stepId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(QuestObjectiveInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.objectives.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.QuestActiveDetailedInformations = QuestActiveDetailedInformations;
module.exports.types[382] = QuestActiveDetailedInformations;

class QuestObjectiveInformations extends ProtocolType {
    constructor(objectiveId, objectiveStatus, dialogParams) {
        super();
        this.objectiveId = objectiveId;
        this.objectiveStatus = objectiveStatus;
        this.dialogParams = dialogParams;
        this.messageId = 385;
    }

    serialize() {
        if (this.objectiveId < 0) {
            throw new Error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
        }
        this.buffer.writeVarShort(this.objectiveId);
        this.buffer.writeBoolean(this.objectiveStatus);
        this.buffer.writeShort(this.dialogParams.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dialogParams.length) {
            this.buffer.writeUTF(this.dialogParams[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.objectiveId = buffer.readVarUhShort();
        if (this.objectiveId < 0) {
            throw new Error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveInformations.objectiveId.");
        }
        this.objectiveStatus = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.dialogParams.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.QuestObjectiveInformations = QuestObjectiveInformations;
module.exports.types[385] = QuestObjectiveInformations;

class QuestObjectiveInformationsWithCompletion extends QuestObjectiveInformations {
    constructor(objectiveId, objectiveStatus, dialogParams, curCompletion, maxCompletion) {
        super(objectiveId, objectiveStatus, dialogParams);
        this.curCompletion = curCompletion;
        this.maxCompletion = maxCompletion;
        this.messageId = 386;
    }

    serialize() {
        super.serialize();
        if (this.curCompletion < 0) {
            throw new Error("Forbidden value (" + this.curCompletion + ") on element curCompletion.");
        }
        this.buffer.writeVarShort(this.curCompletion);
        if (this.maxCompletion < 0) {
            throw new Error("Forbidden value (" + this.maxCompletion + ") on element maxCompletion.");
        }
        this.buffer.writeVarShort(this.maxCompletion);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.curCompletion = buffer.readVarUhShort();
        if (this.curCompletion < 0) {
            throw new Error("Forbidden value (" + this.curCompletion + ") on element of QuestObjectiveInformationsWithCompletion.curCompletion.");
        }
        this.maxCompletion = buffer.readVarUhShort();
        if (this.maxCompletion < 0) {
            throw new Error("Forbidden value (" + this.maxCompletion + ") on element of QuestObjectiveInformationsWithCompletion.maxCompletion.");
        };
    }
};
module.exports.QuestObjectiveInformationsWithCompletion = QuestObjectiveInformationsWithCompletion;
module.exports.types[386] = QuestObjectiveInformationsWithCompletion;

class PortalInformation extends ProtocolType {
    constructor(portalId, areaId) {
        super();
        this.portalId = portalId;
        this.areaId = areaId;
        this.messageId = 466;
    }

    serialize() {
        this.buffer.writeInt(this.portalId);
        this.buffer.writeShort(this.areaId);
    }

    deserialize(buffer) {
        this.portalId = buffer.readInt();
        this.areaId = buffer.readShort();;
    }
};
module.exports.PortalInformation = PortalInformation;
module.exports.types[466] = PortalInformation;

class TreasureHuntFlag extends ProtocolType {
    constructor(mapId, state) {
        super();
        this.mapId = mapId;
        this.state = state;
        this.messageId = 473;
    }

    serialize() {
        this.buffer.writeInt(this.mapId);
        this.buffer.writeByte(this.state);
    }

    deserialize(buffer) {
        this.mapId = buffer.readInt();
        this.state = buffer.readByte();
        if (this.state < 0) {
            throw new Error("Forbidden value (" + this.state + ") on element of TreasureHuntFlag.state.");
        }
    }
};
module.exports.TreasureHuntFlag = TreasureHuntFlag;
module.exports.types[473] = TreasureHuntFlag;

class TreasureHuntStep extends ProtocolType {
    constructor() {
        super();
        this.messageId = 463;
    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.TreasureHuntStep = TreasureHuntStep;
module.exports.types[463] = TreasureHuntStep;

class TreasureHuntStepDig extends TreasureHuntStep {
    constructor() {
        super();
        this.messageId = 465;
    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.TreasureHuntStepDig = TreasureHuntStepDig;
module.exports.types[465] = TreasureHuntStepDig;

class TreasureHuntStepFight extends TreasureHuntStep {
    constructor() {
        super();
        this.messageId = 462;
    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.TreasureHuntStepFight = TreasureHuntStepFight;
module.exports.types[462] = TreasureHuntStepFight;

class TreasureHuntStepFollowDirection extends TreasureHuntStep {
    constructor(direction, mapCount) {
        super();
        this.direction = direction;
        this.mapCount = mapCount;
        this.messageId = 468;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.direction);
        if (this.mapCount < 0) {
            throw new Error("Forbidden value (" + this.mapCount + ") on element mapCount.");
        }
        this.buffer.writeVarShort(this.mapCount);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            throw new Error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirection.direction.");
        }
        this.mapCount = buffer.readVarUhShort();
        if (this.mapCount < 0) {
            throw new Error("Forbidden value (" + this.mapCount + ") on element of TreasureHuntStepFollowDirection.mapCount.");
        };
    }
};
module.exports.TreasureHuntStepFollowDirection = TreasureHuntStepFollowDirection;
module.exports.types[468] = TreasureHuntStepFollowDirection;

class TreasureHuntStepFollowDirectionToHint extends TreasureHuntStep {
    constructor(direction, npcId) {
        super();
        this.direction = direction;
        this.npcId = npcId;
        this.messageId = 472;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.direction);
        if (this.npcId < 0) {
            throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
        }
        this.buffer.writeVarShort(this.npcId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            throw new Error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirectionToHint.direction.");
        }
        this.npcId = buffer.readVarUhShort();
        if (this.npcId < 0) {
            throw new Error("Forbidden value (" + this.npcId + ") on element of TreasureHuntStepFollowDirectionToHint.npcId.");
        };
    }
};
module.exports.TreasureHuntStepFollowDirectionToHint = TreasureHuntStepFollowDirectionToHint;
module.exports.types[472] = TreasureHuntStepFollowDirectionToHint;

class TreasureHuntStepFollowDirectionToPOI extends TreasureHuntStep {
    constructor(direction, poiLabelId) {
        super();
        this.direction = direction;
        this.poiLabelId = poiLabelId;
        this.messageId = 461;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.direction);
        if (this.poiLabelId < 0) {
            throw new Error("Forbidden value (" + this.poiLabelId + ") on element poiLabelId.");
        }
        this.buffer.writeVarShort(this.poiLabelId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            throw new Error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirectionToPOI.direction.");
        }
        this.poiLabelId = buffer.readVarUhShort();
        if (this.poiLabelId < 0) {
            throw new Error("Forbidden value (" + this.poiLabelId + ") on element of TreasureHuntStepFollowDirectionToPOI.poiLabelId.");
        };
    }
};
module.exports.TreasureHuntStepFollowDirectionToPOI = TreasureHuntStepFollowDirectionToPOI;
module.exports.types[461] = TreasureHuntStepFollowDirectionToPOI;

class TaxCollectorStaticInformations extends ProtocolType {
    constructor(firstNameId, lastNameId, guildIdentity) {
        super();
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.guildIdentity = guildIdentity;
        this.messageId = 147;
    }

    serialize() {
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        this.buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        this.buffer.writeVarShort(this.lastNameId);
        this.guildIdentity.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorStaticInformations.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorStaticInformations.lastNameId.");
        };
        this.guildIdentity = new GuildInformations();
        this.guildIdentity.deserialize(buffer);
    }
};
module.exports.TaxCollectorStaticInformations = TaxCollectorStaticInformations;
module.exports.types[147] = TaxCollectorStaticInformations;

class TaxCollectorStaticExtendedInformations extends TaxCollectorStaticInformations {
    constructor(firstNameId, lastNameId, guildIdentity, allianceIdentity) {
        super(firstNameId, lastNameId, guildIdentity);
        this.allianceIdentity = allianceIdentity;
        this.messageId = 440;
    }

    serialize() {
        super.serialize();
        this.allianceIdentity.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceIdentity = new AllianceInformations();
        this.allianceIdentity.deserialize(buffer);
    }
};
module.exports.TaxCollectorStaticExtendedInformations = TaxCollectorStaticExtendedInformations;
module.exports.types[440] = TaxCollectorStaticExtendedInformations;

class DareCriteria extends ProtocolType {
    constructor(type, params) {
        super();
        this.type = type;
        this.params = params;
        this.messageId = 501;
    }

    serialize() {
        this.buffer.writeByte(this.type);
        this.buffer.writeShort(this.params.length);
        var _loc2_ = 0;
        while (_loc2_ < this.params.length) {
            this.buffer.writeInt(this.params[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of DareCriteria.type.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.params.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DareCriteria = DareCriteria;
module.exports.types[501] = DareCriteria;

class DareInformations extends ProtocolType {
    constructor(dareId, creator, subscriptionFee, jackpot, maxCountWinners, endDate, isPrivate, guildId, allianceId, criterions, startDate) {
        super();
        this.dareId = dareId;
        this.creator = creator;
        this.subscriptionFee = subscriptionFee;
        this.jackpot = jackpot;
        this.maxCountWinners = maxCountWinners;
        this.endDate = endDate;
        this.isPrivate = isPrivate;
        this.guildId = guildId;
        this.allianceId = allianceId;
        this.criterions = criterions;
        this.startDate = startDate;
        this.messageId = 502;
    }

    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
        this.creator.serialize(this.buffer);
        if (this.subscriptionFee < 0 || this.subscriptionFee > 9007199254740990) {
            throw new Error("Forbidden value (" + this.subscriptionFee + ") on element subscriptionFee.");
        }
        this.buffer.writeVarLong(this.subscriptionFee);
        if (this.jackpot < 0 || this.jackpot > 9007199254740990) {
            throw new Error("Forbidden value (" + this.jackpot + ") on element jackpot.");
        }
        this.buffer.writeVarLong(this.jackpot);
        if (this.maxCountWinners < 0 || this.maxCountWinners > 65535) {
            throw new Error("Forbidden value (" + this.maxCountWinners + ") on element maxCountWinners.");
        }
        this.buffer.writeShort(this.maxCountWinners);
        if (this.endDate < 0 || this.endDate > 9007199254740990) {
            throw new Error("Forbidden value (" + this.endDate + ") on element endDate.");
        }
        this.buffer.writeDouble(this.endDate);
        this.buffer.writeBoolean(this.isPrivate);
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        this.buffer.writeVarInt(this.allianceId);
        this.buffer.writeShort(this.criterions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.criterions.length) {
            (this.criterions[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.startDate < 0 || this.startDate > 9007199254740990) {
            throw new Error("Forbidden value (" + this.startDate + ") on element startDate.");
        }
        this.buffer.writeDouble(this.startDate);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareInformations.dareId.");
        }
        this.creator = new CharacterBasicMinimalInformations();
        this.creator.deserialize(buffer);
        this.subscriptionFee = buffer.readVarUhLong();
        if (this.subscriptionFee < 0 || this.subscriptionFee > 9007199254740990) {
            throw new Error("Forbidden value (" + this.subscriptionFee + ") on element of DareInformations.subscriptionFee.");
        };
        this.jackpot = buffer.readVarUhLong();
        if (this.jackpot < 0 || this.jackpot > 9007199254740990) {
            throw new Error("Forbidden value (" + this.jackpot + ") on element of DareInformations.jackpot.");
        };
        this.maxCountWinners = buffer.readUnsignedShort();
        if (this.maxCountWinners < 0 || this.maxCountWinners > 65535) {
            throw new Error("Forbidden value (" + this.maxCountWinners + ") on element of DareInformations.maxCountWinners.");
        };
        this.endDate = buffer.readDouble();
        if (this.endDate < 0 || this.endDate > 9007199254740990) {
            throw new Error("Forbidden value (" + this.endDate + ") on element of DareInformations.endDate.");
        };
        this.isPrivate = buffer.readBoolean();
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element of DareInformations.guildId.");
        };
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element of DareInformations.allianceId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DareCriteria();
            _loc4_.deserialize(buffer);
            this.criterions.push(_loc4_);
            _loc3_++;
        }
        this._startDateFunc(buffer);
    }
};
module.exports.DareInformations = DareInformations;
module.exports.types[502] = DareInformations;

class DareReward extends ProtocolType {
    constructor(type, monsterId, kamas, dareId) {
        super();
        this.type = type;
        this.monsterId = monsterId;
        this.kamas = kamas;
        this.dareId = dareId;
        this.messageId = 505;
    }

    serialize() {
        this.buffer.writeByte(this.type);
        if (this.monsterId < 0) {
            throw new Error("Forbidden value (" + this.monsterId + ") on element monsterId.");
        }
        this.buffer.writeVarShort(this.monsterId);
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        this.buffer.writeVarLong(this.kamas);
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
    }

    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of DareReward.type.");
        }
        this.monsterId = buffer.readVarUhShort();
        if (this.monsterId < 0) {
            throw new Error("Forbidden value (" + this.monsterId + ") on element of DareReward.monsterId.");
        };
        this.kamas = buffer.readVarUhLong();
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element of DareReward.kamas.");
        };
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareReward.dareId.");
        };
    }
};
module.exports.DareReward = DareReward;
module.exports.types[505] = DareReward;

class DareVersatileInformations extends ProtocolType {
    constructor(dareId, countEntrants, countWinners) {
        super();
        this.dareId = dareId;
        this.countEntrants = countEntrants;
        this.countWinners = countWinners;
        this.messageId = 504;
    }

    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
        if (this.countEntrants < 0) {
            throw new Error("Forbidden value (" + this.countEntrants + ") on element countEntrants.");
        }
        this.buffer.writeInt(this.countEntrants);
        if (this.countWinners < 0) {
            throw new Error("Forbidden value (" + this.countWinners + ") on element countWinners.");
        }
        this.buffer.writeInt(this.countWinners);
    }

    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareVersatileInformations.dareId.");
        }
        this.countEntrants = buffer.readInt();
        if (this.countEntrants < 0) {
            throw new Error("Forbidden value (" + this.countEntrants + ") on element of DareVersatileInformations.countEntrants.");
        };
        this.countWinners = buffer.readInt();
        if (this.countWinners < 0) {
            throw new Error("Forbidden value (" + this.countWinners + ") on element of DareVersatileInformations.countWinners.");
        };
    }
};
module.exports.DareVersatileInformations = DareVersatileInformations;
module.exports.types[504] = DareVersatileInformations;

class BidExchangerObjectInfo extends ProtocolType {
    constructor(objectUID, effects, prices) {
        super();
        this.objectUID = objectUID;
        this.effects = effects;
        this.prices = prices;
        this.messageId = 122;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        this.buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.buffer.writeShort((this.effects[_loc2_]).getTypeId());
            (this.effects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.prices.length);
        var _loc3_ = 0;
        while (_loc3_ < this.prices.length) {
            if (this.prices[_loc3_] < 0 || this.prices[_loc3_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.prices[_loc3_] + ") on element 3 (starting at 1) of prices.");
            }
            this.buffer.writeVarLong(this.prices[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = NaN;
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of BidExchangerObjectInfo.objectUID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc6_);
            _loc7_.deserialize(buffer);
            this.effects.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readVarUhLong();
            if (_loc8_ < 0 || _loc8_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc8_ + ") on elements of prices.");
            }
            this.prices.push(_loc8_);
            _loc5_++;
        }
    }
};
module.exports.BidExchangerObjectInfo = BidExchangerObjectInfo;
module.exports.types[122] = BidExchangerObjectInfo;

class ObjectEffect extends ProtocolType {
    constructor(actionId) {
        super();
        this.actionId = actionId;
        this.messageId = 76;
    }

    serialize() {
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        this.buffer.writeVarShort(this.actionId);
    }

    deserialize(buffer) {
        this.actionId = buffer.readVarUhShort();
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element of ObjectEffect.actionId.");
        }
    }
};
module.exports.ObjectEffect = ObjectEffect;
module.exports.types[76] = ObjectEffect;

class ObjectEffectCreature extends ObjectEffect {
    constructor(actionId, monsterFamilyId) {
        super(actionId);
        this.monsterFamilyId = monsterFamilyId;
        this.messageId = 71;
    }

    serialize() {
        super.serialize();
        if (this.monsterFamilyId < 0) {
            throw new Error("Forbidden value (" + this.monsterFamilyId + ") on element monsterFamilyId.");
        }
        this.buffer.writeVarShort(this.monsterFamilyId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.monsterFamilyId = buffer.readVarUhShort();
        if (this.monsterFamilyId < 0) {
            throw new Error("Forbidden value (" + this.monsterFamilyId + ") on element of ObjectEffectCreature.monsterFamilyId.");
        }
    }
};
module.exports.ObjectEffectCreature = ObjectEffectCreature;
module.exports.types[71] = ObjectEffectCreature;

class ObjectEffectDate extends ObjectEffect {
    constructor(actionId, year, month, day, hour, minute) {
        super(actionId);
        this.year = year;
        this.month = month;
        this.day = day;
        this.hour = hour;
        this.minute = minute;
        this.messageId = 72;
    }

    serialize() {
        super.serialize();
        if (this.year < 0) {
            throw new Error("Forbidden value (" + this.year + ") on element year.");
        }
        this.buffer.writeVarShort(this.year);
        if (this.month < 0) {
            throw new Error("Forbidden value (" + this.month + ") on element month.");
        }
        this.buffer.writeByte(this.month);
        if (this.day < 0) {
            throw new Error("Forbidden value (" + this.day + ") on element day.");
        }
        this.buffer.writeByte(this.day);
        if (this.hour < 0) {
            throw new Error("Forbidden value (" + this.hour + ") on element hour.");
        }
        this.buffer.writeByte(this.hour);
        if (this.minute < 0) {
            throw new Error("Forbidden value (" + this.minute + ") on element minute.");
        }
        this.buffer.writeByte(this.minute);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.year = buffer.readVarUhShort();
        if (this.year < 0) {
            throw new Error("Forbidden value (" + this.year + ") on element of ObjectEffectDate.year.");
        }
        this.month = buffer.readByte();
        if (this.month < 0) {
            throw new Error("Forbidden value (" + this.month + ") on element of ObjectEffectDate.month.");
        };
        this.day = buffer.readByte();
        if (this.day < 0) {
            throw new Error("Forbidden value (" + this.day + ") on element of ObjectEffectDate.day.");
        };
        this.hour = buffer.readByte();
        if (this.hour < 0) {
            throw new Error("Forbidden value (" + this.hour + ") on element of ObjectEffectDate.hour.");
        };
        this.minute = buffer.readByte();
        if (this.minute < 0) {
            throw new Error("Forbidden value (" + this.minute + ") on element of ObjectEffectDate.minute.");
        };
    }
};
module.exports.ObjectEffectDate = ObjectEffectDate;
module.exports.types[72] = ObjectEffectDate;

class ObjectEffectDice extends ObjectEffect {
    constructor(actionId, diceNum, diceSide, diceConst) {
        super(actionId);
        this.diceNum = diceNum;
        this.diceSide = diceSide;
        this.diceConst = diceConst;
        this.messageId = 73;
    }

    serialize() {
        super.serialize();
        if (this.diceNum < 0) {
            throw new Error("Forbidden value (" + this.diceNum + ") on element diceNum.");
        }
        this.buffer.writeVarShort(this.diceNum);
        if (this.diceSide < 0) {
            throw new Error("Forbidden value (" + this.diceSide + ") on element diceSide.");
        }
        this.buffer.writeVarShort(this.diceSide);
        if (this.diceConst < 0) {
            throw new Error("Forbidden value (" + this.diceConst + ") on element diceConst.");
        }
        this.buffer.writeVarShort(this.diceConst);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.diceNum = buffer.readVarUhShort();
        if (this.diceNum < 0) {
            throw new Error("Forbidden value (" + this.diceNum + ") on element of ObjectEffectDice.diceNum.");
        }
        this.diceSide = buffer.readVarUhShort();
        if (this.diceSide < 0) {
            throw new Error("Forbidden value (" + this.diceSide + ") on element of ObjectEffectDice.diceSide.");
        };
        this.diceConst = buffer.readVarUhShort();
        if (this.diceConst < 0) {
            throw new Error("Forbidden value (" + this.diceConst + ") on element of ObjectEffectDice.diceConst.");
        };
    }
};
module.exports.ObjectEffectDice = ObjectEffectDice;
module.exports.types[73] = ObjectEffectDice;

class ObjectEffectDuration extends ObjectEffect {
    constructor(actionId, days, hours, minutes) {
        super(actionId);
        this.days = days;
        this.hours = hours;
        this.minutes = minutes;
        this.messageId = 75;
    }

    serialize() {
        super.serialize();
        if (this.days < 0) {
            throw new Error("Forbidden value (" + this.days + ") on element days.");
        }
        this.buffer.writeVarShort(this.days);
        if (this.hours < 0) {
            throw new Error("Forbidden value (" + this.hours + ") on element hours.");
        }
        this.buffer.writeByte(this.hours);
        if (this.minutes < 0) {
            throw new Error("Forbidden value (" + this.minutes + ") on element minutes.");
        }
        this.buffer.writeByte(this.minutes);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.days = buffer.readVarUhShort();
        if (this.days < 0) {
            throw new Error("Forbidden value (" + this.days + ") on element of ObjectEffectDuration.days.");
        }
        this.hours = buffer.readByte();
        if (this.hours < 0) {
            throw new Error("Forbidden value (" + this.hours + ") on element of ObjectEffectDuration.hours.");
        };
        this.minutes = buffer.readByte();
        if (this.minutes < 0) {
            throw new Error("Forbidden value (" + this.minutes + ") on element of ObjectEffectDuration.minutes.");
        };
    }
};
module.exports.ObjectEffectDuration = ObjectEffectDuration;
module.exports.types[75] = ObjectEffectDuration;

class ObjectEffectInteger extends ObjectEffect {
    constructor(actionId, value) {
        super(actionId);
        this.value = value;
        this.messageId = 70;
    }

    serialize() {
        super.serialize();
        if (this.value < 0) {
            throw new Error("Forbidden value (" + this.value + ") on element value.");
        }
        this.buffer.writeVarShort(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readVarUhShort();
        if (this.value < 0) {
            throw new Error("Forbidden value (" + this.value + ") on element of ObjectEffectInteger.value.");
        }
    }
};
module.exports.ObjectEffectInteger = ObjectEffectInteger;
module.exports.types[70] = ObjectEffectInteger;

class ObjectEffectLadder extends ObjectEffectCreature {
    constructor(actionId, monsterFamilyId, monsterCount) {
        super(actionId, monsterFamilyId);
        this.monsterCount = monsterCount;
        this.messageId = 81;
    }

    serialize() {
        super.serialize();
        if (this.monsterCount < 0) {
            throw new Error("Forbidden value (" + this.monsterCount + ") on element monsterCount.");
        }
        this.buffer.writeVarInt(this.monsterCount);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.monsterCount = buffer.readVarUhInt();
        if (this.monsterCount < 0) {
            throw new Error("Forbidden value (" + this.monsterCount + ") on element of ObjectEffectLadder.monsterCount.");
        }
    }
};
module.exports.ObjectEffectLadder = ObjectEffectLadder;
module.exports.types[81] = ObjectEffectLadder;

class ObjectEffectMinMax extends ObjectEffect {
    constructor(actionId, min, max) {
        super(actionId);
        this.min = min;
        this.max = max;
        this.messageId = 82;
    }

    serialize() {
        super.serialize();
        if (this.min < 0) {
            throw new Error("Forbidden value (" + this.min + ") on element min.");
        }
        this.buffer.writeVarInt(this.min);
        if (this.max < 0) {
            throw new Error("Forbidden value (" + this.max + ") on element max.");
        }
        this.buffer.writeVarInt(this.max);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.min = buffer.readVarUhInt();
        if (this.min < 0) {
            throw new Error("Forbidden value (" + this.min + ") on element of ObjectEffectMinMax.min.");
        }
        this.max = buffer.readVarUhInt();
        if (this.max < 0) {
            throw new Error("Forbidden value (" + this.max + ") on element of ObjectEffectMinMax.max.");
        };
    }
};
module.exports.ObjectEffectMinMax = ObjectEffectMinMax;
module.exports.types[82] = ObjectEffectMinMax;

class ObjectEffectMount extends ObjectEffect {
    constructor(actionId, mountId, date, modelId) {
        super(actionId);
        this.mountId = mountId;
        this.date = date;
        this.modelId = modelId;
        this.messageId = 179;
    }

    serialize() {
        super.serialize();
        if (this.mountId < 0) {
            throw new Error("Forbidden value (" + this.mountId + ") on element mountId.");
        }
        this.buffer.writeInt(this.mountId);
        if (this.date < -9007199254740990 || this.date > 9007199254740990) {
            throw new Error("Forbidden value (" + this.date + ") on element date.");
        }
        this.buffer.writeDouble(this.date);
        if (this.modelId < 0) {
            throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        this.buffer.writeVarShort(this.modelId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.mountId = buffer.readInt();
        if (this.mountId < 0) {
            throw new Error("Forbidden value (" + this.mountId + ") on element of ObjectEffectMount.mountId.");
        }
        this.date = buffer.readDouble();
        if (this.date < -9007199254740990 || this.date > 9007199254740990) {
            throw new Error("Forbidden value (" + this.date + ") on element of ObjectEffectMount.date.");
        };
        this.modelId = buffer.readVarUhShort();
        if (this.modelId < 0) {
            throw new Error("Forbidden value (" + this.modelId + ") on element of ObjectEffectMount.modelId.");
        };
    }
};
module.exports.ObjectEffectMount = ObjectEffectMount;
module.exports.types[179] = ObjectEffectMount;

class ObjectEffectString extends ObjectEffect {
    constructor(actionId, value) {
        super(actionId);
        this.value = value;
        this.messageId = 74;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readUTF();
    }
};
module.exports.ObjectEffectString = ObjectEffectString;
module.exports.types[74] = ObjectEffectString;

class Item extends ProtocolType {
    constructor() {
        super();
        this.messageId = 7;
    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.Item = Item;
module.exports.types[7] = Item;

class GoldItem extends Item {
    constructor(sum) {
        super();
        this.sum = sum;
        this.messageId = 123;
    }

    serialize() {
        super.serialize();
        if (this.sum < 0 || this.sum > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sum + ") on element sum.");
        }
        this.buffer.writeVarLong(this.sum);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.sum = buffer.readVarUhLong();
        if (this.sum < 0 || this.sum > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sum + ") on element of GoldItem.sum.");
        }
    }
};
module.exports.GoldItem = GoldItem;
module.exports.types[123] = GoldItem;

class ObjectItem extends Item {
    constructor(position, objectGID, effects, objectUID, quantity) {
        super();
        this.position = position;
        this.objectGID = objectGID;
        this.effects = effects;
        this.objectUID = objectUID;
        this.quantity = quantity;
        this.messageId = 37;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.position);
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
        this.buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.buffer.writeShort((this.effects[_loc2_]).getTypeId());
            (this.effects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.position = buffer.readUnsignedByte();
        if (this.position < 0 || this.position > 255) {
            throw new Error("Forbidden value (" + this.position + ") on element of ObjectItem.position.");
        }
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItem.objectGID.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
            _loc5_.deserialize(buffer);
            this.effects.push(_loc5_);
            _loc3_++;
        }
        this._objectUIDFunc(buffer);
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItem.quantity.");
        };
    }
};
module.exports.ObjectItem = ObjectItem;
module.exports.types[37] = ObjectItem;

class ObjectItemGenericQuantity extends Item {
    constructor(objectGID, quantity) {
        super();
        this.objectGID = objectGID;
        this.quantity = quantity;
        this.messageId = 483;
    }

    serialize() {
        super.serialize();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemGenericQuantity.objectGID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemGenericQuantity.quantity.");
        };
    }
};
module.exports.ObjectItemGenericQuantity = ObjectItemGenericQuantity;
module.exports.types[483] = ObjectItemGenericQuantity;

class ObjectItemGenericQuantityPrice extends ObjectItemGenericQuantity {
    constructor(objectGID, quantity, price) {
        super(objectGID, quantity);
        this.price = price;
        this.messageId = 494;
    }

    serialize() {
        super.serialize();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarLong(this.price);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.price = buffer.readVarUhLong();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element of ObjectItemGenericQuantityPrice.price.");
        }
    }
};
module.exports.ObjectItemGenericQuantityPrice = ObjectItemGenericQuantityPrice;
module.exports.types[494] = ObjectItemGenericQuantityPrice;

class ObjectItemMinimalInformation extends Item {
    constructor(objectGID, effects) {
        super();
        this.objectGID = objectGID;
        this.effects = effects;
        this.messageId = 124;
    }

    serialize() {
        super.serialize();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
        this.buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.buffer.writeShort((this.effects[_loc2_]).getTypeId());
            (this.effects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemMinimalInformation.objectGID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
            _loc5_.deserialize(buffer);
            this.effects.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.ObjectItemMinimalInformation = ObjectItemMinimalInformation;
module.exports.types[124] = ObjectItemMinimalInformation;

class ObjectItemInformationWithQuantity extends ObjectItemMinimalInformation {
    constructor(objectGID, effects, quantity) {
        super(objectGID, effects);
        this.quantity = quantity;
        this.messageId = 387;
    }

    serialize() {
        super.serialize();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemInformationWithQuantity.quantity.");
        }
    }
};
module.exports.ObjectItemInformationWithQuantity = ObjectItemInformationWithQuantity;
module.exports.types[387] = ObjectItemInformationWithQuantity;

class ObjectItemNotInContainer extends Item {
    constructor(objectGID, effects, objectUID, quantity) {
        super();
        this.objectGID = objectGID;
        this.effects = effects;
        this.objectUID = objectUID;
        this.quantity = quantity;
        this.messageId = 134;
    }

    serialize() {
        super.serialize();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
        this.buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.buffer.writeShort((this.effects[_loc2_]).getTypeId());
            (this.effects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemNotInContainer.objectGID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
            _loc5_.deserialize(buffer);
            this.effects.push(_loc5_);
            _loc3_++;
        }
        this._objectUIDFunc(buffer);
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemNotInContainer.quantity.");
        };
    }
};
module.exports.ObjectItemNotInContainer = ObjectItemNotInContainer;
module.exports.types[134] = ObjectItemNotInContainer;

class ObjectItemQuantity extends Item {
    constructor(objectUID, quantity) {
        super();
        this.objectUID = objectUID;
        this.quantity = quantity;
        this.messageId = 119;
    }

    serialize() {
        super.serialize();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectItemQuantity.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemQuantity.quantity.");
        };
    }
};
module.exports.ObjectItemQuantity = ObjectItemQuantity;
module.exports.types[119] = ObjectItemQuantity;

class ObjectItemToSell extends Item {
    constructor(objectGID, effects, objectUID, quantity, objectPrice) {
        super();
        this.objectGID = objectGID;
        this.effects = effects;
        this.objectUID = objectUID;
        this.quantity = quantity;
        this.objectPrice = objectPrice;
        this.messageId = 120;
    }

    serialize() {
        super.serialize();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
        this.buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.buffer.writeShort((this.effects[_loc2_]).getTypeId());
            (this.effects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
        if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
        }
        this.buffer.writeVarLong(this.objectPrice);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemToSell.objectGID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
            _loc5_.deserialize(buffer);
            this.effects.push(_loc5_);
            _loc3_++;
        }
        this._objectUIDFunc(buffer);
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemToSell.quantity.");
        };
        this.objectPrice = buffer.readVarUhLong();
        if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSell.objectPrice.");
        };
    }
};
module.exports.ObjectItemToSell = ObjectItemToSell;
module.exports.types[120] = ObjectItemToSell;

class ObjectItemToSellInBid extends ObjectItemToSell {
    constructor(objectGID, effects, objectUID, quantity, objectPrice, unsoldDelay) {
        super(objectGID, effects, objectUID, quantity, objectPrice);
        this.unsoldDelay = unsoldDelay;
        this.messageId = 164;
    }

    serialize() {
        super.serialize();
        if (this.unsoldDelay < 0) {
            throw new Error("Forbidden value (" + this.unsoldDelay + ") on element unsoldDelay.");
        }
        this.buffer.writeInt(this.unsoldDelay);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.unsoldDelay = buffer.readInt();
        if (this.unsoldDelay < 0) {
            throw new Error("Forbidden value (" + this.unsoldDelay + ") on element of ObjectItemToSellInBid.unsoldDelay.");
        }
    }
};
module.exports.ObjectItemToSellInBid = ObjectItemToSellInBid;
module.exports.types[164] = ObjectItemToSellInBid;

class ObjectItemToSellInHumanVendorShop extends Item {
    constructor(objectGID, effects, objectUID, quantity, objectPrice, publicPrice) {
        super();
        this.objectGID = objectGID;
        this.effects = effects;
        this.objectUID = objectUID;
        this.quantity = quantity;
        this.objectPrice = objectPrice;
        this.publicPrice = publicPrice;
        this.messageId = 359;
    }

    serialize() {
        super.serialize();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
        this.buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.buffer.writeShort((this.effects[_loc2_]).getTypeId());
            (this.effects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
        if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
        }
        this.buffer.writeVarLong(this.objectPrice);
        if (this.publicPrice < 0 || this.publicPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.publicPrice + ") on element publicPrice.");
        }
        this.buffer.writeVarLong(this.publicPrice);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemToSellInHumanVendorShop.objectGID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
            _loc5_.deserialize(buffer);
            this.effects.push(_loc5_);
            _loc3_++;
        }
        this._objectUIDFunc(buffer);
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemToSellInHumanVendorShop.quantity.");
        };
        this.objectPrice = buffer.readVarUhLong();
        if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSellInHumanVendorShop.objectPrice.");
        };
        this.publicPrice = buffer.readVarUhLong();
        if (this.publicPrice < 0 || this.publicPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.publicPrice + ") on element of ObjectItemToSellInHumanVendorShop.publicPrice.");
        };
    }
};
module.exports.ObjectItemToSellInHumanVendorShop = ObjectItemToSellInHumanVendorShop;
module.exports.types[359] = ObjectItemToSellInHumanVendorShop;

class ObjectItemToSellInNpcShop extends ObjectItemMinimalInformation {
    constructor(objectGID, effects, objectPrice, buyCriterion) {
        super(objectGID, effects);
        this.objectPrice = objectPrice;
        this.buyCriterion = buyCriterion;
        this.messageId = 352;
    }

    serialize() {
        super.serialize();
        if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
        }
        this.buffer.writeVarLong(this.objectPrice);
        this.buffer.writeUTF(this.buyCriterion);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectPrice = buffer.readVarUhLong();
        if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSellInNpcShop.objectPrice.");
        }
        this.buyCriterion = buffer.readUTF();
    }
};
module.exports.ObjectItemToSellInNpcShop = ObjectItemToSellInNpcShop;
module.exports.types[352] = ObjectItemToSellInNpcShop;

class SellerBuyerDescriptor extends ProtocolType {
    constructor(quantities, types, taxPercentage, taxModificationPercentage, maxItemLevel, maxItemPerAccount, npcContextualId, unsoldDelay) {
        super();
        this.quantities = quantities;
        this.types = types;
        this.taxPercentage = taxPercentage;
        this.taxModificationPercentage = taxModificationPercentage;
        this.maxItemLevel = maxItemLevel;
        this.maxItemPerAccount = maxItemPerAccount;
        this.npcContextualId = npcContextualId;
        this.unsoldDelay = unsoldDelay;
        this.messageId = 121;
    }

    serialize() {
        this.buffer.writeShort(this.quantities.length);
        var _loc2_ = 0;
        while (_loc2_ < this.quantities.length) {
            if (this.quantities[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.quantities[_loc2_] + ") on element 1 (starting at 1) of quantities.");
            }
            this.buffer.writeVarInt(this.quantities[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.types.length);
        var _loc3_ = 0;
        while (_loc3_ < this.types.length) {
            if (this.types[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.types[_loc3_] + ") on element 2 (starting at 1) of types.");
            }
            this.buffer.writeVarInt(this.types[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeFloat(this.taxPercentage);
        this.buffer.writeFloat(this.taxModificationPercentage);
        if (this.maxItemLevel < 0 || this.maxItemLevel > 255) {
            throw new Error("Forbidden value (" + this.maxItemLevel + ") on element maxItemLevel.");
        }
        this.buffer.writeByte(this.maxItemLevel);
        if (this.maxItemPerAccount < 0) {
            throw new Error("Forbidden value (" + this.maxItemPerAccount + ") on element maxItemPerAccount.");
        }
        this.buffer.writeVarInt(this.maxItemPerAccount);
        this.buffer.writeInt(this.npcContextualId);
        if (this.unsoldDelay < 0) {
            throw new Error("Forbidden value (" + this.unsoldDelay + ") on element unsoldDelay.");
        }
        this.buffer.writeVarShort(this.unsoldDelay);
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhInt();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of quantities.");
            }
            this.quantities.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhInt();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of types.");
            }
            this.types.push(_loc7_);
            _loc5_++;
        }
        this._taxPercentageFunc(buffer);
        this.taxModificationPercentage = buffer.readFloat();
        this.maxItemLevel = buffer.readUnsignedByte();
        if (this.maxItemLevel < 0 || this.maxItemLevel > 255) {
            throw new Error("Forbidden value (" + this.maxItemLevel + ") on element of SellerBuyerDescriptor.maxItemLevel.");
        }
        this.maxItemPerAccount = buffer.readVarUhInt();
        if (this.maxItemPerAccount < 0) {
            throw new Error("Forbidden value (" + this.maxItemPerAccount + ") on element of SellerBuyerDescriptor.maxItemPerAccount.");
        };
        this.npcContextualId = buffer.readInt();;
        this.unsoldDelay = buffer.readVarUhShort();
        if (this.unsoldDelay < 0) {
            throw new Error("Forbidden value (" + this.unsoldDelay + ") on element of SellerBuyerDescriptor.unsoldDelay.");
        };
    }
};
module.exports.SellerBuyerDescriptor = SellerBuyerDescriptor;
module.exports.types[121] = SellerBuyerDescriptor;

class SpellItem extends Item {
    constructor(spellId, spellLevel) {
        super();
        this.spellId = spellId;
        this.spellLevel = spellLevel;
        this.messageId = 49;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.spellId);
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
        }
        this.buffer.writeShort(this.spellLevel);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.spellId = buffer.readInt();
        this.spellLevel = buffer.readShort();
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            throw new Error("Forbidden value (" + this.spellLevel + ") on element of SpellItem.spellLevel.");
        }
    }
};
module.exports.SpellItem = SpellItem;
module.exports.types[49] = SpellItem;

class ProtectedEntityWaitingForHelpInfo extends ProtocolType {
    constructor(timeLeftBeforeFight, waitTimeForPlacement, nbPositionForDefensors) {
        super();
        this.timeLeftBeforeFight = timeLeftBeforeFight;
        this.waitTimeForPlacement = waitTimeForPlacement;
        this.nbPositionForDefensors = nbPositionForDefensors;
        this.messageId = 186;
    }

    serialize() {
        this.buffer.writeInt(this.timeLeftBeforeFight);
        this.buffer.writeInt(this.waitTimeForPlacement);
        if (this.nbPositionForDefensors < 0) {
            throw new Error("Forbidden value (" + this.nbPositionForDefensors + ") on element nbPositionForDefensors.");
        }
        this.buffer.writeByte(this.nbPositionForDefensors);
    }

    deserialize(buffer) {
        this.timeLeftBeforeFight = buffer.readInt();
        this.waitTimeForPlacement = buffer.readInt();;
        this.nbPositionForDefensors = buffer.readByte();
        if (this.nbPositionForDefensors < 0) {
            throw new Error("Forbidden value (" + this.nbPositionForDefensors + ") on element of ProtectedEntityWaitingForHelpInfo.nbPositionForDefensors.");
        }
    }
};
module.exports.ProtectedEntityWaitingForHelpInfo = ProtectedEntityWaitingForHelpInfo;
module.exports.types[186] = ProtectedEntityWaitingForHelpInfo;

class FinishMoveInformations extends ProtocolType {
    constructor(finishMoveId, finishMoveState) {
        super();
        this.finishMoveId = finishMoveId;
        this.finishMoveState = finishMoveState;
        this.messageId = 506;
    }

    serialize() {
        if (this.finishMoveId < 0) {
            throw new Error("Forbidden value (" + this.finishMoveId + ") on element finishMoveId.");
        }
        this.buffer.writeInt(this.finishMoveId);
        this.buffer.writeBoolean(this.finishMoveState);
    }

    deserialize(buffer) {
        this.finishMoveId = buffer.readInt();
        if (this.finishMoveId < 0) {
            throw new Error("Forbidden value (" + this.finishMoveId + ") on element of FinishMoveInformations.finishMoveId.");
        }
        this.finishMoveState = buffer.readBoolean();
    }
};
module.exports.FinishMoveInformations = FinishMoveInformations;
module.exports.types[506] = FinishMoveInformations;

class AbstractContactInformations extends ProtocolType {
    constructor(accountId, accountName) {
        super();
        this.accountId = accountId;
        this.accountName = accountName;
        this.messageId = 380;
    }

    serialize() {
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        this.buffer.writeUTF(this.accountName);
    }

    deserialize(buffer) {
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of AbstractContactInformations.accountId.");
        }
        this.accountName = buffer.readUTF();
    }
};
module.exports.AbstractContactInformations = AbstractContactInformations;
module.exports.types[380] = AbstractContactInformations;

class FriendInformations extends AbstractContactInformations {
    constructor(accountId, accountName, playerState, lastConnection, achievementPoints) {
        super(accountId, accountName);
        this.playerState = playerState;
        this.lastConnection = lastConnection;
        this.achievementPoints = achievementPoints;
        this.messageId = 78;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.playerState);
        if (this.lastConnection < 0) {
            throw new Error("Forbidden value (" + this.lastConnection + ") on element lastConnection.");
        }
        this.buffer.writeVarShort(this.lastConnection);
        this.buffer.writeInt(this.achievementPoints);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerState = buffer.readByte();
        if (this.playerState < 0) {
            throw new Error("Forbidden value (" + this.playerState + ") on element of FriendInformations.playerState.");
        }
        this.lastConnection = buffer.readVarUhShort();
        if (this.lastConnection < 0) {
            throw new Error("Forbidden value (" + this.lastConnection + ") on element of FriendInformations.lastConnection.");
        };
        this.achievementPoints = buffer.readInt();
    }
};
module.exports.FriendInformations = FriendInformations;
module.exports.types[78] = FriendInformations;

class FriendOnlineInformations extends FriendInformations {
    constructor(accountId, accountName, playerState, lastConnection, achievementPoints, playerId, playerName, level, alignmentSide, breed, sex, guildInfo, moodSmileyId, status, havenBagShared) {
        super(accountId, accountName, playerState, lastConnection, achievementPoints);
        this.playerId = playerId;
        this.playerName = playerName;
        this.level = level;
        this.alignmentSide = alignmentSide;
        this.breed = breed;
        this.sex = sex;
        this.guildInfo = guildInfo;
        this.moodSmileyId = moodSmileyId;
        this.status = status;
        this.havenBagShared = havenBagShared;
        this.messageId = 92;
    }

    serialize() {
        super.serialize();
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.sex);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.havenBagShared);
        this.buffer.writeByte(_loc2_);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeUTF(this.playerName);
        if (this.level < 0 || this.level > 206) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
        this.buffer.writeByte(this.alignmentSide);
        this.buffer.writeByte(this.breed);
        this.guildInfo.serialize(this.buffer);
        if (this.moodSmileyId < 0) {
            throw new Error("Forbidden value (" + this.moodSmileyId + ") on element moodSmileyId.");
        }
        this.buffer.writeVarShort(this.moodSmileyId);
        this.buffer.writeShort(this.status.getTypeId());
        this.status.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.deserializeByteBoxes(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of FriendOnlineInformations.playerId.");
        }
        this.playerName = buffer.readUTF();
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 206) {
            throw new Error("Forbidden value (" + this.level + ") on element of FriendOnlineInformations.level.");
        };
        this.alignmentSide = buffer.readByte();;
        this.breed = buffer.readByte();
        if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
            throw new Error("Forbidden value (" + this.breed + ") on element of FriendOnlineInformations.breed.");
        };
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
        this.moodSmileyId = buffer.readVarUhShort();
        if (this.moodSmileyId < 0) {
            throw new Error("Forbidden value (" + this.moodSmileyId + ") on element of FriendOnlineInformations.moodSmileyId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
    }
};
module.exports.FriendOnlineInformations = FriendOnlineInformations;
module.exports.types[92] = FriendOnlineInformations;

class FriendSpouseInformations extends ProtocolType {
    constructor(spouseAccountId, spouseId, spouseName, spouseLevel, breed, sex, spouseEntityLook, guildInfo, alignmentSide) {
        super();
        this.spouseAccountId = spouseAccountId;
        this.spouseId = spouseId;
        this.spouseName = spouseName;
        this.spouseLevel = spouseLevel;
        this.breed = breed;
        this.sex = sex;
        this.spouseEntityLook = spouseEntityLook;
        this.guildInfo = guildInfo;
        this.alignmentSide = alignmentSide;
        this.messageId = 77;
    }

    serialize() {
        if (this.spouseAccountId < 0) {
            throw new Error("Forbidden value (" + this.spouseAccountId + ") on element spouseAccountId.");
        }
        this.buffer.writeInt(this.spouseAccountId);
        if (this.spouseId < 0 || this.spouseId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.spouseId + ") on element spouseId.");
        }
        this.buffer.writeVarLong(this.spouseId);
        this.buffer.writeUTF(this.spouseName);
        if (this.spouseLevel < 1 || this.spouseLevel > 206) {
            throw new Error("Forbidden value (" + this.spouseLevel + ") on element spouseLevel.");
        }
        this.buffer.writeByte(this.spouseLevel);
        this.buffer.writeByte(this.breed);
        this.buffer.writeByte(this.sex);
        this.spouseEntityLook.serialize(this.buffer);
        this.guildInfo.serialize(this.buffer);
        this.buffer.writeByte(this.alignmentSide);
    }

    deserialize(buffer) {
        this.spouseAccountId = buffer.readInt();
        if (this.spouseAccountId < 0) {
            throw new Error("Forbidden value (" + this.spouseAccountId + ") on element of FriendSpouseInformations.spouseAccountId.");
        }
        this.spouseId = buffer.readVarUhLong();
        if (this.spouseId < 0 || this.spouseId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.spouseId + ") on element of FriendSpouseInformations.spouseId.");
        };
        this.spouseName = buffer.readUTF();
        this.spouseLevel = buffer.readUnsignedByte();
        if (this.spouseLevel < 1 || this.spouseLevel > 206) {
            throw new Error("Forbidden value (" + this.spouseLevel + ") on element of FriendSpouseInformations.spouseLevel.");
        };
        this.breed = buffer.readByte();;
        this.sex = buffer.readByte();;
        this.spouseEntityLook = new EntityLook();
        this.spouseEntityLook.deserialize(buffer);
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
        this.alignmentSide = buffer.readByte();;
    }
};
module.exports.FriendSpouseInformations = FriendSpouseInformations;
module.exports.types[77] = FriendSpouseInformations;

class FriendSpouseOnlineInformations extends FriendSpouseInformations {
    constructor(spouseAccountId, spouseId, spouseName, spouseLevel, breed, sex, spouseEntityLook, guildInfo, alignmentSide, mapId, subAreaId, inFight, followSpouse) {
        super(spouseAccountId, spouseId, spouseName, spouseLevel, breed, sex, spouseEntityLook, guildInfo, alignmentSide);
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.inFight = inFight;
        this.followSpouse = followSpouse;
        this.messageId = 93;
    }

    serialize() {
        super.serialize();
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.inFight);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.followSpouse);
        this.buffer.writeByte(_loc2_);
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.deserializeByteBoxes(buffer);
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element of FriendSpouseOnlineInformations.mapId.");
        }
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of FriendSpouseOnlineInformations.subAreaId.");
        };
    }
};
module.exports.FriendSpouseOnlineInformations = FriendSpouseOnlineInformations;
module.exports.types[93] = FriendSpouseOnlineInformations;

class IgnoredInformations extends AbstractContactInformations {
    constructor(accountId, accountName) {
        super(accountId, accountName);
        this.messageId = 106;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.IgnoredInformations = IgnoredInformations;
module.exports.types[106] = IgnoredInformations;

class IgnoredOnlineInformations extends IgnoredInformations {
    constructor(accountId, accountName, playerId, playerName, breed, sex) {
        super(accountId, accountName);
        this.playerId = playerId;
        this.playerName = playerName;
        this.breed = breed;
        this.sex = sex;
        this.messageId = 105;
    }

    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeUTF(this.playerName);
        this.buffer.writeByte(this.breed);
        this.buffer.writeBoolean(this.sex);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of IgnoredOnlineInformations.playerId.");
        }
        this.playerName = buffer.readUTF();
        this.breed = buffer.readByte();
        if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
            throw new Error("Forbidden value (" + this.breed + ") on element of IgnoredOnlineInformations.breed.");
        };
        this.sex = buffer.readBoolean();;
    }
};
module.exports.IgnoredOnlineInformations = IgnoredOnlineInformations;
module.exports.types[105] = IgnoredOnlineInformations;

class GuildEmblem extends ProtocolType {
    constructor(symbolShape, symbolColor, backgroundShape, backgroundColor) {
        super();
        this.symbolShape = symbolShape;
        this.symbolColor = symbolColor;
        this.backgroundShape = backgroundShape;
        this.backgroundColor = backgroundColor;
        this.messageId = 87;
    }

    serialize() {
        if (this.symbolShape < 0) {
            throw new Error("Forbidden value (" + this.symbolShape + ") on element symbolShape.");
        }
        this.buffer.writeVarShort(this.symbolShape);
        this.buffer.writeInt(this.symbolColor);
        if (this.backgroundShape < 0) {
            throw new Error("Forbidden value (" + this.backgroundShape + ") on element backgroundShape.");
        }
        this.buffer.writeByte(this.backgroundShape);
        this.buffer.writeInt(this.backgroundColor);
    }

    deserialize(buffer) {
        this.symbolShape = buffer.readVarUhShort();
        if (this.symbolShape < 0) {
            throw new Error("Forbidden value (" + this.symbolShape + ") on element of GuildEmblem.symbolShape.");
        }
        this.symbolColor = buffer.readInt();
        this.backgroundShape = buffer.readByte();
        if (this.backgroundShape < 0) {
            throw new Error("Forbidden value (" + this.backgroundShape + ") on element of GuildEmblem.backgroundShape.");
        };
        this.backgroundColor = buffer.readInt();;
    }
};
module.exports.GuildEmblem = GuildEmblem;
module.exports.types[87] = GuildEmblem;

class GuildMember extends CharacterMinimalInformations {
    constructor(param1, name, level, breed, sex, rank, givenExperience, experienceGivenPercent, rights, connected, alignmentSide, hoursSinceLastConnection, moodSmileyId, accountId, achievementPoints, status, havenBagShared) {
        super(id, name, level);
        this.breed = breed;
        this.sex = sex;
        this.rank = rank;
        this.givenExperience = givenExperience;
        this.experienceGivenPercent = experienceGivenPercent;
        this.rights = rights;
        this.connected = connected;
        this.alignmentSide = alignmentSide;
        this.hoursSinceLastConnection = hoursSinceLastConnection;
        this.moodSmileyId = moodSmileyId;
        this.accountId = accountId;
        this.achievementPoints = achievementPoints;
        this.status = status;
        this.havenBagShared = havenBagShared;
        this.messageId = 88;
    }

    serialize() {
        super.serialize();
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.sex);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.havenBagShared);
        this.buffer.writeByte(_loc2_);
        this.buffer.writeByte(this.breed);
        if (this.rank < 0) {
            throw new Error("Forbidden value (" + this.rank + ") on element rank.");
        }
        this.buffer.writeVarShort(this.rank);
        if (this.givenExperience < 0 || this.givenExperience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.givenExperience + ") on element givenExperience.");
        }
        this.buffer.writeVarLong(this.givenExperience);
        if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
            throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element experienceGivenPercent.");
        }
        this.buffer.writeByte(this.experienceGivenPercent);
        if (this.rights < 0) {
            throw new Error("Forbidden value (" + this.rights + ") on element rights.");
        }
        this.buffer.writeVarInt(this.rights);
        this.buffer.writeByte(this.connected);
        this.buffer.writeByte(this.alignmentSide);
        if (this.hoursSinceLastConnection < 0 || this.hoursSinceLastConnection > 65535) {
            throw new Error("Forbidden value (" + this.hoursSinceLastConnection + ") on element hoursSinceLastConnection.");
        }
        this.buffer.writeShort(this.hoursSinceLastConnection);
        if (this.moodSmileyId < 0) {
            throw new Error("Forbidden value (" + this.moodSmileyId + ") on element moodSmileyId.");
        }
        this.buffer.writeVarShort(this.moodSmileyId);
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        this.buffer.writeInt(this.achievementPoints);
        this.buffer.writeShort(this.status.getTypeId());
        this.status.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.deserializeByteBoxes(buffer);
        this.breed = buffer.readByte();
        this.rank = buffer.readVarUhShort();
        if (this.rank < 0) {
            throw new Error("Forbidden value (" + this.rank + ") on element of GuildMember.rank.");
        }
        this.givenExperience = buffer.readVarUhLong();
        if (this.givenExperience < 0 || this.givenExperience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.givenExperience + ") on element of GuildMember.givenExperience.");
        };
        this.experienceGivenPercent = buffer.readByte();
        if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
            throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element of GuildMember.experienceGivenPercent.");
        };
        this.rights = buffer.readVarUhInt();
        if (this.rights < 0) {
            throw new Error("Forbidden value (" + this.rights + ") on element of GuildMember.rights.");
        };
        this.connected = buffer.readByte();
        if (this.connected < 0) {
            throw new Error("Forbidden value (" + this.connected + ") on element of GuildMember.connected.");
        };
        this.alignmentSide = buffer.readByte();;
        this.hoursSinceLastConnection = buffer.readUnsignedShort();
        if (this.hoursSinceLastConnection < 0 || this.hoursSinceLastConnection > 65535) {
            throw new Error("Forbidden value (" + this.hoursSinceLastConnection + ") on element of GuildMember.hoursSinceLastConnection.");
        };
        this.moodSmileyId = buffer.readVarUhShort();
        if (this.moodSmileyId < 0) {
            throw new Error("Forbidden value (" + this.moodSmileyId + ") on element of GuildMember.moodSmileyId.");
        };
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of GuildMember.accountId.");
        };
        this.achievementPoints = buffer.readInt();;
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
    }
};
module.exports.GuildMember = GuildMember;
module.exports.types[88] = GuildMember;

class HavenBagFurnitureInformation extends ProtocolType {
    constructor(cellId, funitureId, orientation) {
        super();
        this.cellId = cellId;
        this.funitureId = funitureId;
        this.orientation = orientation;
        this.messageId = 498;
    }

    serialize() {
        if (this.cellId < 0) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
        this.buffer.writeInt(this.funitureId);
        if (this.orientation < 0) {
            throw new Error("Forbidden value (" + this.orientation + ") on element orientation.");
        }
        this.buffer.writeByte(this.orientation);
    }

    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of HavenBagFurnitureInformation.cellId.");
        }
        this.funitureId = buffer.readInt();
        this.orientation = buffer.readByte();
        if (this.orientation < 0) {
            throw new Error("Forbidden value (" + this.orientation + ") on element of HavenBagFurnitureInformation.orientation.");
        };
    }
};
module.exports.HavenBagFurnitureInformation = HavenBagFurnitureInformation;
module.exports.types[498] = HavenBagFurnitureInformation;

class AdditionalTaxCollectorInformations extends ProtocolType {
    constructor(collectorCallerName, date) {
        super();
        this.collectorCallerName = collectorCallerName;
        this.date = date;
        this.messageId = 165;
    }

    serialize() {
        this.buffer.writeUTF(this.collectorCallerName);
        if (this.date < 0) {
            throw new Error("Forbidden value (" + this.date + ") on element date.");
        }
        this.buffer.writeInt(this.date);
    }

    deserialize(buffer) {
        this.collectorCallerName = buffer.readUTF();
        this.date = buffer.readInt();
        if (this.date < 0) {
            throw new Error("Forbidden value (" + this.date + ") on element of AdditionalTaxCollectorInformations.date.");
        }
    }
};
module.exports.AdditionalTaxCollectorInformations = AdditionalTaxCollectorInformations;
module.exports.types[165] = AdditionalTaxCollectorInformations;

class TaxCollectorBasicInformations extends ProtocolType {
    constructor(firstNameId, lastNameId, worldX, worldY, mapId, subAreaId) {
        super();
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.messageId = 96;
    }

    serialize() {
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        this.buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        this.buffer.writeVarShort(this.lastNameId);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
    }

    deserialize(buffer) {
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorBasicInformations.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorBasicInformations.lastNameId.");
        };
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of TaxCollectorBasicInformations.worldX.");
        };
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of TaxCollectorBasicInformations.worldY.");
        };
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorBasicInformations.subAreaId.");
        };
    }
};
module.exports.TaxCollectorBasicInformations = TaxCollectorBasicInformations;
module.exports.types[96] = TaxCollectorBasicInformations;

class TaxCollectorComplementaryInformations extends ProtocolType {
    constructor() {
        super();
        this.messageId = 448;
    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.TaxCollectorComplementaryInformations = TaxCollectorComplementaryInformations;
module.exports.types[448] = TaxCollectorComplementaryInformations;

class TaxCollectorFightersInformation extends ProtocolType {
    constructor(collectorId, allyCharactersInformations, enemyCharactersInformations) {
        super();
        this.collectorId = collectorId;
        this.allyCharactersInformations = allyCharactersInformations;
        this.enemyCharactersInformations = enemyCharactersInformations;
        this.messageId = 169;
    }

    serialize() {
        this.buffer.writeInt(this.collectorId);
        this.buffer.writeShort(this.allyCharactersInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.allyCharactersInformations.length) {
            this.buffer.writeShort((this.allyCharactersInformations[_loc2_]).getTypeId());
            (this.allyCharactersInformations[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.enemyCharactersInformations.length);
        var _loc3_ = 0;
        while (_loc3_ < this.enemyCharactersInformations.length) {
            this.buffer.writeShort((this.enemyCharactersInformations[_loc3_]).getTypeId());
            (this.enemyCharactersInformations[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = 0;
        var _loc9_ = null;
        this.collectorId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc6_);
            _loc7_.deserialize(buffer);
            this.allyCharactersInformations.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readUnsignedShort();
            _loc9_ = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc8_);
            _loc9_.deserialize(buffer);
            this.enemyCharactersInformations.push(_loc9_);
            _loc5_++;
        }
    }
};
module.exports.TaxCollectorFightersInformation = TaxCollectorFightersInformation;
module.exports.types[169] = TaxCollectorFightersInformation;

class TaxCollectorGuildInformations extends TaxCollectorComplementaryInformations {
    constructor(guild) {
        super();
        this.guild = guild;
        this.messageId = 446;
    }

    serialize() {
        super.serialize();
        this.guild.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.guild = new BasicGuildInformations();
        this.guild.deserialize(buffer);
    }
};
module.exports.TaxCollectorGuildInformations = TaxCollectorGuildInformations;
module.exports.types[446] = TaxCollectorGuildInformations;

class TaxCollectorInformations extends ProtocolType {
    constructor(uniqueId, firtNameId, lastNameId, additionalInfos, worldX, worldY, subAreaId, state, look, complements) {
        super();
        this.uniqueId = uniqueId;
        this.firtNameId = firtNameId;
        this.lastNameId = lastNameId;
        this.additionalInfos = additionalInfos;
        this.worldX = worldX;
        this.worldY = worldY;
        this.subAreaId = subAreaId;
        this.state = state;
        this.look = look;
        this.complements = complements;
        this.messageId = 167;
    }

    serialize() {
        this.buffer.writeInt(this.uniqueId);
        if (this.firtNameId < 0) {
            throw new Error("Forbidden value (" + this.firtNameId + ") on element firtNameId.");
        }
        this.buffer.writeVarShort(this.firtNameId);
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        this.buffer.writeVarShort(this.lastNameId);
        this.additionalInfos.serialize(this.buffer);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeByte(this.state);
        this.look.serialize(this.buffer);
        this.buffer.writeShort(this.complements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.complements.length) {
            this.buffer.writeShort((this.complements[_loc2_]).getTypeId());
            (this.complements[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.uniqueId = buffer.readInt();
        this.firtNameId = buffer.readVarUhShort();
        if (this.firtNameId < 0) {
            throw new Error("Forbidden value (" + this.firtNameId + ") on element of TaxCollectorInformations.firtNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorInformations.lastNameId.");
        };
        this.additionalInfos = new AdditionalTaxCollectorInformations();
        this.additionalInfos.deserialize(buffer);
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of TaxCollectorInformations.worldX.");
        };
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of TaxCollectorInformations.worldY.");
        };
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorInformations.subAreaId.");
        };
        this.state = buffer.readByte();
        if (this.state < 0) {
            throw new Error("Forbidden value (" + this.state + ") on element of TaxCollectorInformations.state.");
        };
        this.look = new EntityLook();
        this.look.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(TaxCollectorComplementaryInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.complements.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.TaxCollectorInformations = TaxCollectorInformations;
module.exports.types[167] = TaxCollectorInformations;

class TaxCollectorLootInformations extends TaxCollectorComplementaryInformations {
    constructor(kamas, experience, pods, itemsValue) {
        super();
        this.kamas = kamas;
        this.experience = experience;
        this.pods = pods;
        this.itemsValue = itemsValue;
        this.messageId = 372;
    }

    serialize() {
        super.serialize();
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        this.buffer.writeVarLong(this.kamas);
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element experience.");
        }
        this.buffer.writeVarLong(this.experience);
        if (this.pods < 0) {
            throw new Error("Forbidden value (" + this.pods + ") on element pods.");
        }
        this.buffer.writeVarInt(this.pods);
        if (this.itemsValue < 0 || this.itemsValue > 9007199254740990) {
            throw new Error("Forbidden value (" + this.itemsValue + ") on element itemsValue.");
        }
        this.buffer.writeVarLong(this.itemsValue);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.kamas = buffer.readVarUhLong();
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element of TaxCollectorLootInformations.kamas.");
        }
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element of TaxCollectorLootInformations.experience.");
        };
        this.pods = buffer.readVarUhInt();
        if (this.pods < 0) {
            throw new Error("Forbidden value (" + this.pods + ") on element of TaxCollectorLootInformations.pods.");
        };
        this.itemsValue = buffer.readVarUhLong();
        if (this.itemsValue < 0 || this.itemsValue > 9007199254740990) {
            throw new Error("Forbidden value (" + this.itemsValue + ") on element of TaxCollectorLootInformations.itemsValue.");
        };
    }
};
module.exports.TaxCollectorLootInformations = TaxCollectorLootInformations;
module.exports.types[372] = TaxCollectorLootInformations;

class TaxCollectorMovement extends ProtocolType {
    constructor(movementType, basicInfos, playerId, playerName) {
        super();
        this.movementType = movementType;
        this.basicInfos = basicInfos;
        this.playerId = playerId;
        this.playerName = playerName;
        this.messageId = 493;
    }

    serialize() {
        this.buffer.writeByte(this.movementType);
        this.basicInfos.serialize(this.buffer);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeUTF(this.playerName);
    }

    deserialize(buffer) {
        this.movementType = buffer.readByte();
        if (this.movementType < 0) {
            throw new Error("Forbidden value (" + this.movementType + ") on element of TaxCollectorMovement.movementType.");
        }
        this.basicInfos = new TaxCollectorBasicInformations();
        this.basicInfos.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of TaxCollectorMovement.playerId.");
        };
        this.playerName = buffer.readUTF();
    }
};
module.exports.TaxCollectorMovement = TaxCollectorMovement;
module.exports.types[493] = TaxCollectorMovement;

class TaxCollectorWaitingForHelpInformations extends TaxCollectorComplementaryInformations {
    constructor(waitingForHelpInfo) {
        super();
        this.waitingForHelpInfo = waitingForHelpInfo;
        this.messageId = 447;
    }

    serialize() {
        super.serialize();
        this.waitingForHelpInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
        this.waitingForHelpInfo.deserialize(buffer);
    }
};
module.exports.TaxCollectorWaitingForHelpInformations = TaxCollectorWaitingForHelpInformations;
module.exports.types[447] = TaxCollectorWaitingForHelpInformations;

class HouseInformations extends ProtocolType {
    constructor(houseId, modelId) {
        super();
        this.houseId = houseId;
        this.modelId = modelId;
        this.messageId = 111;
    }

    serialize() {
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        if (this.modelId < 0) {
            throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        this.buffer.writeVarShort(this.modelId);
    }

    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of HouseInformations.houseId.");
        }
        this.modelId = buffer.readVarUhShort();
        if (this.modelId < 0) {
            throw new Error("Forbidden value (" + this.modelId + ") on element of HouseInformations.modelId.");
        };
    }
};
module.exports.HouseInformations = HouseInformations;
module.exports.types[111] = HouseInformations;

class AccountHouseInformations extends HouseInformations {
    constructor(houseId, modelId, houseInfos, realPrice, isLocked, worldX, worldY, mapId, subAreaId) {
        super(houseId, modelId);
        this.houseInfos = houseInfos;
        this.realPrice = realPrice;
        this.isLocked = isLocked;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.messageId = 390;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.houseInfos.getTypeId());
        this.houseInfos.serialize(this.buffer);
        if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.realPrice + ") on element realPrice.");
        }
        this.buffer.writeVarLong(this.realPrice);
        this.buffer.writeBoolean(this.isLocked);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.houseInfos = ProtocolTypeManager.getInstance(HouseInstanceInformations, _loc2_);
        this.houseInfos.deserialize(buffer);
        this.realPrice = buffer.readVarUhLong();
        if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.realPrice + ") on element of AccountHouseInformations.realPrice.");
        }
        this.isLocked = buffer.readBoolean();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of AccountHouseInformations.worldX.");
        };
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of AccountHouseInformations.worldY.");
        };
        this.mapId = buffer.readInt();;
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of AccountHouseInformations.subAreaId.");
        };
    }
};
module.exports.AccountHouseInformations = AccountHouseInformations;
module.exports.types[390] = AccountHouseInformations;

class HouseInstanceInformations extends ProtocolType {
    constructor(instanceId, secondHand, ownerName, isOnSale, isSaleLocked) {
        super();
        this.instanceId = instanceId;
        this.secondHand = secondHand;
        this.ownerName = ownerName;
        this.isOnSale = isOnSale;
        this.isSaleLocked = isSaleLocked;
        this.messageId = 511;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.secondHand);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.isOnSale);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.isSaleLocked);
        this.buffer.writeByte(_loc2_);
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        this.buffer.writeUTF(this.ownerName);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseInstanceInformations.instanceId.");
        }
        this.ownerName = buffer.readUTF();
    }
};
module.exports.HouseInstanceInformations = HouseInstanceInformations;
module.exports.types[511] = HouseInstanceInformations;

class HouseGuildedInformations extends HouseInstanceInformations {
    constructor(instanceId, secondHand, ownerName, isOnSale, isSaleLocked, guildInfo) {
        super(instanceId, secondHand, ownerName, isOnSale, isSaleLocked);
        this.guildInfo = guildInfo;
        this.messageId = 512;
    }

    serialize() {
        super.serialize();
        this.guildInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
    }
};
module.exports.HouseGuildedInformations = HouseGuildedInformations;
module.exports.types[512] = HouseGuildedInformations;

class HouseInformationsForGuild extends HouseInformations {
    constructor(houseId, modelId, instanceId, secondHand, ownerName, worldX, worldY, mapId, subAreaId, skillListIds, guildshareParams) {
        super(houseId, modelId);
        this.instanceId = instanceId;
        this.secondHand = secondHand;
        this.ownerName = ownerName;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.skillListIds = skillListIds;
        this.guildshareParams = guildshareParams;
        this.messageId = 170;
    }

    serialize() {
        super.serialize();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        this.buffer.writeBoolean(this.secondHand);
        this.buffer.writeUTF(this.ownerName);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeShort(this.skillListIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.skillListIds.length) {
            this.buffer.writeInt(this.skillListIds[_loc2_]);
            _loc2_++;
        }
        if (this.guildshareParams < 0) {
            throw new Error("Forbidden value (" + this.guildshareParams + ") on element guildshareParams.");
        }
        this.buffer.writeVarInt(this.guildshareParams);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseInformationsForGuild.instanceId.");
        }
        this.secondHand = buffer.readBoolean();
        this.ownerName = buffer.readUTF();;
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of HouseInformationsForGuild.worldX.");
        };
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of HouseInformationsForGuild.worldY.");
        };
        this.mapId = buffer.readInt();;
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of HouseInformationsForGuild.subAreaId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.skillListIds.push(_loc4_);
            _loc3_++;
        }
        this._guildshareParamsFunc(buffer);
    }
};
module.exports.HouseInformationsForGuild = HouseInformationsForGuild;
module.exports.types[170] = HouseInformationsForGuild;

class HouseInformationsForSell extends ProtocolType {
    constructor(instanceId, secondHand, modelId, ownerName, ownerConnected, worldX, worldY, subAreaId, nbRoom, nbChest, skillListIds, isLocked, price) {
        super();
        this.instanceId = instanceId;
        this.secondHand = secondHand;
        this.modelId = modelId;
        this.ownerName = ownerName;
        this.ownerConnected = ownerConnected;
        this.worldX = worldX;
        this.worldY = worldY;
        this.subAreaId = subAreaId;
        this.nbRoom = nbRoom;
        this.nbChest = nbChest;
        this.skillListIds = skillListIds;
        this.isLocked = isLocked;
        this.price = price;
        this.messageId = 221;
    }

    serialize() {
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        this.buffer.writeBoolean(this.secondHand);
        if (this.modelId < 0) {
            throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        this.buffer.writeVarInt(this.modelId);
        this.buffer.writeUTF(this.ownerName);
        this.buffer.writeBoolean(this.ownerConnected);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeByte(this.nbRoom);
        this.buffer.writeByte(this.nbChest);
        this.buffer.writeShort(this.skillListIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.skillListIds.length) {
            this.buffer.writeInt(this.skillListIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeBoolean(this.isLocked);
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarLong(this.price);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseInformationsForSell.instanceId.");
        }
        this.secondHand = buffer.readBoolean();
        this.modelId = buffer.readVarUhInt();
        if (this.modelId < 0) {
            throw new Error("Forbidden value (" + this.modelId + ") on element of HouseInformationsForSell.modelId.");
        };
        this.ownerName = buffer.readUTF();;
        this.ownerConnected = buffer.readBoolean();;
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of HouseInformationsForSell.worldX.");
        };
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of HouseInformationsForSell.worldY.");
        };
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of HouseInformationsForSell.subAreaId.");
        };
        this.nbRoom = buffer.readByte();;
        this.nbChest = buffer.readByte();;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.skillListIds.push(_loc4_);
            _loc3_++;
        }
        this._isLockedFunc(buffer);
        this.price = buffer.readVarUhLong();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element of HouseInformationsForSell.price.");
        };
    }
};
module.exports.HouseInformationsForSell = HouseInformationsForSell;
module.exports.types[221] = HouseInformationsForSell;

class HouseInformationsInside extends HouseInformations {
    constructor(houseId, modelId, instanceId, secondHand, ownerId, ownerName, price, isLocked, worldX, worldY) {
        super(houseId, modelId);
        this.instanceId = instanceId;
        this.secondHand = secondHand;
        this.ownerId = ownerId;
        this.ownerName = ownerName;
        this.price = price;
        this.isLocked = isLocked;
        this.worldX = worldX;
        this.worldY = worldY;
        this.messageId = 218;
    }

    serialize() {
        super.serialize();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        this.buffer.writeBoolean(this.secondHand);
        this.buffer.writeInt(this.ownerId);
        this.buffer.writeUTF(this.ownerName);
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarLong(this.price);
        this.buffer.writeBoolean(this.isLocked);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseInformationsInside.instanceId.");
        }
        this.secondHand = buffer.readBoolean();
        this.ownerId = buffer.readInt();;
        this.ownerName = buffer.readUTF();;
        this.price = buffer.readVarUhLong();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element of HouseInformationsInside.price.");
        };
        this.isLocked = buffer.readBoolean();;
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of HouseInformationsInside.worldX.");
        };
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of HouseInformationsInside.worldY.");
        };
    }
};
module.exports.HouseInformationsInside = HouseInformationsInside;
module.exports.types[218] = HouseInformationsInside;

class HouseOnMapInformations extends HouseInformations {
    constructor(houseId, modelId, doorsOnMap, houseInstances) {
        super(houseId, modelId);
        this.doorsOnMap = doorsOnMap;
        this.houseInstances = houseInstances;
        this.messageId = 510;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.doorsOnMap.length);
        var _loc2_ = 0;
        while (_loc2_ < this.doorsOnMap.length) {
            if (this.doorsOnMap[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.doorsOnMap[_loc2_] + ") on element 1 (starting at 1) of doorsOnMap.");
            }
            this.buffer.writeInt(this.doorsOnMap[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.houseInstances.length);
        var _loc3_ = 0;
        while (_loc3_ < this.houseInstances.length) {
            (this.houseInstances[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readInt();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of doorsOnMap.");
            }
            this.doorsOnMap.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new HouseInstanceInformations();
            _loc7_.deserialize(buffer);
            this.houseInstances.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.HouseOnMapInformations = HouseOnMapInformations;
module.exports.types[510] = HouseOnMapInformations;

class Idol extends ProtocolType {
    constructor(id, xpBonusPercent, dropBonusPercent) {
        super();
        this.id = id;
        this.xpBonusPercent = xpBonusPercent;
        this.dropBonusPercent = dropBonusPercent;
        this.messageId = 489;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
        if (this.xpBonusPercent < 0) {
            throw new Error("Forbidden value (" + this.xpBonusPercent + ") on element xpBonusPercent.");
        }
        this.buffer.writeVarShort(this.xpBonusPercent);
        if (this.dropBonusPercent < 0) {
            throw new Error("Forbidden value (" + this.dropBonusPercent + ") on element dropBonusPercent.");
        }
        this.buffer.writeVarShort(this.dropBonusPercent);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of Idol.id.");
        }
        this.xpBonusPercent = buffer.readVarUhShort();
        if (this.xpBonusPercent < 0) {
            throw new Error("Forbidden value (" + this.xpBonusPercent + ") on element of Idol.xpBonusPercent.");
        };
        this.dropBonusPercent = buffer.readVarUhShort();
        if (this.dropBonusPercent < 0) {
            throw new Error("Forbidden value (" + this.dropBonusPercent + ") on element of Idol.dropBonusPercent.");
        };
    }
};
module.exports.Idol = Idol;
module.exports.types[489] = Idol;

class PartyIdol extends Idol {
    constructor(id, xpBonusPercent, dropBonusPercent, ownersIds) {
        super(id, xpBonusPercent, dropBonusPercent);
        this.ownersIds = ownersIds;
        this.messageId = 490;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.ownersIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ownersIds.length) {
            if (this.ownersIds[_loc2_] < 0 || this.ownersIds[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.ownersIds[_loc2_] + ") on element 1 (starting at 1) of ownersIds.");
            }
            this.buffer.writeVarLong(this.ownersIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = NaN;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhLong();
            if (_loc4_ < 0 || _loc4_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of ownersIds.");
            }
            this.ownersIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.PartyIdol = PartyIdol;
module.exports.types[490] = PartyIdol;

class InteractiveElement extends ProtocolType {
    constructor(elementId, elementTypeId, enabledSkills, disabledSkills, onCurrentMap) {
        super();
        this.elementId = elementId;
        this.elementTypeId = elementTypeId;
        this.enabledSkills = enabledSkills;
        this.disabledSkills = disabledSkills;
        this.onCurrentMap = onCurrentMap;
        this.messageId = 80;
    }

    serialize() {
        if (this.elementId < 0) {
            throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
        }
        this.buffer.writeInt(this.elementId);
        this.buffer.writeInt(this.elementTypeId);
        this.buffer.writeShort(this.enabledSkills.length);
        var _loc2_ = 0;
        while (_loc2_ < this.enabledSkills.length) {
            this.buffer.writeShort((this.enabledSkills[_loc2_]).getTypeId());
            (this.enabledSkills[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.disabledSkills.length);
        var _loc3_ = 0;
        while (_loc3_ < this.disabledSkills.length) {
            this.buffer.writeShort((this.disabledSkills[_loc3_]).getTypeId());
            (this.disabledSkills[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
        this.buffer.writeBoolean(this.onCurrentMap);
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = 0;
        var _loc9_ = null;
        this.elementId = buffer.readInt();
        if (this.elementId < 0) {
            throw new Error("Forbidden value (" + this.elementId + ") on element of InteractiveElement.elementId.");
        }
        this.elementTypeId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(InteractiveElementSkill, _loc6_);
            _loc7_.deserialize(buffer);
            this.enabledSkills.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readUnsignedShort();
            _loc9_ = ProtocolTypeManager.getInstance(InteractiveElementSkill, _loc8_);
            _loc9_.deserialize(buffer);
            this.disabledSkills.push(_loc9_);
            _loc5_++;
        }
        this._onCurrentMapFunc(buffer);
    }
};
module.exports.InteractiveElement = InteractiveElement;
module.exports.types[80] = InteractiveElement;

class InteractiveElementSkill extends ProtocolType {
    constructor(skillId, skillInstanceUid) {
        super();
        this.skillId = skillId;
        this.skillInstanceUid = skillInstanceUid;
        this.messageId = 219;
    }

    serialize() {
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarInt(this.skillId);
        if (this.skillInstanceUid < 0) {
            throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
        }
        this.buffer.writeInt(this.skillInstanceUid);
    }

    deserialize(buffer) {
        this.skillId = buffer.readVarUhInt();
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element of InteractiveElementSkill.skillId.");
        }
        this.skillInstanceUid = buffer.readInt();
        if (this.skillInstanceUid < 0) {
            throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveElementSkill.skillInstanceUid.");
        };
    }
};
module.exports.InteractiveElementSkill = InteractiveElementSkill;
module.exports.types[219] = InteractiveElementSkill;

class InteractiveElementNamedSkill extends InteractiveElementSkill {
    constructor(skillId, skillInstanceUid, nameId) {
        super(skillId, skillInstanceUid);
        this.nameId = nameId;
        this.messageId = 220;
    }

    serialize() {
        super.serialize();
        if (this.nameId < 0) {
            throw new Error("Forbidden value (" + this.nameId + ") on element nameId.");
        }
        this.buffer.writeVarInt(this.nameId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.nameId = buffer.readVarUhInt();
        if (this.nameId < 0) {
            throw new Error("Forbidden value (" + this.nameId + ") on element of InteractiveElementNamedSkill.nameId.");
        }
    }
};
module.exports.InteractiveElementNamedSkill = InteractiveElementNamedSkill;
module.exports.types[220] = InteractiveElementNamedSkill;

class InteractiveElementWithAgeBonus extends InteractiveElement {
    constructor(elementId, elementTypeId, enabledSkills, disabledSkills, onCurrentMap, ageBonus) {
        super(elementId, elementTypeId, enabledSkills, disabledSkills, onCurrentMap);
        this.ageBonus = ageBonus;
        this.messageId = 398;
    }

    serialize() {
        super.serialize();
        if (this.ageBonus < -1 || this.ageBonus > 1000) {
            throw new Error("Forbidden value (" + this.ageBonus + ") on element ageBonus.");
        }
        this.buffer.writeShort(this.ageBonus);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.ageBonus = buffer.readShort();
        if (this.ageBonus < -1 || this.ageBonus > 1000) {
            throw new Error("Forbidden value (" + this.ageBonus + ") on element of InteractiveElementWithAgeBonus.ageBonus.");
        }
    }
};
module.exports.InteractiveElementWithAgeBonus = InteractiveElementWithAgeBonus;
module.exports.types[398] = InteractiveElementWithAgeBonus;

class MapObstacle extends ProtocolType {
    constructor(obstacleCellId, state) {
        super();
        this.obstacleCellId = obstacleCellId;
        this.state = state;
        this.messageId = 200;
    }

    serialize() {
        if (this.obstacleCellId < 0 || this.obstacleCellId > 559) {
            throw new Error("Forbidden value (" + this.obstacleCellId + ") on element obstacleCellId.");
        }
        this.buffer.writeVarShort(this.obstacleCellId);
        this.buffer.writeByte(this.state);
    }

    deserialize(buffer) {
        this.obstacleCellId = buffer.readVarUhShort();
        if (this.obstacleCellId < 0 || this.obstacleCellId > 559) {
            throw new Error("Forbidden value (" + this.obstacleCellId + ") on element of MapObstacle.obstacleCellId.");
        }
        this.state = buffer.readByte();
        if (this.state < 0) {
            throw new Error("Forbidden value (" + this.state + ") on element of MapObstacle.state.");
        };
    }
};
module.exports.MapObstacle = MapObstacle;
module.exports.types[200] = MapObstacle;

class SkillActionDescription extends ProtocolType {
    constructor(skillId) {
        super();
        this.skillId = skillId;
        this.messageId = 102;
    }

    serialize() {
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarShort(this.skillId);
    }

    deserialize(buffer) {
        this.skillId = buffer.readVarUhShort();
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element of SkillActionDescription.skillId.");
        }
    }
};
module.exports.SkillActionDescription = SkillActionDescription;
module.exports.types[102] = SkillActionDescription;

class SkillActionDescriptionTimed extends SkillActionDescription {
    constructor(skillId, time) {
        super(skillId);
        this.time = time;
        this.messageId = 103;
    }

    serialize() {
        super.serialize();
        if (this.time < 0 || this.time > 255) {
            throw new Error("Forbidden value (" + this.time + ") on element time.");
        }
        this.buffer.writeByte(this.time);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.time = buffer.readUnsignedByte();
        if (this.time < 0 || this.time > 255) {
            throw new Error("Forbidden value (" + this.time + ") on element of SkillActionDescriptionTimed.time.");
        }
    }
};
module.exports.SkillActionDescriptionTimed = SkillActionDescriptionTimed;
module.exports.types[103] = SkillActionDescriptionTimed;

class SkillActionDescriptionCollect extends SkillActionDescriptionTimed {
    constructor(skillId, time, min, max) {
        super(skillId, time);
        this.min = min;
        this.max = max;
        this.messageId = 99;
    }

    serialize() {
        super.serialize();
        if (this.min < 0) {
            throw new Error("Forbidden value (" + this.min + ") on element min.");
        }
        this.buffer.writeVarShort(this.min);
        if (this.max < 0) {
            throw new Error("Forbidden value (" + this.max + ") on element max.");
        }
        this.buffer.writeVarShort(this.max);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.min = buffer.readVarUhShort();
        if (this.min < 0) {
            throw new Error("Forbidden value (" + this.min + ") on element of SkillActionDescriptionCollect.min.");
        }
        this.max = buffer.readVarUhShort();
        if (this.max < 0) {
            throw new Error("Forbidden value (" + this.max + ") on element of SkillActionDescriptionCollect.max.");
        };
    }
};
module.exports.SkillActionDescriptionCollect = SkillActionDescriptionCollect;
module.exports.types[99] = SkillActionDescriptionCollect;

class SkillActionDescriptionCraft extends SkillActionDescription {
    constructor(skillId, probability) {
        super(skillId);
        this.probability = probability;
        this.messageId = 100;
    }

    serialize() {
        super.serialize();
        if (this.probability < 0) {
            throw new Error("Forbidden value (" + this.probability + ") on element probability.");
        }
        this.buffer.writeByte(this.probability);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.probability = buffer.readByte();
        if (this.probability < 0) {
            throw new Error("Forbidden value (" + this.probability + ") on element of SkillActionDescriptionCraft.probability.");
        }
    }
};
module.exports.SkillActionDescriptionCraft = SkillActionDescriptionCraft;
module.exports.types[100] = SkillActionDescriptionCraft;

class StatedElement extends ProtocolType {
    constructor(elementId, elementCellId, elementState, onCurrentMap) {
        super();
        this.elementId = elementId;
        this.elementCellId = elementCellId;
        this.elementState = elementState;
        this.onCurrentMap = onCurrentMap;
        this.messageId = 108;
    }

    serialize() {
        if (this.elementId < 0) {
            throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
        }
        this.buffer.writeInt(this.elementId);
        if (this.elementCellId < 0 || this.elementCellId > 559) {
            throw new Error("Forbidden value (" + this.elementCellId + ") on element elementCellId.");
        }
        this.buffer.writeVarShort(this.elementCellId);
        if (this.elementState < 0) {
            throw new Error("Forbidden value (" + this.elementState + ") on element elementState.");
        }
        this.buffer.writeVarInt(this.elementState);
        this.buffer.writeBoolean(this.onCurrentMap);
    }

    deserialize(buffer) {
        this.elementId = buffer.readInt();
        if (this.elementId < 0) {
            throw new Error("Forbidden value (" + this.elementId + ") on element of StatedElement.elementId.");
        }
        this.elementCellId = buffer.readVarUhShort();
        if (this.elementCellId < 0 || this.elementCellId > 559) {
            throw new Error("Forbidden value (" + this.elementCellId + ") on element of StatedElement.elementCellId.");
        };
        this.elementState = buffer.readVarUhInt();
        if (this.elementState < 0) {
            throw new Error("Forbidden value (" + this.elementState + ") on element of StatedElement.elementState.");
        };
        this.onCurrentMap = buffer.readBoolean();
    }
};
module.exports.StatedElement = StatedElement;
module.exports.types[108] = StatedElement;

class IdolsPreset extends ProtocolType {
    constructor(presetId, symbolId, idolId) {
        super();
        this.presetId = presetId;
        this.symbolId = symbolId;
        this.idolId = idolId;
        this.messageId = 491;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        if (this.symbolId < 0) {
            throw new Error("Forbidden value (" + this.symbolId + ") on element symbolId.");
        }
        this.buffer.writeByte(this.symbolId);
        this.buffer.writeShort(this.idolId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.idolId.length) {
            if (this.idolId[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.idolId[_loc2_] + ") on element 3 (starting at 1) of idolId.");
            }
            this.buffer.writeVarShort(this.idolId[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of IdolsPreset.presetId.");
        }
        this.symbolId = buffer.readByte();
        if (this.symbolId < 0) {
            throw new Error("Forbidden value (" + this.symbolId + ") on element of IdolsPreset.symbolId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of idolId.");
            }
            this.idolId.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.IdolsPreset = IdolsPreset;
module.exports.types[491] = IdolsPreset;

class Preset extends ProtocolType {
    constructor(presetId, symbolId, mount, objects) {
        super();
        this.presetId = presetId;
        this.symbolId = symbolId;
        this.mount = mount;
        this.objects = objects;
        this.messageId = 355;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        if (this.symbolId < 0) {
            throw new Error("Forbidden value (" + this.symbolId + ") on element symbolId.");
        }
        this.buffer.writeByte(this.symbolId);
        this.buffer.writeBoolean(this.mount);
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            (this.objects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of Preset.presetId.");
        }
        this.symbolId = buffer.readByte();
        if (this.symbolId < 0) {
            throw new Error("Forbidden value (" + this.symbolId + ") on element of Preset.symbolId.");
        };
        this.mount = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PresetItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.Preset = Preset;
module.exports.types[355] = Preset;

class PresetItem extends ProtocolType {
    constructor(position, objGid, objUid) {
        super();
        this.position = position;
        this.objGid = objGid;
        this.objUid = objUid;
        this.messageId = 354;
    }

    serialize() {
        this.buffer.writeByte(this.position);
        if (this.objGid < 0) {
            throw new Error("Forbidden value (" + this.objGid + ") on element objGid.");
        }
        this.buffer.writeVarShort(this.objGid);
        if (this.objUid < 0) {
            throw new Error("Forbidden value (" + this.objUid + ") on element objUid.");
        }
        this.buffer.writeVarInt(this.objUid);
    }

    deserialize(buffer) {
        this.position = buffer.readUnsignedByte();
        if (this.position < 0 || this.position > 255) {
            throw new Error("Forbidden value (" + this.position + ") on element of PresetItem.position.");
        }
        this.objGid = buffer.readVarUhShort();
        if (this.objGid < 0) {
            throw new Error("Forbidden value (" + this.objGid + ") on element of PresetItem.objGid.");
        };
        this.objUid = buffer.readVarUhInt();
        if (this.objUid < 0) {
            throw new Error("Forbidden value (" + this.objUid + ") on element of PresetItem.objUid.");
        };
    }
};
module.exports.PresetItem = PresetItem;
module.exports.types[354] = PresetItem;

class EntityLook extends ProtocolType {
    constructor(bonesId, skins, indexedColors, scales, subentities) {
        super();
        this.bonesId = bonesId;
        this.skins = skins;
        this.indexedColors = indexedColors;
        this.scales = scales;
        this.subentities = subentities;
        this.messageId = 55;
    }

    serialize() {
        if (this.bonesId < 0) {
            throw new Error("Forbidden value (" + this.bonesId + ") on element bonesId.");
        }
        this.buffer.writeVarShort(this.bonesId);
        this.buffer.writeShort(this.skins.length);
        var _loc2_ = 0;
        while (_loc2_ < this.skins.length) {
            if (this.skins[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.skins[_loc2_] + ") on element 2 (starting at 1) of skins.");
            }
            this.buffer.writeVarShort(this.skins[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.indexedColors.length);
        var _loc3_ = 0;
        while (_loc3_ < this.indexedColors.length) {
            this.buffer.writeInt(this.indexedColors[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.scales.length);
        var _loc4_ = 0;
        while (_loc4_ < this.scales.length) {
            this.buffer.writeVarShort(this.scales[_loc4_]);
            _loc4_++;
        }
        this.buffer.writeShort(this.subentities.length);
        var _loc5_ = 0;
        while (_loc5_ < this.subentities.length) {
            (this.subentities[_loc5_]).serialize(this.buffer);
            _loc5_++;
        }
    }

    deserialize(buffer) {
        var _loc10_ = 0;
        var _loc11_ = 0;
        var _loc12_ = 0;
        var _loc13_ = null;
        this.bonesId = buffer.readVarUhShort();
        if (this.bonesId < 0) {
            throw new Error("Forbidden value (" + this.bonesId + ") on element of EntityLook.bonesId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc10_ = buffer.readVarUhShort();
            if (_loc10_ < 0) {
                throw new Error("Forbidden value (" + _loc10_ + ") on elements of skins.");
            }
            this.skins.push(_loc10_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc11_ = buffer.readInt();
            this.indexedColors.push(_loc11_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc12_ = buffer.readVarShort();
            this.scales.push(_loc12_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc13_ = new SubEntity();
            _loc13_.deserialize(buffer);
            this.subentities.push(_loc13_);
            _loc9_++;
        }
    }
};
module.exports.EntityLook = EntityLook;
module.exports.types[55] = EntityLook;

class IndexedEntityLook extends ProtocolType {
    constructor(look, index) {
        super();
        this.look = look;
        this.index = index;
        this.messageId = 405;
    }

    serialize() {
        this.look.serialize(this.buffer);
        if (this.index < 0) {
            throw new Error("Forbidden value (" + this.index + ") on element index.");
        }
        this.buffer.writeByte(this.index);
    }

    deserialize(buffer) {
        this.look = new EntityLook();
        this.look.deserialize(buffer);
        this.index = buffer.readByte();
        if (this.index < 0) {
            throw new Error("Forbidden value (" + this.index + ") on element of IndexedEntityLook.index.");
        }
    }
};
module.exports.IndexedEntityLook = IndexedEntityLook;
module.exports.types[405] = IndexedEntityLook;

class SubEntity extends ProtocolType {
    constructor(bindingPointCategory, bindingPointIndex, subEntityLook) {
        super();
        this.bindingPointCategory = bindingPointCategory;
        this.bindingPointIndex = bindingPointIndex;
        this.subEntityLook = subEntityLook;
        this.messageId = 54;
    }

    serialize() {
        this.buffer.writeByte(this.bindingPointCategory);
        if (this.bindingPointIndex < 0) {
            throw new Error("Forbidden value (" + this.bindingPointIndex + ") on element bindingPointIndex.");
        }
        this.buffer.writeByte(this.bindingPointIndex);
        this.subEntityLook.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.bindingPointCategory = buffer.readByte();
        if (this.bindingPointCategory < 0) {
            throw new Error("Forbidden value (" + this.bindingPointCategory + ") on element of SubEntity.bindingPointCategory.");
        }
        this.bindingPointIndex = buffer.readByte();
        if (this.bindingPointIndex < 0) {
            throw new Error("Forbidden value (" + this.bindingPointIndex + ") on element of SubEntity.bindingPointIndex.");
        };
        this.subEntityLook = new EntityLook();
        this.subEntityLook.deserialize(buffer);
    }
};
module.exports.SubEntity = SubEntity;
module.exports.types[54] = SubEntity;

class ItemDurability extends ProtocolType {
    constructor(durability, durabilityMax) {
        super();
        this.durability = durability;
        this.durabilityMax = durabilityMax;
        this.messageId = 168;
    }

    serialize() {
        this.buffer.writeShort(this.durability);
        this.buffer.writeShort(this.durabilityMax);
    }

    deserialize(buffer) {
        this.durability = buffer.readShort();
        this.durabilityMax = buffer.readShort();;
    }
};
module.exports.ItemDurability = ItemDurability;
module.exports.types[168] = ItemDurability;

class MountClientData extends ProtocolType {
    constructor(id, model, ancestor, behaviors, name, sex, ownerId, experience, experienceForLevel, experienceForNextLevel, level, isRideable, maxPods, isWild, stamina, staminaMax, maturity, maturityForAdult, energy, energyMax, serenity, aggressivityMax, serenityMax, love, loveMax, fecondationTime, isFecondationReady, boostLimiter, boostMax, reproductionCount, reproductionCountMax, harnessGID, useHarnessColors, effectList) {
        super();
        this.id = id;
        this.model = model;
        this.ancestor = ancestor;
        this.behaviors = behaviors;
        this.name = name;
        this.sex = sex;
        this.ownerId = ownerId;
        this.experience = experience;
        this.experienceForLevel = experienceForLevel;
        this.experienceForNextLevel = experienceForNextLevel;
        this.level = level;
        this.isRideable = isRideable;
        this.maxPods = maxPods;
        this.isWild = isWild;
        this.stamina = stamina;
        this.staminaMax = staminaMax;
        this.maturity = maturity;
        this.maturityForAdult = maturityForAdult;
        this.energy = energy;
        this.energyMax = energyMax;
        this.serenity = serenity;
        this.aggressivityMax = aggressivityMax;
        this.serenityMax = serenityMax;
        this.love = love;
        this.loveMax = loveMax;
        this.fecondationTime = fecondationTime;
        this.isFecondationReady = isFecondationReady;
        this.boostLimiter = boostLimiter;
        this.boostMax = boostMax;
        this.reproductionCount = reproductionCount;
        this.reproductionCountMax = reproductionCountMax;
        this.harnessGID = harnessGID;
        this.useHarnessColors = useHarnessColors;
        this.effectList = effectList;
        this.messageId = 178;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.sex);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.isRideable);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.isWild);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.isFecondationReady);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 4, this.useHarnessColors);
        this.buffer.writeByte(_loc2_);
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        if (this.model < 0) {
            throw new Error("Forbidden value (" + this.model + ") on element model.");
        }
        this.buffer.writeVarInt(this.model);
        this.buffer.writeShort(this.ancestor.length);
        var _loc3_ = 0;
        while (_loc3_ < this.ancestor.length) {
            if (this.ancestor[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.ancestor[_loc3_] + ") on element 3 (starting at 1) of ancestor.");
            }
            this.buffer.writeInt(this.ancestor[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.behaviors.length);
        var _loc4_ = 0;
        while (_loc4_ < this.behaviors.length) {
            if (this.behaviors[_loc4_] < 0) {
                throw new Error("Forbidden value (" + this.behaviors[_loc4_] + ") on element 4 (starting at 1) of behaviors.");
            }
            this.buffer.writeInt(this.behaviors[_loc4_]);
            _loc4_++;
        }
        this.buffer.writeUTF(this.name);
        if (this.ownerId < 0) {
            throw new Error("Forbidden value (" + this.ownerId + ") on element ownerId.");
        }
        this.buffer.writeInt(this.ownerId);
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element experience.");
        }
        this.buffer.writeVarLong(this.experience);
        if (this.experienceForLevel < 0 || this.experienceForLevel > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceForLevel + ") on element experienceForLevel.");
        }
        this.buffer.writeVarLong(this.experienceForLevel);
        if (this.experienceForNextLevel < -9007199254740990 || this.experienceForNextLevel > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceForNextLevel + ") on element experienceForNextLevel.");
        }
        this.buffer.writeDouble(this.experienceForNextLevel);
        if (this.level < 0) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
        if (this.maxPods < 0) {
            throw new Error("Forbidden value (" + this.maxPods + ") on element maxPods.");
        }
        this.buffer.writeVarInt(this.maxPods);
        if (this.stamina < 0) {
            throw new Error("Forbidden value (" + this.stamina + ") on element stamina.");
        }
        this.buffer.writeVarInt(this.stamina);
        if (this.staminaMax < 0) {
            throw new Error("Forbidden value (" + this.staminaMax + ") on element staminaMax.");
        }
        this.buffer.writeVarInt(this.staminaMax);
        if (this.maturity < 0) {
            throw new Error("Forbidden value (" + this.maturity + ") on element maturity.");
        }
        this.buffer.writeVarInt(this.maturity);
        if (this.maturityForAdult < 0) {
            throw new Error("Forbidden value (" + this.maturityForAdult + ") on element maturityForAdult.");
        }
        this.buffer.writeVarInt(this.maturityForAdult);
        if (this.energy < 0) {
            throw new Error("Forbidden value (" + this.energy + ") on element energy.");
        }
        this.buffer.writeVarInt(this.energy);
        if (this.energyMax < 0) {
            throw new Error("Forbidden value (" + this.energyMax + ") on element energyMax.");
        }
        this.buffer.writeVarInt(this.energyMax);
        this.buffer.writeInt(this.serenity);
        this.buffer.writeInt(this.aggressivityMax);
        if (this.serenityMax < 0) {
            throw new Error("Forbidden value (" + this.serenityMax + ") on element serenityMax.");
        }
        this.buffer.writeVarInt(this.serenityMax);
        if (this.love < 0) {
            throw new Error("Forbidden value (" + this.love + ") on element love.");
        }
        this.buffer.writeVarInt(this.love);
        if (this.loveMax < 0) {
            throw new Error("Forbidden value (" + this.loveMax + ") on element loveMax.");
        }
        this.buffer.writeVarInt(this.loveMax);
        this.buffer.writeInt(this.fecondationTime);
        if (this.boostLimiter < 0) {
            throw new Error("Forbidden value (" + this.boostLimiter + ") on element boostLimiter.");
        }
        this.buffer.writeInt(this.boostLimiter);
        if (this.boostMax < -9007199254740990 || this.boostMax > 9007199254740990) {
            throw new Error("Forbidden value (" + this.boostMax + ") on element boostMax.");
        }
        this.buffer.writeDouble(this.boostMax);
        this.buffer.writeInt(this.reproductionCount);
        if (this.reproductionCountMax < 0) {
            throw new Error("Forbidden value (" + this.reproductionCountMax + ") on element reproductionCountMax.");
        }
        this.buffer.writeVarInt(this.reproductionCountMax);
        if (this.harnessGID < 0) {
            throw new Error("Forbidden value (" + this.harnessGID + ") on element harnessGID.");
        }
        this.buffer.writeVarShort(this.harnessGID);
        this.buffer.writeShort(this.effectList.length);
        var _loc5_ = 0;
        while (_loc5_ < this.effectList.length) {
            (this.effectList[_loc5_]).serialize(this.buffer);
            _loc5_++;
        }
    }

    deserialize(buffer) {
        var _loc8_ = 0;
        var _loc9_ = 0;
        var _loc10_ = null;
        this.deserializeByteBoxes(buffer);
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of MountClientData.id.");
        }
        this.model = buffer.readVarUhInt();
        if (this.model < 0) {
            throw new Error("Forbidden value (" + this.model + ") on element of MountClientData.model.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readInt();
            if (_loc8_ < 0) {
                throw new Error("Forbidden value (" + _loc8_ + ") on elements of ancestor.");
            }
            this.ancestor.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = buffer.readInt();
            if (_loc9_ < 0) {
                throw new Error("Forbidden value (" + _loc9_ + ") on elements of behaviors.");
            }
            this.behaviors.push(_loc9_);
            _loc5_++;
        }
        this._nameFunc(buffer);
        this.ownerId = buffer.readInt();
        if (this.ownerId < 0) {
            throw new Error("Forbidden value (" + this.ownerId + ") on element of MountClientData.ownerId.");
        };
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element of MountClientData.experience.");
        };
        this.experienceForLevel = buffer.readVarUhLong();
        if (this.experienceForLevel < 0 || this.experienceForLevel > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceForLevel + ") on element of MountClientData.experienceForLevel.");
        };
        this.experienceForNextLevel = buffer.readDouble();
        if (this.experienceForNextLevel < -9007199254740990 || this.experienceForNextLevel > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceForNextLevel + ") on element of MountClientData.experienceForNextLevel.");
        };
        this.level = buffer.readByte();
        if (this.level < 0) {
            throw new Error("Forbidden value (" + this.level + ") on element of MountClientData.level.");
        };
        this.maxPods = buffer.readVarUhInt();
        if (this.maxPods < 0) {
            throw new Error("Forbidden value (" + this.maxPods + ") on element of MountClientData.maxPods.");
        };
        this.stamina = buffer.readVarUhInt();
        if (this.stamina < 0) {
            throw new Error("Forbidden value (" + this.stamina + ") on element of MountClientData.stamina.");
        };
        this.staminaMax = buffer.readVarUhInt();
        if (this.staminaMax < 0) {
            throw new Error("Forbidden value (" + this.staminaMax + ") on element of MountClientData.staminaMax.");
        };
        this.maturity = buffer.readVarUhInt();
        if (this.maturity < 0) {
            throw new Error("Forbidden value (" + this.maturity + ") on element of MountClientData.maturity.");
        };
        this.maturityForAdult = buffer.readVarUhInt();
        if (this.maturityForAdult < 0) {
            throw new Error("Forbidden value (" + this.maturityForAdult + ") on element of MountClientData.maturityForAdult.");
        };
        this.energy = buffer.readVarUhInt();
        if (this.energy < 0) {
            throw new Error("Forbidden value (" + this.energy + ") on element of MountClientData.energy.");
        };
        this.energyMax = buffer.readVarUhInt();
        if (this.energyMax < 0) {
            throw new Error("Forbidden value (" + this.energyMax + ") on element of MountClientData.energyMax.");
        };
        this.serenity = buffer.readInt();
        this.aggressivityMax = buffer.readInt();;
        this.serenityMax = buffer.readVarUhInt();
        if (this.serenityMax < 0) {
            throw new Error("Forbidden value (" + this.serenityMax + ") on element of MountClientData.serenityMax.");
        };
        this.love = buffer.readVarUhInt();
        if (this.love < 0) {
            throw new Error("Forbidden value (" + this.love + ") on element of MountClientData.love.");
        };
        this.loveMax = buffer.readVarUhInt();
        if (this.loveMax < 0) {
            throw new Error("Forbidden value (" + this.loveMax + ") on element of MountClientData.loveMax.");
        };
        this.fecondationTime = buffer.readInt();;
        this.boostLimiter = buffer.readInt();
        if (this.boostLimiter < 0) {
            throw new Error("Forbidden value (" + this.boostLimiter + ") on element of MountClientData.boostLimiter.");
        };
        this.boostMax = buffer.readDouble();
        if (this.boostMax < -9007199254740990 || this.boostMax > 9007199254740990) {
            throw new Error("Forbidden value (" + this.boostMax + ") on element of MountClientData.boostMax.");
        };
        this.reproductionCount = buffer.readInt();;
        this.reproductionCountMax = buffer.readVarUhInt();
        if (this.reproductionCountMax < 0) {
            throw new Error("Forbidden value (" + this.reproductionCountMax + ") on element of MountClientData.reproductionCountMax.");
        };
        this.harnessGID = buffer.readVarUhShort();
        if (this.harnessGID < 0) {
            throw new Error("Forbidden value (" + this.harnessGID + ") on element of MountClientData.harnessGID.");
        };
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = new ObjectEffectInteger();
            _loc10_.deserialize(buffer);
            this.effectList.push(_loc10_);
            _loc7_++;
        }
    }
};
module.exports.MountClientData = MountClientData;
module.exports.types[178] = MountClientData;

class UpdateMountBoost extends ProtocolType {
    constructor(type) {
        super();
        this.type = type;
        this.messageId = 356;
    }

    serialize() {
        this.buffer.writeByte(this.type);
    }

    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of UpdateMountBoost.type.");
        }
    }
};
module.exports.UpdateMountBoost = UpdateMountBoost;
module.exports.types[356] = UpdateMountBoost;

class UpdateMountIntBoost extends UpdateMountBoost {
    constructor(type, value) {
        super(type);
        this.value = value;
        this.messageId = 357;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readInt();
    }
};
module.exports.UpdateMountIntBoost = UpdateMountIntBoost;
module.exports.types[357] = UpdateMountIntBoost;

class MountInformationsForPaddock extends ProtocolType {
    constructor(modelId, name, ownerName) {
        super();
        this.modelId = modelId;
        this.name = name;
        this.ownerName = ownerName;
        this.messageId = 184;
    }

    serialize() {
        if (this.modelId < 0) {
            throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        this.buffer.writeVarShort(this.modelId);
        this.buffer.writeUTF(this.name);
        this.buffer.writeUTF(this.ownerName);
    }

    deserialize(buffer) {
        this.modelId = buffer.readVarUhShort();
        if (this.modelId < 0) {
            throw new Error("Forbidden value (" + this.modelId + ") on element of MountInformationsForPaddock.modelId.");
        }
        this.name = buffer.readUTF();
        this.ownerName = buffer.readUTF();;
    }
};
module.exports.MountInformationsForPaddock = MountInformationsForPaddock;
module.exports.types[184] = MountInformationsForPaddock;

class PaddockBuyableInformations extends ProtocolType {
    constructor(price, locked) {
        super();
        this.price = price;
        this.locked = locked;
        this.messageId = 130;
    }

    serialize() {
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarLong(this.price);
        this.buffer.writeBoolean(this.locked);
    }

    deserialize(buffer) {
        this.price = buffer.readVarUhLong();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element of PaddockBuyableInformations.price.");
        }
        this.locked = buffer.readBoolean();
    }
};
module.exports.PaddockBuyableInformations = PaddockBuyableInformations;
module.exports.types[130] = PaddockBuyableInformations;

class PaddockInformations extends ProtocolType {
    constructor(maxOutdoorMount, maxItems) {
        super();
        this.maxOutdoorMount = maxOutdoorMount;
        this.maxItems = maxItems;
        this.messageId = 132;
    }

    serialize() {
        if (this.maxOutdoorMount < 0) {
            throw new Error("Forbidden value (" + this.maxOutdoorMount + ") on element maxOutdoorMount.");
        }
        this.buffer.writeVarShort(this.maxOutdoorMount);
        if (this.maxItems < 0) {
            throw new Error("Forbidden value (" + this.maxItems + ") on element maxItems.");
        }
        this.buffer.writeVarShort(this.maxItems);
    }

    deserialize(buffer) {
        this.maxOutdoorMount = buffer.readVarUhShort();
        if (this.maxOutdoorMount < 0) {
            throw new Error("Forbidden value (" + this.maxOutdoorMount + ") on element of PaddockInformations.maxOutdoorMount.");
        }
        this.maxItems = buffer.readVarUhShort();
        if (this.maxItems < 0) {
            throw new Error("Forbidden value (" + this.maxItems + ") on element of PaddockInformations.maxItems.");
        };
    }
};
module.exports.PaddockInformations = PaddockInformations;
module.exports.types[132] = PaddockInformations;

class PaddockContentInformations extends PaddockInformations {
    constructor(maxOutdoorMount, maxItems, paddockId, worldX, worldY, mapId, subAreaId, abandonned, mountsInformations) {
        super(maxOutdoorMount, maxItems);
        this.paddockId = paddockId;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.abandonned = abandonned;
        this.mountsInformations = mountsInformations;
        this.messageId = 183;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.paddockId);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeBoolean(this.abandonned);
        this.buffer.writeShort(this.mountsInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mountsInformations.length) {
            (this.mountsInformations[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        this.paddockId = buffer.readInt();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of PaddockContentInformations.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of PaddockContentInformations.worldY.");
        };
        this.mapId = buffer.readInt();;
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PaddockContentInformations.subAreaId.");
        };
        this.abandonned = buffer.readBoolean();;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MountInformationsForPaddock();
            _loc4_.deserialize(buffer);
            this.mountsInformations.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.PaddockContentInformations = PaddockContentInformations;
module.exports.types[183] = PaddockContentInformations;

class PaddockGuildedInformations extends PaddockBuyableInformations {
    constructor(price, locked, deserted, guildInfo) {
        super(price, locked);
        this.deserted = deserted;
        this.guildInfo = guildInfo;
        this.messageId = 508;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.deserted);
        this.guildInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.deserted = buffer.readBoolean();
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
    }
};
module.exports.PaddockGuildedInformations = PaddockGuildedInformations;
module.exports.types[508] = PaddockGuildedInformations;

class PaddockInformationsForSell extends ProtocolType {
    constructor(guildOwner, worldX, worldY, subAreaId, nbMount, nbObject, price) {
        super();
        this.guildOwner = guildOwner;
        this.worldX = worldX;
        this.worldY = worldY;
        this.subAreaId = subAreaId;
        this.nbMount = nbMount;
        this.nbObject = nbObject;
        this.price = price;
        this.messageId = 222;
    }

    serialize() {
        this.buffer.writeUTF(this.guildOwner);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeByte(this.nbMount);
        this.buffer.writeByte(this.nbObject);
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarLong(this.price);
    }

    deserialize(buffer) {
        this.guildOwner = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of PaddockInformationsForSell.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of PaddockInformationsForSell.worldY.");
        };
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PaddockInformationsForSell.subAreaId.");
        };
        this.nbMount = buffer.readByte();;
        this.nbObject = buffer.readByte();;
        this.price = buffer.readVarUhLong();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element of PaddockInformationsForSell.price.");
        };
    }
};
module.exports.PaddockInformationsForSell = PaddockInformationsForSell;
module.exports.types[222] = PaddockInformationsForSell;

class PaddockInstancesInformations extends PaddockInformations {
    constructor(maxOutdoorMount, maxItems, paddocks) {
        super(maxOutdoorMount, maxItems);
        this.paddocks = paddocks;
        this.messageId = 509;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.paddocks.length);
        var _loc2_ = 0;
        while (_loc2_ < this.paddocks.length) {
            this.buffer.writeShort((this.paddocks[_loc2_]).getTypeId());
            (this.paddocks[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(PaddockBuyableInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.paddocks.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.PaddockInstancesInformations = PaddockInstancesInformations;
module.exports.types[509] = PaddockInstancesInformations;

class PaddockItem extends ObjectItemInRolePlay {
    constructor(cellId, objectGID, durability) {
        super(cellId, objectGID);
        this.durability = durability;
        this.messageId = 185;
    }

    serialize() {
        super.serialize();
        this.durability.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.durability = new ItemDurability();
        this.durability.deserialize(buffer);
    }
};
module.exports.PaddockItem = PaddockItem;
module.exports.types[185] = PaddockItem;

class PrismInformation extends ProtocolType {
    constructor(typeId, state, nextVulnerabilityDate, placementDate, rewardTokenCount) {
        super();
        this.typeId = typeId;
        this.state = state;
        this.nextVulnerabilityDate = nextVulnerabilityDate;
        this.placementDate = placementDate;
        this.rewardTokenCount = rewardTokenCount;
        this.messageId = 428;
    }

    serialize() {
        if (this.typeId < 0) {
            throw new Error("Forbidden value (" + this.typeId + ") on element typeId.");
        }
        this.buffer.writeByte(this.typeId);
        this.buffer.writeByte(this.state);
        if (this.nextVulnerabilityDate < 0) {
            throw new Error("Forbidden value (" + this.nextVulnerabilityDate + ") on element nextVulnerabilityDate.");
        }
        this.buffer.writeInt(this.nextVulnerabilityDate);
        if (this.placementDate < 0) {
            throw new Error("Forbidden value (" + this.placementDate + ") on element placementDate.");
        }
        this.buffer.writeInt(this.placementDate);
        if (this.rewardTokenCount < 0) {
            throw new Error("Forbidden value (" + this.rewardTokenCount + ") on element rewardTokenCount.");
        }
        this.buffer.writeVarInt(this.rewardTokenCount);
    }

    deserialize(buffer) {
        this.typeId = buffer.readByte();
        if (this.typeId < 0) {
            throw new Error("Forbidden value (" + this.typeId + ") on element of PrismInformation.typeId.");
        }
        this.state = buffer.readByte();
        if (this.state < 0) {
            throw new Error("Forbidden value (" + this.state + ") on element of PrismInformation.state.");
        };
        this.nextVulnerabilityDate = buffer.readInt();
        if (this.nextVulnerabilityDate < 0) {
            throw new Error("Forbidden value (" + this.nextVulnerabilityDate + ") on element of PrismInformation.nextVulnerabilityDate.");
        };
        this.placementDate = buffer.readInt();
        if (this.placementDate < 0) {
            throw new Error("Forbidden value (" + this.placementDate + ") on element of PrismInformation.placementDate.");
        };
        this.rewardTokenCount = buffer.readVarUhInt();
        if (this.rewardTokenCount < 0) {
            throw new Error("Forbidden value (" + this.rewardTokenCount + ") on element of PrismInformation.rewardTokenCount.");
        };
    }
};
module.exports.PrismInformation = PrismInformation;
module.exports.types[428] = PrismInformation;

class AllianceInsiderPrismInformation extends PrismInformation {
    constructor(typeId, state, nextVulnerabilityDate, placementDate, rewardTokenCount, lastTimeSlotModificationDate, lastTimeSlotModificationAuthorGuildId, lastTimeSlotModificationAuthorId, lastTimeSlotModificationAuthorName, modulesObjects) {
        super(typeId, state, nextVulnerabilityDate, placementDate, rewardTokenCount);
        this.lastTimeSlotModificationDate = lastTimeSlotModificationDate;
        this.lastTimeSlotModificationAuthorGuildId = lastTimeSlotModificationAuthorGuildId;
        this.lastTimeSlotModificationAuthorId = lastTimeSlotModificationAuthorId;
        this.lastTimeSlotModificationAuthorName = lastTimeSlotModificationAuthorName;
        this.modulesObjects = modulesObjects;
        this.messageId = 431;
    }

    serialize() {
        super.serialize();
        if (this.lastTimeSlotModificationDate < 0) {
            throw new Error("Forbidden value (" + this.lastTimeSlotModificationDate + ") on element lastTimeSlotModificationDate.");
        }
        this.buffer.writeInt(this.lastTimeSlotModificationDate);
        if (this.lastTimeSlotModificationAuthorGuildId < 0) {
            throw new Error("Forbidden value (" + this.lastTimeSlotModificationAuthorGuildId + ") on element lastTimeSlotModificationAuthorGuildId.");
        }
        this.buffer.writeVarInt(this.lastTimeSlotModificationAuthorGuildId);
        if (this.lastTimeSlotModificationAuthorId < 0 || this.lastTimeSlotModificationAuthorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.lastTimeSlotModificationAuthorId + ") on element lastTimeSlotModificationAuthorId.");
        }
        this.buffer.writeVarLong(this.lastTimeSlotModificationAuthorId);
        this.buffer.writeUTF(this.lastTimeSlotModificationAuthorName);
        this.buffer.writeShort(this.modulesObjects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.modulesObjects.length) {
            (this.modulesObjects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        this.lastTimeSlotModificationDate = buffer.readInt();
        if (this.lastTimeSlotModificationDate < 0) {
            throw new Error("Forbidden value (" + this.lastTimeSlotModificationDate + ") on element of AllianceInsiderPrismInformation.lastTimeSlotModificationDate.");
        }
        this.lastTimeSlotModificationAuthorGuildId = buffer.readVarUhInt();
        if (this.lastTimeSlotModificationAuthorGuildId < 0) {
            throw new Error("Forbidden value (" + this.lastTimeSlotModificationAuthorGuildId + ") on element of AllianceInsiderPrismInformation.lastTimeSlotModificationAuthorGuildId.");
        };
        this.lastTimeSlotModificationAuthorId = buffer.readVarUhLong();
        if (this.lastTimeSlotModificationAuthorId < 0 || this.lastTimeSlotModificationAuthorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.lastTimeSlotModificationAuthorId + ") on element of AllianceInsiderPrismInformation.lastTimeSlotModificationAuthorId.");
        };
        this.lastTimeSlotModificationAuthorName = buffer.readUTF();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.modulesObjects.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.AllianceInsiderPrismInformation = AllianceInsiderPrismInformation;
module.exports.types[431] = AllianceInsiderPrismInformation;

class AlliancePrismInformation extends PrismInformation {
    constructor(typeId, state, nextVulnerabilityDate, placementDate, rewardTokenCount, alliance) {
        super(typeId, state, nextVulnerabilityDate, placementDate, rewardTokenCount);
        this.alliance = alliance;
        this.messageId = 427;
    }

    serialize() {
        super.serialize();
        this.alliance.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.alliance = new AllianceInformations();
        this.alliance.deserialize(buffer);
    }
};
module.exports.AlliancePrismInformation = AlliancePrismInformation;
module.exports.types[427] = AlliancePrismInformation;

class PrismFightersInformation extends ProtocolType {
    constructor(subAreaId, waitingForHelpInfo, allyCharactersInformations, enemyCharactersInformations) {
        super();
        this.subAreaId = subAreaId;
        this.waitingForHelpInfo = waitingForHelpInfo;
        this.allyCharactersInformations = allyCharactersInformations;
        this.enemyCharactersInformations = enemyCharactersInformations;
        this.messageId = 443;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.waitingForHelpInfo.serialize(this.buffer);
        this.buffer.writeShort(this.allyCharactersInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.allyCharactersInformations.length) {
            this.buffer.writeShort((this.allyCharactersInformations[_loc2_]).getTypeId());
            (this.allyCharactersInformations[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.enemyCharactersInformations.length);
        var _loc3_ = 0;
        while (_loc3_ < this.enemyCharactersInformations.length) {
            this.buffer.writeShort((this.enemyCharactersInformations[_loc3_]).getTypeId());
            (this.enemyCharactersInformations[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = 0;
        var _loc9_ = null;
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightersInformation.subAreaId.");
        }
        this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
        this.waitingForHelpInfo.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc6_);
            _loc7_.deserialize(buffer);
            this.allyCharactersInformations.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readUnsignedShort();
            _loc9_ = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc8_);
            _loc9_.deserialize(buffer);
            this.enemyCharactersInformations.push(_loc9_);
            _loc5_++;
        }
    }
};
module.exports.PrismFightersInformation = PrismFightersInformation;
module.exports.types[443] = PrismFightersInformation;

class PrismSubareaEmptyInfo extends ProtocolType {
    constructor(subAreaId, allianceId) {
        super();
        this.subAreaId = subAreaId;
        this.allianceId = allianceId;
        this.messageId = 438;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        this.buffer.writeVarInt(this.allianceId);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismSubareaEmptyInfo.subAreaId.");
        }
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element of PrismSubareaEmptyInfo.allianceId.");
        };
    }
};
module.exports.PrismSubareaEmptyInfo = PrismSubareaEmptyInfo;
module.exports.types[438] = PrismSubareaEmptyInfo;

class PrismGeolocalizedInformation extends PrismSubareaEmptyInfo {
    constructor(subAreaId, allianceId, worldX, worldY, mapId, prism) {
        super(subAreaId, allianceId);
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.prism = prism;
        this.messageId = 434;
    }

    serialize() {
        super.serialize();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        this.buffer.writeShort(this.prism.getTypeId());
        this.prism.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of PrismGeolocalizedInformation.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of PrismGeolocalizedInformation.worldY.");
        };
        this.mapId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        this.prism = ProtocolTypeManager.getInstance(PrismInformation, _loc2_);
        this.prism.deserialize(buffer);
    }
};
module.exports.PrismGeolocalizedInformation = PrismGeolocalizedInformation;
module.exports.types[434] = PrismGeolocalizedInformation;

class Shortcut extends ProtocolType {
    constructor(slot) {
        super();
        this.slot = slot;
        this.messageId = 369;
    }

    serialize() {
        if (this.slot < 0 || this.slot > 99) {
            throw new Error("Forbidden value (" + this.slot + ") on element slot.");
        }
        this.buffer.writeByte(this.slot);
    }

    deserialize(buffer) {
        this.slot = buffer.readByte();
        if (this.slot < 0 || this.slot > 99) {
            throw new Error("Forbidden value (" + this.slot + ") on element of Shortcut.slot.");
        }
    }
};
module.exports.Shortcut = Shortcut;
module.exports.types[369] = Shortcut;

class ShortcutEmote extends Shortcut {
    constructor(slot, emoteId) {
        super(slot);
        this.emoteId = emoteId;
        this.messageId = 389;
    }

    serialize() {
        super.serialize();
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element of ShortcutEmote.emoteId.");
        }
    }
};
module.exports.ShortcutEmote = ShortcutEmote;
module.exports.types[389] = ShortcutEmote;

class ShortcutObject extends Shortcut {
    constructor(slot) {
        super(slot);
        this.messageId = 367;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.ShortcutObject = ShortcutObject;
module.exports.types[367] = ShortcutObject;

class ShortcutObjectIdolsPreset extends ShortcutObject {
    constructor(slot, presetId) {
        super(slot);
        this.presetId = presetId;
        this.messageId = 492;
    }

    serialize() {
        super.serialize();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of ShortcutObjectIdolsPreset.presetId.");
        }
    }
};
module.exports.ShortcutObjectIdolsPreset = ShortcutObjectIdolsPreset;
module.exports.types[492] = ShortcutObjectIdolsPreset;

class ShortcutObjectItem extends ShortcutObject {
    constructor(slot, itemUID, itemGID) {
        super(slot);
        this.itemUID = itemUID;
        this.itemGID = itemGID;
        this.messageId = 371;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.itemUID);
        this.buffer.writeInt(this.itemGID);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.itemUID = buffer.readInt();
        this.itemGID = buffer.readInt();;
    }
};
module.exports.ShortcutObjectItem = ShortcutObjectItem;
module.exports.types[371] = ShortcutObjectItem;

class ShortcutObjectPreset extends ShortcutObject {
    constructor(slot, presetId) {
        super(slot);
        this.presetId = presetId;
        this.messageId = 370;
    }

    serialize() {
        super.serialize();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of ShortcutObjectPreset.presetId.");
        }
    }
};
module.exports.ShortcutObjectPreset = ShortcutObjectPreset;
module.exports.types[370] = ShortcutObjectPreset;

class ShortcutSmiley extends Shortcut {
    constructor(slot, smileyId) {
        super(slot);
        this.smileyId = smileyId;
        this.messageId = 388;
    }

    serialize() {
        super.serialize();
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element of ShortcutSmiley.smileyId.");
        }
    }
};
module.exports.ShortcutSmiley = ShortcutSmiley;
module.exports.types[388] = ShortcutSmiley;

class ShortcutSpell extends Shortcut {
    constructor(slot, spellId) {
        super(slot);
        this.spellId = spellId;
        this.messageId = 368;
    }

    serialize() {
        super.serialize();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of ShortcutSpell.spellId.");
        }
    }
};
module.exports.ShortcutSpell = ShortcutSpell;
module.exports.types[368] = ShortcutSpell;

class AlliancedGuildFactSheetInformations extends GuildInformations {
    constructor(guildId, guildName, guildLevel, guildEmblem, allianceInfos) {
        super(guildId, guildName, guildLevel, guildEmblem);
        this.allianceInfos = allianceInfos;
        this.messageId = 422;
    }

    serialize() {
        super.serialize();
        this.allianceInfos.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceInfos = new BasicNamedAllianceInformations();
        this.allianceInfos.deserialize(buffer);
    }
};
module.exports.AlliancedGuildFactSheetInformations = AlliancedGuildFactSheetInformations;
module.exports.types[422] = AlliancedGuildFactSheetInformations;

class AllianceFactSheetInformations extends AllianceInformations {
    constructor(param1, param2, allianceName, allianceEmblem, creationDate) {
        super(allianceId, allianceTag, allianceName, allianceEmblem);
        this.creationDate = creationDate;
        this.messageId = 421;
    }

    serialize() {
        super.serialize();
        if (this.creationDate < 0) {
            throw new Error("Forbidden value (" + this.creationDate + ") on element creationDate.");
        }
        this.buffer.writeInt(this.creationDate);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.creationDate = buffer.readInt();
        if (this.creationDate < 0) {
            throw new Error("Forbidden value (" + this.creationDate + ") on element of AllianceFactSheetInformations.creationDate.");
        }
    }
};
module.exports.AllianceFactSheetInformations = AllianceFactSheetInformations;
module.exports.types[421] = AllianceFactSheetInformations;

class AllianceVersatileInformations extends ProtocolType {
    constructor(allianceId, nbGuilds, nbMembers, nbSubarea) {
        super();
        this.allianceId = allianceId;
        this.nbGuilds = nbGuilds;
        this.nbMembers = nbMembers;
        this.nbSubarea = nbSubarea;
        this.messageId = 432;
    }

    serialize() {
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        this.buffer.writeVarInt(this.allianceId);
        if (this.nbGuilds < 0) {
            throw new Error("Forbidden value (" + this.nbGuilds + ") on element nbGuilds.");
        }
        this.buffer.writeVarShort(this.nbGuilds);
        if (this.nbMembers < 0) {
            throw new Error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
        }
        this.buffer.writeVarShort(this.nbMembers);
        if (this.nbSubarea < 0) {
            throw new Error("Forbidden value (" + this.nbSubarea + ") on element nbSubarea.");
        }
        this.buffer.writeVarShort(this.nbSubarea);
    }

    deserialize(buffer) {
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element of AllianceVersatileInformations.allianceId.");
        }
        this.nbGuilds = buffer.readVarUhShort();
        if (this.nbGuilds < 0) {
            throw new Error("Forbidden value (" + this.nbGuilds + ") on element of AllianceVersatileInformations.nbGuilds.");
        };
        this.nbMembers = buffer.readVarUhShort();
        if (this.nbMembers < 0) {
            throw new Error("Forbidden value (" + this.nbMembers + ") on element of AllianceVersatileInformations.nbMembers.");
        };
        this.nbSubarea = buffer.readVarUhShort();
        if (this.nbSubarea < 0) {
            throw new Error("Forbidden value (" + this.nbSubarea + ") on element of AllianceVersatileInformations.nbSubarea.");
        };
    }
};
module.exports.AllianceVersatileInformations = AllianceVersatileInformations;
module.exports.types[432] = AllianceVersatileInformations;

class GuildFactSheetInformations extends GuildInformations {
    constructor(guildId, guildName, guildLevel, guildEmblem, leaderId, nbMembers) {
        super(guildId, guildName, guildLevel, guildEmblem);
        this.leaderId = leaderId;
        this.nbMembers = nbMembers;
        this.messageId = 424;
    }

    serialize() {
        super.serialize();
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
        }
        this.buffer.writeVarLong(this.leaderId);
        if (this.nbMembers < 0) {
            throw new Error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
        }
        this.buffer.writeVarShort(this.nbMembers);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.leaderId = buffer.readVarUhLong();
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leaderId + ") on element of GuildFactSheetInformations.leaderId.");
        }
        this.nbMembers = buffer.readVarUhShort();
        if (this.nbMembers < 0) {
            throw new Error("Forbidden value (" + this.nbMembers + ") on element of GuildFactSheetInformations.nbMembers.");
        };
    }
};
module.exports.GuildFactSheetInformations = GuildFactSheetInformations;
module.exports.types[424] = GuildFactSheetInformations;

class GuildVersatileInformations extends ProtocolType {
    constructor(guildId, leaderId, guildLevel, nbMembers) {
        super();
        this.guildId = guildId;
        this.leaderId = leaderId;
        this.guildLevel = guildLevel;
        this.nbMembers = nbMembers;
        this.messageId = 435;
    }

    serialize() {
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
        }
        this.buffer.writeVarLong(this.leaderId);
        if (this.guildLevel < 1 || this.guildLevel > 200) {
            throw new Error("Forbidden value (" + this.guildLevel + ") on element guildLevel.");
        }
        this.buffer.writeByte(this.guildLevel);
        if (this.nbMembers < 1 || this.nbMembers > 240) {
            throw new Error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
        }
        this.buffer.writeByte(this.nbMembers);
    }

    deserialize(buffer) {
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element of GuildVersatileInformations.guildId.");
        }
        this.leaderId = buffer.readVarUhLong();
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leaderId + ") on element of GuildVersatileInformations.leaderId.");
        };
        this.guildLevel = buffer.readUnsignedByte();
        if (this.guildLevel < 1 || this.guildLevel > 200) {
            throw new Error("Forbidden value (" + this.guildLevel + ") on element of GuildVersatileInformations.guildLevel.");
        };
        this.nbMembers = buffer.readUnsignedByte();
        if (this.nbMembers < 1 || this.nbMembers > 240) {
            throw new Error("Forbidden value (" + this.nbMembers + ") on element of GuildVersatileInformations.nbMembers.");
        };
    }
};
module.exports.GuildVersatileInformations = GuildVersatileInformations;
module.exports.types[435] = GuildVersatileInformations;

class GuildInAllianceVersatileInformations extends GuildVersatileInformations {
    constructor(guildId, leaderId, guildLevel, nbMembers, allianceId) {
        super(guildId, leaderId, guildLevel, nbMembers);
        this.allianceId = allianceId;
        this.messageId = 437;
    }

    serialize() {
        super.serialize();
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        this.buffer.writeVarInt(this.allianceId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element of GuildInAllianceVersatileInformations.allianceId.");
        }
    }
};
module.exports.GuildInAllianceVersatileInformations = GuildInAllianceVersatileInformations;
module.exports.types[437] = GuildInAllianceVersatileInformations;

class GuildInsiderFactSheetInformations extends GuildFactSheetInformations {
    constructor(param1, param2, param3, guildEmblem, leaderId, nbMembers, leaderName, nbConnectedMembers, nbTaxCollectors, lastActivity) {
        super(guildId, guildName, guildLevel, guildEmblem, leaderId, nbMembers);
        this.leaderName = leaderName;
        this.nbConnectedMembers = nbConnectedMembers;
        this.nbTaxCollectors = nbTaxCollectors;
        this.lastActivity = lastActivity;
        this.messageId = 423;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.leaderName);
        if (this.nbConnectedMembers < 0) {
            throw new Error("Forbidden value (" + this.nbConnectedMembers + ") on element nbConnectedMembers.");
        }
        this.buffer.writeVarShort(this.nbConnectedMembers);
        if (this.nbTaxCollectors < 0) {
            throw new Error("Forbidden value (" + this.nbTaxCollectors + ") on element nbTaxCollectors.");
        }
        this.buffer.writeByte(this.nbTaxCollectors);
        if (this.lastActivity < 0) {
            throw new Error("Forbidden value (" + this.lastActivity + ") on element lastActivity.");
        }
        this.buffer.writeInt(this.lastActivity);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.leaderName = buffer.readUTF();
        this.nbConnectedMembers = buffer.readVarUhShort();
        if (this.nbConnectedMembers < 0) {
            throw new Error("Forbidden value (" + this.nbConnectedMembers + ") on element of GuildInsiderFactSheetInformations.nbConnectedMembers.");
        }
        this.nbTaxCollectors = buffer.readByte();
        if (this.nbTaxCollectors < 0) {
            throw new Error("Forbidden value (" + this.nbTaxCollectors + ") on element of GuildInsiderFactSheetInformations.nbTaxCollectors.");
        };
        this.lastActivity = buffer.readInt();
        if (this.lastActivity < 0) {
            throw new Error("Forbidden value (" + this.lastActivity + ") on element of GuildInsiderFactSheetInformations.lastActivity.");
        };
    }
};
module.exports.GuildInsiderFactSheetInformations = GuildInsiderFactSheetInformations;
module.exports.types[423] = GuildInsiderFactSheetInformations;

class StartupActionAddObject extends ProtocolType {
    constructor(uid, title, text, descUrl, pictureUrl, items) {
        super();
        this.uid = uid;
        this.title = title;
        this.text = text;
        this.descUrl = descUrl;
        this.pictureUrl = pictureUrl;
        this.items = items;
        this.messageId = 52;
    }

    serialize() {
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element uid.");
        }
        this.buffer.writeInt(this.uid);
        this.buffer.writeUTF(this.title);
        this.buffer.writeUTF(this.text);
        this.buffer.writeUTF(this.descUrl);
        this.buffer.writeUTF(this.pictureUrl);
        this.buffer.writeShort(this.items.length);
        var _loc2_ = 0;
        while (_loc2_ < this.items.length) {
            (this.items[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.uid = buffer.readInt();
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element of StartupActionAddObject.uid.");
        }
        this.title = buffer.readUTF();
        this.text = buffer.readUTF();;
        this.descUrl = buffer.readUTF();;
        this.pictureUrl = buffer.readUTF();;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemInformationWithQuantity();
            _loc4_.deserialize(buffer);
            this.items.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.StartupActionAddObject = StartupActionAddObject;
module.exports.types[52] = StartupActionAddObject;

class TrustCertificate extends ProtocolType {
    constructor(id, hash) {
        super();
        this.id = id;
        this.hash = hash;
        this.messageId = 377;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeInt(this.id);
        this.buffer.writeUTF(this.hash);
    }

    deserialize(buffer) {
        this.id = buffer.readInt();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of TrustCertificate.id.");
        }
        this.hash = buffer.readUTF();
    }
};
module.exports.TrustCertificate = TrustCertificate;
module.exports.types[377] = TrustCertificate;

class ContentPart extends ProtocolType {
    constructor(id, state) {
        super();
        this.id = id;
        this.state = state;
        this.messageId = 350;
    }

    serialize() {
        this.buffer.writeUTF(this.id);
        this.buffer.writeByte(this.state);
    }

    deserialize(buffer) {
        this.id = buffer.readUTF();
        this.state = buffer.readByte();
        if (this.state < 0) {
            throw new Error("Forbidden value (" + this.state + ") on element of ContentPart.state.");
        }
    }
};
module.exports.ContentPart = ContentPart;
module.exports.types[350] = ContentPart;

class Version extends ProtocolType {
    constructor(major, minor, release, revision, patch, buildType) {
        super();
        this.major = major;
        this.minor = minor;
        this.release = release;
        this.revision = revision;
        this.patch = patch;
        this.buildType = buildType;
        this.messageId = 11;
    }

    serialize() {
        if (this.major < 0) {
            throw new Error("Forbidden value (" + this.major + ") on element major.");
        }
        this.buffer.writeByte(this.major);
        if (this.minor < 0) {
            throw new Error("Forbidden value (" + this.minor + ") on element minor.");
        }
        this.buffer.writeByte(this.minor);
        if (this.release < 0) {
            throw new Error("Forbidden value (" + this.release + ") on element release.");
        }
        this.buffer.writeByte(this.release);
        if (this.revision < 0) {
            throw new Error("Forbidden value (" + this.revision + ") on element revision.");
        }
        this.buffer.writeInt(this.revision);
        if (this.patch < 0) {
            throw new Error("Forbidden value (" + this.patch + ") on element patch.");
        }
        this.buffer.writeByte(this.patch);
        this.buffer.writeByte(this.buildType);
    }

    deserialize(buffer) {
        this.major = buffer.readByte();
        if (this.major < 0) {
            throw new Error("Forbidden value (" + this.major + ") on element of Version.major.");
        }
        this.minor = buffer.readByte();
        if (this.minor < 0) {
            throw new Error("Forbidden value (" + this.minor + ") on element of Version.minor.");
        };
        this.release = buffer.readByte();
        if (this.release < 0) {
            throw new Error("Forbidden value (" + this.release + ") on element of Version.release.");
        };
        this.revision = buffer.readInt();
        if (this.revision < 0) {
            throw new Error("Forbidden value (" + this.revision + ") on element of Version.revision.");
        };
        this.patch = buffer.readByte();
        if (this.patch < 0) {
            throw new Error("Forbidden value (" + this.patch + ") on element of Version.patch.");
        };
        this.buildType = buffer.readByte();
        if (this.buildType < 0) {
            throw new Error("Forbidden value (" + this.buildType + ") on element of Version.buildType.");
        };
    }
};
module.exports.Version = Version;
module.exports.types[11] = Version;

class VersionExtended extends Version {
    constructor(major, minor, release, revision, patch, buildType, install, technology) {
        super(major, minor, release, revision, patch, buildType);
        this.install = install;
        this.technology = technology;
        this.messageId = 393;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.install);
        this.buffer.writeByte(this.technology);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.install = buffer.readByte();
        if (this.install < 0) {
            throw new Error("Forbidden value (" + this.install + ") on element of VersionExtended.install.");
        }
        this.technology = buffer.readByte();
        if (this.technology < 0) {
            throw new Error("Forbidden value (" + this.technology + ") on element of VersionExtended.technology.");
        };
    }
};
module.exports.VersionExtended = VersionExtended;
module.exports.types[393] = VersionExtended;

class KrosmasterFigure extends ProtocolType {
    constructor(uid, figure, pedestal, bound) {
        super();
        this.uid = uid;
        this.figure = figure;
        this.pedestal = pedestal;
        this.bound = bound;
        this.messageId = 397;
    }

    serialize() {
        this.buffer.writeUTF(this.uid);
        if (this.figure < 0) {
            throw new Error("Forbidden value (" + this.figure + ") on element figure.");
        }
        this.buffer.writeVarShort(this.figure);
        if (this.pedestal < 0) {
            throw new Error("Forbidden value (" + this.pedestal + ") on element pedestal.");
        }
        this.buffer.writeVarShort(this.pedestal);
        this.buffer.writeBoolean(this.bound);
    }

    deserialize(buffer) {
        this.uid = buffer.readUTF();
        this.figure = buffer.readVarUhShort();
        if (this.figure < 0) {
            throw new Error("Forbidden value (" + this.figure + ") on element of KrosmasterFigure.figure.");
        }
        this.pedestal = buffer.readVarUhShort();
        if (this.pedestal < 0) {
            throw new Error("Forbidden value (" + this.pedestal + ") on element of KrosmasterFigure.pedestal.");
        };
        this.bound = buffer.readBoolean();;
    }
};
module.exports.KrosmasterFigure = KrosmasterFigure;
module.exports.types[397] = KrosmasterFigure;

class AdminCommandMessage extends ProtocolMessage {
    constructor(content) {
        super(76);
        this.content = content;
    }

    serialize() {
        this.buffer.writeUTF(this.content);
    }

    deserialize(buffer) {
        this.content = buffer.readUTF();
    }
};
module.exports.AdminCommandMessage = AdminCommandMessage;
module.exports.messages[76] = AdminCommandMessage;

class AdminQuietCommandMessage extends AdminCommandMessage {
    constructor(content) {
        super(content);
        this.messageId = 5662;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.AdminQuietCommandMessage = AdminQuietCommandMessage;
module.exports.messages[5662] = AdminQuietCommandMessage;

class ConsoleCommandsListMessage extends ProtocolMessage {
    constructor(aliases, args, descriptions) {
        super(6127);
        this.aliases = aliases;
        this.args = args;
        this.descriptions = descriptions;
    }

    serialize() {
        this.buffer.writeShort(this.aliases.length);
        var _loc2_ = 0;
        while (_loc2_ < this.aliases.length) {
            this.buffer.writeUTF(this.aliases[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.args.length);
        var _loc3_ = 0;
        while (_loc3_ < this.args.length) {
            this.buffer.writeUTF(this.args[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.descriptions.length);
        var _loc4_ = 0;
        while (_loc4_ < this.descriptions.length) {
            this.buffer.writeUTF(this.descriptions[_loc4_]);
            _loc4_++;
        }
    }

    deserialize(buffer) {
        var _loc8_ = null;
        var _loc9_ = null;
        var _loc10_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readUTF();
            this.aliases.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = buffer.readUTF();
            this.args.push(_loc9_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = buffer.readUTF();
            this.descriptions.push(_loc10_);
            _loc7_++;
        }
    }
};
module.exports.ConsoleCommandsListMessage = ConsoleCommandsListMessage;
module.exports.messages[6127] = ConsoleCommandsListMessage;

class ConsoleMessage extends ProtocolMessage {
    constructor(type, content) {
        super(75);
        this.type = type;
        this.content = content;
    }

    serialize() {
        this.buffer.writeByte(this.type);
        this.buffer.writeUTF(this.content);
    }

    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of ConsoleMessage.type.");
        }
        this.content = buffer.readUTF();
    }
};
module.exports.ConsoleMessage = ConsoleMessage;
module.exports.messages[75] = ConsoleMessage;

class AggregateStatMessage extends ProtocolMessage {
    constructor(statId) {
        super(6669);
        this.statId = statId;
    }

    serialize() {
        this.buffer.writeVarShort(this.statId);
    }

    deserialize(buffer) {
        this.statId = buffer.readVarUhShort();
        if (this.statId < 0) {
            throw new Error("Forbidden value (" + this.statId + ") on element of AggregateStatMessage.statId.");
        }
    }
};
module.exports.AggregateStatMessage = AggregateStatMessage;
module.exports.messages[6669] = AggregateStatMessage;

class AggregateStatWithDataMessage extends AggregateStatMessage {
    constructor(statId, datas) {
        super(statId);
        this.datas = datas;
        this.messageId = 6662;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.datas.length);
        var _loc2_ = 0;
        while (_loc2_ < this.datas.length) {
            this.buffer.writeShort((this.datas[_loc2_]).getTypeId());
            (this.datas[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(StatisticData, _loc4_);
            _loc5_.deserialize(buffer);
            this.datas.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.AggregateStatWithDataMessage = AggregateStatWithDataMessage;
module.exports.messages[6662] = AggregateStatWithDataMessage;

class BasicPingMessage extends ProtocolMessage {
    constructor(quiet) {
        super(182);
        this.quiet = quiet;
    }

    serialize() {
        this.buffer.writeBoolean(this.quiet);
    }

    deserialize(buffer) {
        this.quiet = buffer.readBoolean();
    }
};
module.exports.BasicPingMessage = BasicPingMessage;
module.exports.messages[182] = BasicPingMessage;

class BasicPongMessage extends ProtocolMessage {
    constructor(quiet) {
        super(183);
        this.quiet = quiet;
    }

    serialize() {
        this.buffer.writeBoolean(this.quiet);
    }

    deserialize(buffer) {
        this.quiet = buffer.readBoolean();
    }
};
module.exports.BasicPongMessage = BasicPongMessage;
module.exports.messages[183] = BasicPongMessage;

class BasicStatMessage extends ProtocolMessage {
    constructor(timeSpent, statId) {
        super(6530);
        this.timeSpent = timeSpent;
        this.statId = statId;
    }

    serialize() {
        if (this.timeSpent < 0 || this.timeSpent > 9007199254740990) {
            throw new Error("Forbidden value (" + this.timeSpent + ") on element timeSpent.");
        }
        this.buffer.writeDouble(this.timeSpent);
        this.buffer.writeVarShort(this.statId);
    }

    deserialize(buffer) {
        this.timeSpent = buffer.readDouble();
        if (this.timeSpent < 0 || this.timeSpent > 9007199254740990) {
            throw new Error("Forbidden value (" + this.timeSpent + ") on element of BasicStatMessage.timeSpent.");
        }
        this.statId = buffer.readVarUhShort();
        if (this.statId < 0) {
            throw new Error("Forbidden value (" + this.statId + ") on element of BasicStatMessage.statId.");
        };
    }
};
module.exports.BasicStatMessage = BasicStatMessage;
module.exports.messages[6530] = BasicStatMessage;

class BasicStatWithDataMessage extends BasicStatMessage {
    constructor(timeSpent, statId, datas) {
        super(timeSpent, statId);
        this.datas = datas;
        this.messageId = 6573;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.datas.length);
        var _loc2_ = 0;
        while (_loc2_ < this.datas.length) {
            this.buffer.writeShort((this.datas[_loc2_]).getTypeId());
            (this.datas[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(StatisticData, _loc4_);
            _loc5_.deserialize(buffer);
            this.datas.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.BasicStatWithDataMessage = BasicStatWithDataMessage;
module.exports.messages[6573] = BasicStatWithDataMessage;

class NetworkDataContainerMessage extends ProtocolMessage {
    constructor(content) {
        super(2);
        this.content = content;
    }

    serialize() {
        this.buffer.writeBytes(this.content);
        throw new Error("Not implemented");
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = new ByteArray();
        buffer.readBytes(_loc3_, 0, _loc2_);
        _loc3_.uncompress();
        this.content = _loc3_;
    }
};
module.exports.NetworkDataContainerMessage = NetworkDataContainerMessage;
module.exports.messages[2] = NetworkDataContainerMessage;

class CredentialsAcknowledgementMessage extends ProtocolMessage {
    constructor() {
        super(6314);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.CredentialsAcknowledgementMessage = CredentialsAcknowledgementMessage;
module.exports.messages[6314] = CredentialsAcknowledgementMessage;

class HelloConnectMessage extends ProtocolMessage {
    constructor(salt, key) {
        super(3);
        this.salt = salt;
        this.key = key || [];
    }

    serialize() {
        this.buffer.writeUTF(this.salt);
        this.buffer.writeVarInt(this.key.length);
        var _loc2_ = 0;
        while (_loc2_ < this.key.length) {
            this.buffer.writeByte(this.key[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.salt = buffer.readUTF();
        var _loc2_ = buffer.readVarInt();
        this.key = new Int8Array(_loc2_);
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.key[_loc3_] = _loc4_;
            _loc3_++;
        }
    }
};
module.exports.HelloConnectMessage = HelloConnectMessage;
module.exports.messages[3] = HelloConnectMessage;

class IdentificationMessage extends ProtocolMessage {
    constructor(version, lang, credentials, serverId, autoconnect, useCertificate, useLoginToken, sessionOptionalSalt, failedAttempts) {
        super(4);
        this.version = version;
        this.lang = lang;
        this.credentials = credentials;
        this.serverId = serverId;
        this.autoconnect = autoconnect;
        this.useCertificate = useCertificate;
        this.useLoginToken = useLoginToken;
        this.sessionOptionalSalt = sessionOptionalSalt;
        this.failedAttempts = failedAttempts;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.autoconnect);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.useCertificate);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.useLoginToken);
        this.buffer.writeByte(_loc2_);
        this.version.serialize(this.buffer);
        this.buffer.writeUTF(this.lang);
        this.buffer.writeVarInt(this.credentials.length);
        var _loc3_ = 0;
        while (_loc3_ < this.credentials.length) {
            this.buffer.writeByte(this.credentials[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.serverId);
        if (this.sessionOptionalSalt < -9007199254740990 || this.sessionOptionalSalt > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sessionOptionalSalt + ") on element sessionOptionalSalt.");
        }
        this.buffer.writeVarLong(this.sessionOptionalSalt);
        this.buffer.writeShort(this.failedAttempts.length);
        var _loc4_ = 0;
        while (_loc4_ < this.failedAttempts.length) {
            if (this.failedAttempts[_loc4_] < 0) {
                throw new Error("Forbidden value (" + this.failedAttempts[_loc4_] + ") on element 9 (starting at 1) of failedAttempts.");
            }
            this.buffer.writeVarShort(this.failedAttempts[_loc4_]);
            _loc4_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        this.deserializeByteBoxes(buffer);
        this.version = new VersionExtended();
        this.version.deserialize(buffer);
        this.lang = buffer.readUTF();
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readByte();
            this.credentials.push(_loc6_);
            _loc3_++;
        }
        this._serverIdFunc(buffer);
        this.sessionOptionalSalt = buffer.readVarLong();
        if (this.sessionOptionalSalt < -9007199254740990 || this.sessionOptionalSalt > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sessionOptionalSalt + ") on element of IdentificationMessage.sessionOptionalSalt.");
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of failedAttempts.");
            }
            this.failedAttempts.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.IdentificationMessage = IdentificationMessage;
module.exports.messages[4] = IdentificationMessage;

class IdentificationAccountForceMessage extends IdentificationMessage {
    constructor(version, lang, credentials, serverId, autoconnect, useCertificate, useLoginToken, sessionOptionalSalt, failedAttempts, forcedAccountLogin) {
        super(version, lang, credentials, serverId, autoconnect, useCertificate, useLoginToken, sessionOptionalSalt, failedAttempts);
        this.forcedAccountLogin = forcedAccountLogin;
        this.messageId = 6119;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.forcedAccountLogin);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.forcedAccountLogin = buffer.readUTF();
    }
};
module.exports.IdentificationAccountForceMessage = IdentificationAccountForceMessage;
module.exports.messages[6119] = IdentificationAccountForceMessage;

class IdentificationFailedMessage extends ProtocolMessage {
    constructor(reason) {
        super(20);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of IdentificationFailedMessage.reason.");
        }
    }
};
module.exports.IdentificationFailedMessage = IdentificationFailedMessage;
module.exports.messages[20] = IdentificationFailedMessage;

class IdentificationFailedBannedMessage extends IdentificationFailedMessage {
    constructor(reason, banEndDate) {
        super(reason);
        this.banEndDate = banEndDate;
        this.messageId = 6174;
    }

    serialize() {
        super.serialize();
        if (this.banEndDate < 0 || this.banEndDate > 9007199254740990) {
            throw new Error("Forbidden value (" + this.banEndDate + ") on element banEndDate.");
        }
        this.buffer.writeDouble(this.banEndDate);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.banEndDate = buffer.readDouble();
        if (this.banEndDate < 0 || this.banEndDate > 9007199254740990) {
            throw new Error("Forbidden value (" + this.banEndDate + ") on element of IdentificationFailedBannedMessage.banEndDate.");
        }
    }
};
module.exports.IdentificationFailedBannedMessage = IdentificationFailedBannedMessage;
module.exports.messages[6174] = IdentificationFailedBannedMessage;

class IdentificationFailedForBadVersionMessage extends IdentificationFailedMessage {
    constructor(reason, requiredVersion) {
        super(reason);
        this.requiredVersion = requiredVersion;
        this.messageId = 21;
    }

    serialize() {
        super.serialize();
        this.requiredVersion.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.requiredVersion = new Version();
        this.requiredVersion.deserialize(buffer);
    }
};
module.exports.IdentificationFailedForBadVersionMessage = IdentificationFailedForBadVersionMessage;
module.exports.messages[21] = IdentificationFailedForBadVersionMessage;

class IdentificationSuccessMessage extends ProtocolMessage {
    constructor(login, nickname, accountId, communityId, hasRights, secretQuestion, accountCreation, subscriptionElapsedDuration, subscriptionEndDate, wasAlreadyConnected, havenbagAvailableRoom) {
        super(22);
        this.login = login;
        this.nickname = nickname;
        this.accountId = accountId;
        this.communityId = communityId;
        this.hasRights = hasRights;
        this.secretQuestion = secretQuestion;
        this.accountCreation = accountCreation;
        this.subscriptionElapsedDuration = subscriptionElapsedDuration;
        this.subscriptionEndDate = subscriptionEndDate;
        this.wasAlreadyConnected = wasAlreadyConnected;
        this.havenbagAvailableRoom = havenbagAvailableRoom;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.hasRights);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.wasAlreadyConnected);
        this.buffer.writeByte(_loc2_);
        this.buffer.writeUTF(this.login);
        this.buffer.writeUTF(this.nickname);
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        if (this.communityId < 0) {
            throw new Error("Forbidden value (" + this.communityId + ") on element communityId.");
        }
        this.buffer.writeByte(this.communityId);
        this.buffer.writeUTF(this.secretQuestion);
        if (this.accountCreation < 0 || this.accountCreation > 9007199254740990) {
            throw new Error("Forbidden value (" + this.accountCreation + ") on element accountCreation.");
        }
        this.buffer.writeDouble(this.accountCreation);
        if (this.subscriptionElapsedDuration < 0 || this.subscriptionElapsedDuration > 9007199254740990) {
            throw new Error("Forbidden value (" + this.subscriptionElapsedDuration + ") on element subscriptionElapsedDuration.");
        }
        this.buffer.writeDouble(this.subscriptionElapsedDuration);
        if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740990) {
            throw new Error("Forbidden value (" + this.subscriptionEndDate + ") on element subscriptionEndDate.");
        }
        this.buffer.writeDouble(this.subscriptionEndDate);
        if (this.havenbagAvailableRoom < 0 || this.havenbagAvailableRoom > 255) {
            throw new Error("Forbidden value (" + this.havenbagAvailableRoom + ") on element havenbagAvailableRoom.");
        }
        this.buffer.writeByte(this.havenbagAvailableRoom);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.login = buffer.readUTF();
        this.nickname = buffer.readUTF();;
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of IdentificationSuccessMessage.accountId.");
        }
        this.communityId = buffer.readByte();
        if (this.communityId < 0) {
            throw new Error("Forbidden value (" + this.communityId + ") on element of IdentificationSuccessMessage.communityId.");
        };
        this.secretQuestion = buffer.readUTF();;
        this.accountCreation = buffer.readDouble();
        if (this.accountCreation < 0 || this.accountCreation > 9007199254740990) {
            throw new Error("Forbidden value (" + this.accountCreation + ") on element of IdentificationSuccessMessage.accountCreation.");
        };
        this.subscriptionElapsedDuration = buffer.readDouble();
        if (this.subscriptionElapsedDuration < 0 || this.subscriptionElapsedDuration > 9007199254740990) {
            throw new Error("Forbidden value (" + this.subscriptionElapsedDuration + ") on element of IdentificationSuccessMessage.subscriptionElapsedDuration.");
        };
        this.subscriptionEndDate = buffer.readDouble();
        if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740990) {
            throw new Error("Forbidden value (" + this.subscriptionEndDate + ") on element of IdentificationSuccessMessage.subscriptionEndDate.");
        };
        this.havenbagAvailableRoom = buffer.readUnsignedByte();
        if (this.havenbagAvailableRoom < 0 || this.havenbagAvailableRoom > 255) {
            throw new Error("Forbidden value (" + this.havenbagAvailableRoom + ") on element of IdentificationSuccessMessage.havenbagAvailableRoom.");
        };
    }
};
module.exports.IdentificationSuccessMessage = IdentificationSuccessMessage;
module.exports.messages[22] = IdentificationSuccessMessage;

class IdentificationSuccessWithLoginTokenMessage extends IdentificationSuccessMessage {
    constructor(login, nickname, accountId, communityId, hasRights, secretQuestion, accountCreation, subscriptionElapsedDuration, subscriptionEndDate, wasAlreadyConnected, havenbagAvailableRoom, loginToken) {
        super(login, nickname, accountId, communityId, hasRights, secretQuestion, accountCreation, subscriptionElapsedDuration, subscriptionEndDate, wasAlreadyConnected, havenbagAvailableRoom);
        this.loginToken = loginToken;
        this.messageId = 6209;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.loginToken);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.loginToken = buffer.readUTF();
    }
};
module.exports.IdentificationSuccessWithLoginTokenMessage = IdentificationSuccessWithLoginTokenMessage;
module.exports.messages[6209] = IdentificationSuccessWithLoginTokenMessage;

class MigratedServerListMessage extends ProtocolMessage {
    constructor(migratedServerIds) {
        super(6731);
        this.migratedServerIds = migratedServerIds;
    }

    serialize() {
        this.buffer.writeShort(this.migratedServerIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.migratedServerIds.length) {
            if (this.migratedServerIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.migratedServerIds[_loc2_] + ") on element 1 (starting at 1) of migratedServerIds.");
            }
            this.buffer.writeVarShort(this.migratedServerIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of migratedServerIds.");
            }
            this.migratedServerIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.MigratedServerListMessage = MigratedServerListMessage;
module.exports.messages[6731] = MigratedServerListMessage;

class AccountLinkRequiredMessage extends ProtocolMessage {
    constructor() {
        super(6607);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.AccountLinkRequiredMessage = AccountLinkRequiredMessage;
module.exports.messages[6607] = AccountLinkRequiredMessage;

class NicknameAcceptedMessage extends ProtocolMessage {
    constructor() {
        super(5641);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.NicknameAcceptedMessage = NicknameAcceptedMessage;
module.exports.messages[5641] = NicknameAcceptedMessage;

class NicknameChoiceRequestMessage extends ProtocolMessage {
    constructor(nickname) {
        super(5639);
        this.nickname = nickname;
    }

    serialize() {
        this.buffer.writeUTF(this.nickname);
    }

    deserialize(buffer) {
        this.nickname = buffer.readUTF();
    }
};
module.exports.NicknameChoiceRequestMessage = NicknameChoiceRequestMessage;
module.exports.messages[5639] = NicknameChoiceRequestMessage;

class NicknameRefusedMessage extends ProtocolMessage {
    constructor(reason) {
        super(5638);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of NicknameRefusedMessage.reason.");
        }
    }
};
module.exports.NicknameRefusedMessage = NicknameRefusedMessage;
module.exports.messages[5638] = NicknameRefusedMessage;

class NicknameRegistrationMessage extends ProtocolMessage {
    constructor() {
        super(5640);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.NicknameRegistrationMessage = NicknameRegistrationMessage;
module.exports.messages[5640] = NicknameRegistrationMessage;

class AcquaintanceSearchErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6143);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of AcquaintanceSearchErrorMessage.reason.");
        }
    }
};
module.exports.AcquaintanceSearchErrorMessage = AcquaintanceSearchErrorMessage;
module.exports.messages[6143] = AcquaintanceSearchErrorMessage;

class AcquaintanceSearchMessage extends ProtocolMessage {
    constructor(nickname) {
        super(6144);
        this.nickname = nickname;
    }

    serialize() {
        this.buffer.writeUTF(this.nickname);
    }

    deserialize(buffer) {
        this.nickname = buffer.readUTF();
    }
};
module.exports.AcquaintanceSearchMessage = AcquaintanceSearchMessage;
module.exports.messages[6144] = AcquaintanceSearchMessage;

class AcquaintanceServerListMessage extends ProtocolMessage {
    constructor(servers) {
        super(6142);
        this.servers = servers;
    }

    serialize() {
        this.buffer.writeShort(this.servers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.servers.length) {
            if (this.servers[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.servers[_loc2_] + ") on element 1 (starting at 1) of servers.");
            }
            this.buffer.writeVarShort(this.servers[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of servers.");
            }
            this.servers.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.AcquaintanceServerListMessage = AcquaintanceServerListMessage;
module.exports.messages[6142] = AcquaintanceServerListMessage;

class SelectedServerDataMessage extends ProtocolMessage {
    constructor(serverId, address, port, canCreateNewCharacter, ticket) {
        super(42);
        this.serverId = serverId;
        this.address = address;
        this.port = port;
        this.canCreateNewCharacter = canCreateNewCharacter;
        this.ticket = ticket;
    }

    serialize() {
        if (this.serverId < 0) {
            throw new Error("Forbidden value (" + this.serverId + ") on element serverId.");
        }
        this.buffer.writeVarShort(this.serverId);
        this.buffer.writeUTF(this.address);
        if (this.port < 0 || this.port > 65535) {
            throw new Error("Forbidden value (" + this.port + ") on element port.");
        }
        this.buffer.writeShort(this.port);
        this.buffer.writeBoolean(this.canCreateNewCharacter);
        this.buffer.writeVarInt(this.ticket.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ticket.length) {
            this.buffer.writeByte(this.ticket[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.serverId = buffer.readVarUhShort();
        if (this.serverId < 0) {
            throw new Error("Forbidden value (" + this.serverId + ") on element of SelectedServerDataMessage.serverId.");
        }
        this.address = buffer.readUTF();
        this.port = buffer.readUnsignedShort();
        if (this.port < 0 || this.port > 65535) {
            throw new Error("Forbidden value (" + this.port + ") on element of SelectedServerDataMessage.port.");
        };
        this.canCreateNewCharacter = buffer.readBoolean();;
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.ticket.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.SelectedServerDataMessage = SelectedServerDataMessage;
module.exports.messages[42] = SelectedServerDataMessage;

class SelectedServerDataExtendedMessage extends SelectedServerDataMessage {
    constructor(serverId, address, port, canCreateNewCharacter, ticket, serverIds) {
        super(serverId, address, port, canCreateNewCharacter, ticket);
        this.serverIds = serverIds;
        this.messageId = 6469;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.serverIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.serverIds.length) {
            if (this.serverIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.serverIds[_loc2_] + ") on element 1 (starting at 1) of serverIds.");
            }
            this.buffer.writeVarShort(this.serverIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of serverIds.");
            }
            this.serverIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.SelectedServerDataExtendedMessage = SelectedServerDataExtendedMessage;
module.exports.messages[6469] = SelectedServerDataExtendedMessage;

class SelectedServerRefusedMessage extends ProtocolMessage {
    constructor(serverId, error, serverStatus) {
        super(41);
        this.serverId = serverId;
        this.error = error;
        this.serverStatus = serverStatus;
    }

    serialize() {
        if (this.serverId < 0) {
            throw new Error("Forbidden value (" + this.serverId + ") on element serverId.");
        }
        this.buffer.writeVarShort(this.serverId);
        this.buffer.writeByte(this.error);
        this.buffer.writeByte(this.serverStatus);
    }

    deserialize(buffer) {
        this.serverId = buffer.readVarUhShort();
        if (this.serverId < 0) {
            throw new Error("Forbidden value (" + this.serverId + ") on element of SelectedServerRefusedMessage.serverId.");
        }
        this.error = buffer.readByte();
        if (this.error < 0) {
            throw new Error("Forbidden value (" + this.error + ") on element of SelectedServerRefusedMessage.error.");
        };
        this.serverStatus = buffer.readByte();
        if (this.serverStatus < 0) {
            throw new Error("Forbidden value (" + this.serverStatus + ") on element of SelectedServerRefusedMessage.serverStatus.");
        };
    }
};
module.exports.SelectedServerRefusedMessage = SelectedServerRefusedMessage;
module.exports.messages[41] = SelectedServerRefusedMessage;

class ServerSelectionMessage extends ProtocolMessage {
    constructor(serverId) {
        super(40);
        this.serverId = serverId;
    }

    serialize() {
        if (this.serverId < 0) {
            throw new Error("Forbidden value (" + this.serverId + ") on element serverId.");
        }
        this.buffer.writeVarShort(this.serverId);
    }

    deserialize(buffer) {
        this.serverId = buffer.readVarUhShort();
        if (this.serverId < 0) {
            throw new Error("Forbidden value (" + this.serverId + ") on element of ServerSelectionMessage.serverId.");
        }
    }
};
module.exports.ServerSelectionMessage = ServerSelectionMessage;
module.exports.messages[40] = ServerSelectionMessage;

class ServersListMessage extends ProtocolMessage {
    constructor(servers, alreadyConnectedToServerId, canCreateNewCharacter) {
        super(30);
        this.servers = servers;
        this.alreadyConnectedToServerId = alreadyConnectedToServerId;
        this.canCreateNewCharacter = canCreateNewCharacter;
    }

    serialize() {
        this.buffer.writeShort(this.servers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.servers.length) {
            (this.servers[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.alreadyConnectedToServerId < 0) {
            throw new Error("Forbidden value (" + this.alreadyConnectedToServerId + ") on element alreadyConnectedToServerId.");
        }
        this.buffer.writeVarShort(this.alreadyConnectedToServerId);
        this.buffer.writeBoolean(this.canCreateNewCharacter);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GameServerInformations();
            _loc4_.deserialize(buffer);
            this.servers.push(_loc4_);
            _loc3_++;
        }
        this._alreadyConnectedToServerIdFunc(buffer);
        this.canCreateNewCharacter = buffer.readBoolean();
    }
};
module.exports.ServersListMessage = ServersListMessage;
module.exports.messages[30] = ServersListMessage;

class ServerStatusUpdateMessage extends ProtocolMessage {
    constructor(server) {
        super(50);
        this.server = server;
    }

    serialize() {
        this.server.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.server = new GameServerInformations();
        this.server.deserialize(buffer);
    }
};
module.exports.ServerStatusUpdateMessage = ServerStatusUpdateMessage;
module.exports.messages[50] = ServerStatusUpdateMessage;

class DebugClearHighlightCellsMessage extends ProtocolMessage {
    constructor() {
        super(2002);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.DebugClearHighlightCellsMessage = DebugClearHighlightCellsMessage;
module.exports.messages[2002] = DebugClearHighlightCellsMessage;

class DebugHighlightCellsMessage extends ProtocolMessage {
    constructor(color, cells) {
        super(2001);
        this.color = color;
        this.cells = cells;
    }

    serialize() {
        this.buffer.writeInt(this.color);
        this.buffer.writeShort(this.cells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cells.length) {
            if (this.cells[_loc2_] < 0 || this.cells[_loc2_] > 559) {
                throw new Error("Forbidden value (" + this.cells[_loc2_] + ") on element 2 (starting at 1) of cells.");
            }
            this.buffer.writeVarShort(this.cells[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.color = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0 || _loc4_ > 559) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of cells.");
            }
            this.cells.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DebugHighlightCellsMessage = DebugHighlightCellsMessage;
module.exports.messages[2001] = DebugHighlightCellsMessage;

class DebugInClientMessage extends ProtocolMessage {
    constructor(level, message) {
        super(6028);
        this.level = level;
        this.message = message;
    }

    serialize() {
        this.buffer.writeByte(this.level);
        this.buffer.writeUTF(this.message);
    }

    deserialize(buffer) {
        this.level = buffer.readByte();
        if (this.level < 0) {
            throw new Error("Forbidden value (" + this.level + ") on element of DebugInClientMessage.level.");
        }
        this.message = buffer.readUTF();
    }
};
module.exports.DebugInClientMessage = DebugInClientMessage;
module.exports.messages[6028] = DebugInClientMessage;

class AchievementDetailedListMessage extends ProtocolMessage {
    constructor(startedAchievements, finishedAchievements) {
        super(6358);
        this.startedAchievements = startedAchievements;
        this.finishedAchievements = finishedAchievements;
    }

    serialize() {
        this.buffer.writeShort(this.startedAchievements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.startedAchievements.length) {
            (this.startedAchievements[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.finishedAchievements.length);
        var _loc3_ = 0;
        while (_loc3_ < this.finishedAchievements.length) {
            (this.finishedAchievements[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new Achievement();
            _loc6_.deserialize(buffer);
            this.startedAchievements.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new Achievement();
            _loc7_.deserialize(buffer);
            this.finishedAchievements.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.AchievementDetailedListMessage = AchievementDetailedListMessage;
module.exports.messages[6358] = AchievementDetailedListMessage;

class AchievementDetailedListRequestMessage extends ProtocolMessage {
    constructor(categoryId) {
        super(6357);
        this.categoryId = categoryId;
    }

    serialize() {
        if (this.categoryId < 0) {
            throw new Error("Forbidden value (" + this.categoryId + ") on element categoryId.");
        }
        this.buffer.writeVarShort(this.categoryId);
    }

    deserialize(buffer) {
        this.categoryId = buffer.readVarUhShort();
        if (this.categoryId < 0) {
            throw new Error("Forbidden value (" + this.categoryId + ") on element of AchievementDetailedListRequestMessage.categoryId.");
        }
    }
};
module.exports.AchievementDetailedListRequestMessage = AchievementDetailedListRequestMessage;
module.exports.messages[6357] = AchievementDetailedListRequestMessage;

class AchievementDetailsMessage extends ProtocolMessage {
    constructor(achievement) {
        super(6378);
        this.achievement = achievement;
    }

    serialize() {
        this.achievement.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.achievement = new Achievement();
        this.achievement.deserialize(buffer);
    }
};
module.exports.AchievementDetailsMessage = AchievementDetailsMessage;
module.exports.messages[6378] = AchievementDetailsMessage;

class AchievementDetailsRequestMessage extends ProtocolMessage {
    constructor(achievementId) {
        super(6380);
        this.achievementId = achievementId;
    }

    serialize() {
        if (this.achievementId < 0) {
            throw new Error("Forbidden value (" + this.achievementId + ") on element achievementId.");
        }
        this.buffer.writeVarShort(this.achievementId);
    }

    deserialize(buffer) {
        this.achievementId = buffer.readVarUhShort();
        if (this.achievementId < 0) {
            throw new Error("Forbidden value (" + this.achievementId + ") on element of AchievementDetailsRequestMessage.achievementId.");
        }
    }
};
module.exports.AchievementDetailsRequestMessage = AchievementDetailsRequestMessage;
module.exports.messages[6380] = AchievementDetailsRequestMessage;

class AchievementFinishedMessage extends ProtocolMessage {
    constructor(id, finishedlevel) {
        super(6208);
        this.id = id;
        this.finishedlevel = finishedlevel;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
        if (this.finishedlevel < 0 || this.finishedlevel > 206) {
            throw new Error("Forbidden value (" + this.finishedlevel + ") on element finishedlevel.");
        }
        this.buffer.writeByte(this.finishedlevel);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of AchievementFinishedMessage.id.");
        }
        this.finishedlevel = buffer.readUnsignedByte();
        if (this.finishedlevel < 0 || this.finishedlevel > 206) {
            throw new Error("Forbidden value (" + this.finishedlevel + ") on element of AchievementFinishedMessage.finishedlevel.");
        };
    }
};
module.exports.AchievementFinishedMessage = AchievementFinishedMessage;
module.exports.messages[6208] = AchievementFinishedMessage;

class AchievementFinishedInformationMessage extends AchievementFinishedMessage {
    constructor(id, finishedlevel, name, playerId) {
        super(id, finishedlevel);
        this.name = name;
        this.playerId = playerId;
        this.messageId = 6381;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.name);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of AchievementFinishedInformationMessage.playerId.");
        }
    }
};
module.exports.AchievementFinishedInformationMessage = AchievementFinishedInformationMessage;
module.exports.messages[6381] = AchievementFinishedInformationMessage;

class AchievementListMessage extends ProtocolMessage {
    constructor(finishedAchievementsIds, rewardableAchievements) {
        super(6205);
        this.finishedAchievementsIds = finishedAchievementsIds;
        this.rewardableAchievements = rewardableAchievements;
    }

    serialize() {
        this.buffer.writeShort(this.finishedAchievementsIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.finishedAchievementsIds.length) {
            if (this.finishedAchievementsIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.finishedAchievementsIds[_loc2_] + ") on element 1 (starting at 1) of finishedAchievementsIds.");
            }
            this.buffer.writeVarShort(this.finishedAchievementsIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.rewardableAchievements.length);
        var _loc3_ = 0;
        while (_loc3_ < this.rewardableAchievements.length) {
            (this.rewardableAchievements[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of finishedAchievementsIds.");
            }
            this.finishedAchievementsIds.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new AchievementRewardable();
            _loc7_.deserialize(buffer);
            this.rewardableAchievements.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.AchievementListMessage = AchievementListMessage;
module.exports.messages[6205] = AchievementListMessage;

class AchievementRewardErrorMessage extends ProtocolMessage {
    constructor(achievementId) {
        super(6375);
        this.achievementId = achievementId;
    }

    serialize() {
        this.buffer.writeShort(this.achievementId);
    }

    deserialize(buffer) {
        this.achievementId = buffer.readShort();
    }
};
module.exports.AchievementRewardErrorMessage = AchievementRewardErrorMessage;
module.exports.messages[6375] = AchievementRewardErrorMessage;

class AchievementRewardRequestMessage extends ProtocolMessage {
    constructor(achievementId) {
        super(6377);
        this.achievementId = achievementId;
    }

    serialize() {
        this.buffer.writeShort(this.achievementId);
    }

    deserialize(buffer) {
        this.achievementId = buffer.readShort();
    }
};
module.exports.AchievementRewardRequestMessage = AchievementRewardRequestMessage;
module.exports.messages[6377] = AchievementRewardRequestMessage;

class AchievementRewardSuccessMessage extends ProtocolMessage {
    constructor(achievementId) {
        super(6376);
        this.achievementId = achievementId;
    }

    serialize() {
        this.buffer.writeShort(this.achievementId);
    }

    deserialize(buffer) {
        this.achievementId = buffer.readShort();
    }
};
module.exports.AchievementRewardSuccessMessage = AchievementRewardSuccessMessage;
module.exports.messages[6376] = AchievementRewardSuccessMessage;

class FriendGuildSetWarnOnAchievementCompleteMessage extends ProtocolMessage {
    constructor(enable) {
        super(6382);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.FriendGuildSetWarnOnAchievementCompleteMessage = FriendGuildSetWarnOnAchievementCompleteMessage;
module.exports.messages[6382] = FriendGuildSetWarnOnAchievementCompleteMessage;

class FriendGuildWarnOnAchievementCompleteStateMessage extends ProtocolMessage {
    constructor(enable) {
        super(6383);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.FriendGuildWarnOnAchievementCompleteStateMessage = FriendGuildWarnOnAchievementCompleteStateMessage;
module.exports.messages[6383] = FriendGuildWarnOnAchievementCompleteStateMessage;

class AbstractGameActionMessage extends ProtocolMessage {
    constructor(actionId, sourceId) {
        super(1000);
        this.actionId = actionId;
        this.sourceId = sourceId;
    }

    serialize() {
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        this.buffer.writeVarShort(this.actionId);
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeDouble(this.sourceId);
    }

    deserialize(buffer) {
        this.actionId = buffer.readVarUhShort();
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element of AbstractGameActionMessage.actionId.");
        }
        this.sourceId = buffer.readDouble();
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element of AbstractGameActionMessage.sourceId.");
        };
    }
};
module.exports.AbstractGameActionMessage = AbstractGameActionMessage;
module.exports.messages[1000] = AbstractGameActionMessage;

class AbstractGameActionWithAckMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, waitAckId) {
        super(actionId, sourceId);
        this.waitAckId = waitAckId;
        this.messageId = 1001;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.waitAckId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.waitAckId = buffer.readShort();
    }
};
module.exports.AbstractGameActionWithAckMessage = AbstractGameActionWithAckMessage;
module.exports.messages[1001] = AbstractGameActionWithAckMessage;

class AbstractGameActionFightTargetedAbilityMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, destinationCellId, critical, silentCast, verboseCast) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.destinationCellId = destinationCellId;
        this.critical = critical;
        this.silentCast = silentCast;
        this.verboseCast = verboseCast;
        this.messageId = 6118;
    }

    serialize() {
        super.serialize();
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.silentCast);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.verboseCast);
        this.buffer.writeByte(_loc2_);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.destinationCellId < -1 || this.destinationCellId > 559) {
            throw new Error("Forbidden value (" + this.destinationCellId + ") on element destinationCellId.");
        }
        this.buffer.writeShort(this.destinationCellId);
        this.buffer.writeByte(this.critical);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.deserializeByteBoxes(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of AbstractGameActionFightTargetedAbilityMessage.targetId.");
        }
        this.destinationCellId = buffer.readShort();
        if (this.destinationCellId < -1 || this.destinationCellId > 559) {
            throw new Error("Forbidden value (" + this.destinationCellId + ") on element of AbstractGameActionFightTargetedAbilityMessage.destinationCellId.");
        };
        this.critical = buffer.readByte();
        if (this.critical < 0) {
            throw new Error("Forbidden value (" + this.critical + ") on element of AbstractGameActionFightTargetedAbilityMessage.critical.");
        };
    }
};
module.exports.AbstractGameActionFightTargetedAbilityMessage = AbstractGameActionFightTargetedAbilityMessage;
module.exports.messages[6118] = AbstractGameActionFightTargetedAbilityMessage;

class GameActionFightActivateGlyphTrapMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, markId, active) {
        super(actionId, sourceId);
        this.markId = markId;
        this.active = active;
        this.messageId = 6545;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.markId);
        this.buffer.writeBoolean(this.active);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.markId = buffer.readShort();
        this.active = buffer.readBoolean();;
    }
};
module.exports.GameActionFightActivateGlyphTrapMessage = GameActionFightActivateGlyphTrapMessage;
module.exports.messages[6545] = GameActionFightActivateGlyphTrapMessage;

class GameActionFightCarryCharacterMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, cellId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.cellId = cellId;
        this.messageId = 5830;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightCarryCharacterMessage.targetId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightCarryCharacterMessage.cellId.");
        };
    }
};
module.exports.GameActionFightCarryCharacterMessage = GameActionFightCarryCharacterMessage;
module.exports.messages[5830] = GameActionFightCarryCharacterMessage;

class GameActionFightCastOnTargetRequestMessage extends ProtocolMessage {
    constructor(spellId, targetId) {
        super(6330);
        this.spellId = spellId;
        this.targetId = targetId;
    }

    serialize() {
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }

    deserialize(buffer) {
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightCastOnTargetRequestMessage.spellId.");
        }
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightCastOnTargetRequestMessage.targetId.");
        };
    }
};
module.exports.GameActionFightCastOnTargetRequestMessage = GameActionFightCastOnTargetRequestMessage;
module.exports.messages[6330] = GameActionFightCastOnTargetRequestMessage;

class GameActionFightCastRequestMessage extends ProtocolMessage {
    constructor(spellId, cellId) {
        super(1005);
        this.spellId = spellId;
        this.cellId = cellId;
    }

    serialize() {
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }

    deserialize(buffer) {
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightCastRequestMessage.spellId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightCastRequestMessage.cellId.");
        };
    }
};
module.exports.GameActionFightCastRequestMessage = GameActionFightCastRequestMessage;
module.exports.messages[1005] = GameActionFightCastRequestMessage;

class GameActionFightChangeLookMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, entityLook) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.entityLook = entityLook;
        this.messageId = 5532;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        this.entityLook.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightChangeLookMessage.targetId.");
        }
        this.entityLook = new EntityLook();
        this.entityLook.deserialize(buffer);
    }
};
module.exports.GameActionFightChangeLookMessage = GameActionFightChangeLookMessage;
module.exports.messages[5532] = GameActionFightChangeLookMessage;

class GameActionFightCloseCombatMessage extends AbstractGameActionFightTargetedAbilityMessage {
    constructor(actionId, sourceId, targetId, destinationCellId, critical, silentCast, verboseCast, weaponGenericId) {
        super(actionId, sourceId, targetId, destinationCellId, critical, silentCast, verboseCast);
        this.weaponGenericId = weaponGenericId;
        this.messageId = 6116;
    }

    serialize() {
        super.serialize();
        if (this.weaponGenericId < 0) {
            throw new Error("Forbidden value (" + this.weaponGenericId + ") on element weaponGenericId.");
        }
        this.buffer.writeVarShort(this.weaponGenericId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.weaponGenericId = buffer.readVarUhShort();
        if (this.weaponGenericId < 0) {
            throw new Error("Forbidden value (" + this.weaponGenericId + ") on element of GameActionFightCloseCombatMessage.weaponGenericId.");
        }
    }
};
module.exports.GameActionFightCloseCombatMessage = GameActionFightCloseCombatMessage;
module.exports.messages[6116] = GameActionFightCloseCombatMessage;

class GameActionFightDeathMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.messageId = 1099;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDeathMessage.targetId.");
        }
    }
};
module.exports.GameActionFightDeathMessage = GameActionFightDeathMessage;
module.exports.messages[1099] = GameActionFightDeathMessage;

class GameActionFightDispellableEffectMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, effect) {
        super(actionId, sourceId);
        this.effect = effect;
        this.messageId = 6070;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.effect.getTypeId());
        this.effect.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.effect = ProtocolTypeManager.getInstance(AbstractFightDispellableEffect, _loc2_);
        this.effect.deserialize(buffer);
    }
};
module.exports.GameActionFightDispellableEffectMessage = GameActionFightDispellableEffectMessage;
module.exports.messages[6070] = GameActionFightDispellableEffectMessage;

class GameActionFightDispellMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.messageId = 5533;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDispellMessage.targetId.");
        }
    }
};
module.exports.GameActionFightDispellMessage = GameActionFightDispellMessage;
module.exports.messages[5533] = GameActionFightDispellMessage;

class GameActionFightDispellEffectMessage extends GameActionFightDispellMessage {
    constructor(actionId, sourceId, targetId, boostUID) {
        super(actionId, sourceId, targetId);
        this.boostUID = boostUID;
        this.messageId = 6113;
    }

    serialize() {
        super.serialize();
        if (this.boostUID < 0) {
            throw new Error("Forbidden value (" + this.boostUID + ") on element boostUID.");
        }
        this.buffer.writeInt(this.boostUID);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.boostUID = buffer.readInt();
        if (this.boostUID < 0) {
            throw new Error("Forbidden value (" + this.boostUID + ") on element of GameActionFightDispellEffectMessage.boostUID.");
        }
    }
};
module.exports.GameActionFightDispellEffectMessage = GameActionFightDispellEffectMessage;
module.exports.messages[6113] = GameActionFightDispellEffectMessage;

class GameActionFightDispellSpellMessage extends GameActionFightDispellMessage {
    constructor(actionId, sourceId, targetId, spellId) {
        super(actionId, sourceId, targetId);
        this.spellId = spellId;
        this.messageId = 6176;
    }

    serialize() {
        super.serialize();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightDispellSpellMessage.spellId.");
        }
    }
};
module.exports.GameActionFightDispellSpellMessage = GameActionFightDispellSpellMessage;
module.exports.messages[6176] = GameActionFightDispellSpellMessage;

class GameActionFightDodgePointLossMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, amount) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.amount = amount;
        this.messageId = 5828;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.amount < 0) {
            throw new Error("Forbidden value (" + this.amount + ") on element amount.");
        }
        this.buffer.writeVarShort(this.amount);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDodgePointLossMessage.targetId.");
        }
        this.amount = buffer.readVarUhShort();
        if (this.amount < 0) {
            throw new Error("Forbidden value (" + this.amount + ") on element of GameActionFightDodgePointLossMessage.amount.");
        };
    }
};
module.exports.GameActionFightDodgePointLossMessage = GameActionFightDodgePointLossMessage;
module.exports.messages[5828] = GameActionFightDodgePointLossMessage;

class GameActionFightDropCharacterMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, cellId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.cellId = cellId;
        this.messageId = 5826;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDropCharacterMessage.targetId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightDropCharacterMessage.cellId.");
        };
    }
};
module.exports.GameActionFightDropCharacterMessage = GameActionFightDropCharacterMessage;
module.exports.messages[5826] = GameActionFightDropCharacterMessage;

class GameActionFightExchangePositionsMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, casterCellId, targetCellId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.casterCellId = casterCellId;
        this.targetCellId = targetCellId;
        this.messageId = 5527;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.casterCellId < -1 || this.casterCellId > 559) {
            throw new Error("Forbidden value (" + this.casterCellId + ") on element casterCellId.");
        }
        this.buffer.writeShort(this.casterCellId);
        if (this.targetCellId < -1 || this.targetCellId > 559) {
            throw new Error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
        }
        this.buffer.writeShort(this.targetCellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightExchangePositionsMessage.targetId.");
        }
        this.casterCellId = buffer.readShort();
        if (this.casterCellId < -1 || this.casterCellId > 559) {
            throw new Error("Forbidden value (" + this.casterCellId + ") on element of GameActionFightExchangePositionsMessage.casterCellId.");
        };
        this.targetCellId = buffer.readShort();
        if (this.targetCellId < -1 || this.targetCellId > 559) {
            throw new Error("Forbidden value (" + this.targetCellId + ") on element of GameActionFightExchangePositionsMessage.targetCellId.");
        };
    }
};
module.exports.GameActionFightExchangePositionsMessage = GameActionFightExchangePositionsMessage;
module.exports.messages[5527] = GameActionFightExchangePositionsMessage;

class GameActionFightInvisibilityMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, state) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.state = state;
        this.messageId = 5821;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        this.buffer.writeByte(this.state);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightInvisibilityMessage.targetId.");
        }
        this.state = buffer.readByte();
        if (this.state < 0) {
            throw new Error("Forbidden value (" + this.state + ") on element of GameActionFightInvisibilityMessage.state.");
        };
    }
};
module.exports.GameActionFightInvisibilityMessage = GameActionFightInvisibilityMessage;
module.exports.messages[5821] = GameActionFightInvisibilityMessage;

class GameActionFightInvisibleDetectedMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, cellId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.cellId = cellId;
        this.messageId = 6320;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightInvisibleDetectedMessage.targetId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightInvisibleDetectedMessage.cellId.");
        };
    }
};
module.exports.GameActionFightInvisibleDetectedMessage = GameActionFightInvisibleDetectedMessage;
module.exports.messages[6320] = GameActionFightInvisibleDetectedMessage;

class GameActionFightKillMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.messageId = 5571;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightKillMessage.targetId.");
        }
    }
};
module.exports.GameActionFightKillMessage = GameActionFightKillMessage;
module.exports.messages[5571] = GameActionFightKillMessage;

class GameActionFightLifePointsLostMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, loss, permanentDamages) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.loss = loss;
        this.permanentDamages = permanentDamages;
        this.messageId = 6312;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.loss < 0) {
            throw new Error("Forbidden value (" + this.loss + ") on element loss.");
        }
        this.buffer.writeVarInt(this.loss);
        if (this.permanentDamages < 0) {
            throw new Error("Forbidden value (" + this.permanentDamages + ") on element permanentDamages.");
        }
        this.buffer.writeVarInt(this.permanentDamages);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightLifePointsLostMessage.targetId.");
        }
        this.loss = buffer.readVarUhInt();
        if (this.loss < 0) {
            throw new Error("Forbidden value (" + this.loss + ") on element of GameActionFightLifePointsLostMessage.loss.");
        };
        this.permanentDamages = buffer.readVarUhInt();
        if (this.permanentDamages < 0) {
            throw new Error("Forbidden value (" + this.permanentDamages + ") on element of GameActionFightLifePointsLostMessage.permanentDamages.");
        };
    }
};
module.exports.GameActionFightLifePointsLostMessage = GameActionFightLifePointsLostMessage;
module.exports.messages[6312] = GameActionFightLifePointsLostMessage;

class GameActionFightLifeAndShieldPointsLostMessage extends GameActionFightLifePointsLostMessage {
    constructor(actionId, sourceId, targetId, loss, permanentDamages, shieldLoss) {
        super(actionId, sourceId, targetId, loss, permanentDamages);
        this.shieldLoss = shieldLoss;
        this.messageId = 6310;
    }

    serialize() {
        super.serialize();
        if (this.shieldLoss < 0) {
            throw new Error("Forbidden value (" + this.shieldLoss + ") on element shieldLoss.");
        }
        this.buffer.writeVarShort(this.shieldLoss);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.shieldLoss = buffer.readVarUhShort();
        if (this.shieldLoss < 0) {
            throw new Error("Forbidden value (" + this.shieldLoss + ") on element of GameActionFightLifeAndShieldPointsLostMessage.shieldLoss.");
        }
    }
};
module.exports.GameActionFightLifeAndShieldPointsLostMessage = GameActionFightLifeAndShieldPointsLostMessage;
module.exports.messages[6310] = GameActionFightLifeAndShieldPointsLostMessage;

class GameActionFightLifePointsGainMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, delta) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.delta = delta;
        this.messageId = 6311;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.delta < 0) {
            throw new Error("Forbidden value (" + this.delta + ") on element delta.");
        }
        this.buffer.writeVarInt(this.delta);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightLifePointsGainMessage.targetId.");
        }
        this.delta = buffer.readVarUhInt();
        if (this.delta < 0) {
            throw new Error("Forbidden value (" + this.delta + ") on element of GameActionFightLifePointsGainMessage.delta.");
        };
    }
};
module.exports.GameActionFightLifePointsGainMessage = GameActionFightLifePointsGainMessage;
module.exports.messages[6311] = GameActionFightLifePointsGainMessage;

class GameActionFightMarkCellsMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, mark) {
        super(actionId, sourceId);
        this.mark = mark;
        this.messageId = 5540;
    }

    serialize() {
        super.serialize();
        this.mark.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.mark = new GameActionMark();
        this.mark.deserialize(buffer);
    }
};
module.exports.GameActionFightMarkCellsMessage = GameActionFightMarkCellsMessage;
module.exports.messages[5540] = GameActionFightMarkCellsMessage;

class GameActionFightModifyEffectsDurationMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, delta) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.delta = delta;
        this.messageId = 6304;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        this.buffer.writeShort(this.delta);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightModifyEffectsDurationMessage.targetId.");
        }
        this.delta = buffer.readShort();
    }
};
module.exports.GameActionFightModifyEffectsDurationMessage = GameActionFightModifyEffectsDurationMessage;
module.exports.messages[6304] = GameActionFightModifyEffectsDurationMessage;

class GameActionFightNoSpellCastMessage extends ProtocolMessage {
    constructor(spellLevelId) {
        super(6132);
        this.spellLevelId = spellLevelId;
    }

    serialize() {
        if (this.spellLevelId < 0) {
            throw new Error("Forbidden value (" + this.spellLevelId + ") on element spellLevelId.");
        }
        this.buffer.writeVarInt(this.spellLevelId);
    }

    deserialize(buffer) {
        this.spellLevelId = buffer.readVarUhInt();
        if (this.spellLevelId < 0) {
            throw new Error("Forbidden value (" + this.spellLevelId + ") on element of GameActionFightNoSpellCastMessage.spellLevelId.");
        }
    }
};
module.exports.GameActionFightNoSpellCastMessage = GameActionFightNoSpellCastMessage;
module.exports.messages[6132] = GameActionFightNoSpellCastMessage;

class GameActionFightPointsVariationMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, delta) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.delta = delta;
        this.messageId = 1030;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        this.buffer.writeShort(this.delta);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightPointsVariationMessage.targetId.");
        }
        this.delta = buffer.readShort();
    }
};
module.exports.GameActionFightPointsVariationMessage = GameActionFightPointsVariationMessage;
module.exports.messages[1030] = GameActionFightPointsVariationMessage;

class GameActionFightReduceDamagesMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, amount) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.amount = amount;
        this.messageId = 5526;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.amount < 0) {
            throw new Error("Forbidden value (" + this.amount + ") on element amount.");
        }
        this.buffer.writeVarInt(this.amount);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightReduceDamagesMessage.targetId.");
        }
        this.amount = buffer.readVarUhInt();
        if (this.amount < 0) {
            throw new Error("Forbidden value (" + this.amount + ") on element of GameActionFightReduceDamagesMessage.amount.");
        };
    }
};
module.exports.GameActionFightReduceDamagesMessage = GameActionFightReduceDamagesMessage;
module.exports.messages[5526] = GameActionFightReduceDamagesMessage;

class GameActionFightReflectDamagesMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.messageId = 5530;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightReflectDamagesMessage.targetId.");
        }
    }
};
module.exports.GameActionFightReflectDamagesMessage = GameActionFightReflectDamagesMessage;
module.exports.messages[5530] = GameActionFightReflectDamagesMessage;

class GameActionFightReflectSpellMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.messageId = 5531;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightReflectSpellMessage.targetId.");
        }
    }
};
module.exports.GameActionFightReflectSpellMessage = GameActionFightReflectSpellMessage;
module.exports.messages[5531] = GameActionFightReflectSpellMessage;

class GameActionFightSlideMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, startCellId, endCellId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.startCellId = startCellId;
        this.endCellId = endCellId;
        this.messageId = 5525;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.startCellId < -1 || this.startCellId > 559) {
            throw new Error("Forbidden value (" + this.startCellId + ") on element startCellId.");
        }
        this.buffer.writeShort(this.startCellId);
        if (this.endCellId < -1 || this.endCellId > 559) {
            throw new Error("Forbidden value (" + this.endCellId + ") on element endCellId.");
        }
        this.buffer.writeShort(this.endCellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightSlideMessage.targetId.");
        }
        this.startCellId = buffer.readShort();
        if (this.startCellId < -1 || this.startCellId > 559) {
            throw new Error("Forbidden value (" + this.startCellId + ") on element of GameActionFightSlideMessage.startCellId.");
        };
        this.endCellId = buffer.readShort();
        if (this.endCellId < -1 || this.endCellId > 559) {
            throw new Error("Forbidden value (" + this.endCellId + ") on element of GameActionFightSlideMessage.endCellId.");
        };
    }
};
module.exports.GameActionFightSlideMessage = GameActionFightSlideMessage;
module.exports.messages[5525] = GameActionFightSlideMessage;

class GameActionFightSpellCastMessage extends AbstractGameActionFightTargetedAbilityMessage {
    constructor(actionId, sourceId, targetId, destinationCellId, critical, silentCast, verboseCast, spellId, spellLevel, portalsIds) {
        super(actionId, sourceId, targetId, destinationCellId, critical, silentCast, verboseCast);
        this.spellId = spellId;
        this.spellLevel = spellLevel;
        this.portalsIds = portalsIds;
        this.messageId = 1010;
    }

    serialize() {
        super.serialize();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
        }
        this.buffer.writeShort(this.spellLevel);
        this.buffer.writeShort(this.portalsIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.portalsIds.length) {
            this.buffer.writeShort(this.portalsIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellCastMessage.spellId.");
        }
        this.spellLevel = buffer.readShort();
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            throw new Error("Forbidden value (" + this.spellLevel + ") on element of GameActionFightSpellCastMessage.spellLevel.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readShort();
            this.portalsIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameActionFightSpellCastMessage = GameActionFightSpellCastMessage;
module.exports.messages[1010] = GameActionFightSpellCastMessage;

class GameActionFightSpellCooldownVariationMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, spellId, value) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.spellId = spellId;
        this.value = value;
        this.messageId = 6219;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        this.buffer.writeVarShort(this.value);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightSpellCooldownVariationMessage.targetId.");
        }
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellCooldownVariationMessage.spellId.");
        };
        this.value = buffer.readVarShort();
    }
};
module.exports.GameActionFightSpellCooldownVariationMessage = GameActionFightSpellCooldownVariationMessage;
module.exports.messages[6219] = GameActionFightSpellCooldownVariationMessage;

class GameActionFightSpellImmunityMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, spellId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.spellId = spellId;
        this.messageId = 6221;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightSpellImmunityMessage.targetId.");
        }
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellImmunityMessage.spellId.");
        };
    }
};
module.exports.GameActionFightSpellImmunityMessage = GameActionFightSpellImmunityMessage;
module.exports.messages[6221] = GameActionFightSpellImmunityMessage;

class GameActionFightStealKamaMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, amount) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.amount = amount;
        this.messageId = 5535;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.amount < 0 || this.amount > 9007199254740990) {
            throw new Error("Forbidden value (" + this.amount + ") on element amount.");
        }
        this.buffer.writeVarLong(this.amount);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightStealKamaMessage.targetId.");
        }
        this.amount = buffer.readVarUhLong();
        if (this.amount < 0 || this.amount > 9007199254740990) {
            throw new Error("Forbidden value (" + this.amount + ") on element of GameActionFightStealKamaMessage.amount.");
        };
    }
};
module.exports.GameActionFightStealKamaMessage = GameActionFightStealKamaMessage;
module.exports.messages[5535] = GameActionFightStealKamaMessage;

class GameActionFightSummonMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, summons) {
        super(actionId, sourceId);
        this.summons = summons;
        this.messageId = 5825;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.summons.length);
        var _loc2_ = 0;
        while (_loc2_ < this.summons.length) {
            this.buffer.writeShort((this.summons[_loc2_]).getTypeId());
            (this.summons[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(GameFightFighterInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.summons.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.GameActionFightSummonMessage = GameActionFightSummonMessage;
module.exports.messages[5825] = GameActionFightSummonMessage;

class GameActionFightTackledMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, tacklersIds) {
        super(actionId, sourceId);
        this.tacklersIds = tacklersIds;
        this.messageId = 1004;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.tacklersIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.tacklersIds.length) {
            if (this.tacklersIds[_loc2_] < -9007199254740990 || this.tacklersIds[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.tacklersIds[_loc2_] + ") on element 1 (starting at 1) of tacklersIds.");
            }
            this.buffer.writeDouble(this.tacklersIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = NaN;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readDouble();
            if (_loc4_ < -9007199254740990 || _loc4_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of tacklersIds.");
            }
            this.tacklersIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameActionFightTackledMessage = GameActionFightTackledMessage;
module.exports.messages[1004] = GameActionFightTackledMessage;

class GameActionFightTeleportOnSameMapMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, cellId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.cellId = cellId;
        this.messageId = 5528;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightTeleportOnSameMapMessage.targetId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightTeleportOnSameMapMessage.cellId.");
        };
    }
};
module.exports.GameActionFightTeleportOnSameMapMessage = GameActionFightTeleportOnSameMapMessage;
module.exports.messages[5528] = GameActionFightTeleportOnSameMapMessage;

class GameActionFightThrowCharacterMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId, cellId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.cellId = cellId;
        this.messageId = 5829;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightThrowCharacterMessage.targetId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightThrowCharacterMessage.cellId.");
        };
    }
};
module.exports.GameActionFightThrowCharacterMessage = GameActionFightThrowCharacterMessage;
module.exports.messages[5829] = GameActionFightThrowCharacterMessage;

class GameActionFightTriggerEffectMessage extends GameActionFightDispellEffectMessage {
    constructor(param1, param2, targetId, boostUID) {
        super(actionId, sourceId, targetId, boostUID);
        this.messageId = 6147;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GameActionFightTriggerEffectMessage = GameActionFightTriggerEffectMessage;
module.exports.messages[6147] = GameActionFightTriggerEffectMessage;

class GameActionFightTriggerGlyphTrapMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, markId, triggeringCharacterId, triggeredSpellId) {
        super(actionId, sourceId);
        this.markId = markId;
        this.triggeringCharacterId = triggeringCharacterId;
        this.triggeredSpellId = triggeredSpellId;
        this.messageId = 5741;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.markId);
        if (this.triggeringCharacterId < -9007199254740990 || this.triggeringCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.triggeringCharacterId + ") on element triggeringCharacterId.");
        }
        this.buffer.writeDouble(this.triggeringCharacterId);
        if (this.triggeredSpellId < 0) {
            throw new Error("Forbidden value (" + this.triggeredSpellId + ") on element triggeredSpellId.");
        }
        this.buffer.writeVarShort(this.triggeredSpellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.markId = buffer.readShort();
        this.triggeringCharacterId = buffer.readDouble();
        if (this.triggeringCharacterId < -9007199254740990 || this.triggeringCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.triggeringCharacterId + ") on element of GameActionFightTriggerGlyphTrapMessage.triggeringCharacterId.");
        }
        this.triggeredSpellId = buffer.readVarUhShort();
        if (this.triggeredSpellId < 0) {
            throw new Error("Forbidden value (" + this.triggeredSpellId + ") on element of GameActionFightTriggerGlyphTrapMessage.triggeredSpellId.");
        };
    }
};
module.exports.GameActionFightTriggerGlyphTrapMessage = GameActionFightTriggerGlyphTrapMessage;
module.exports.messages[5741] = GameActionFightTriggerGlyphTrapMessage;

class GameActionFightUnmarkCellsMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, markId) {
        super(actionId, sourceId);
        this.markId = markId;
        this.messageId = 5570;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.markId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.markId = buffer.readShort();
    }
};
module.exports.GameActionFightUnmarkCellsMessage = GameActionFightUnmarkCellsMessage;
module.exports.messages[5570] = GameActionFightUnmarkCellsMessage;

class GameActionFightVanishMessage extends AbstractGameActionMessage {
    constructor(actionId, sourceId, targetId) {
        super(actionId, sourceId);
        this.targetId = targetId;
        this.messageId = 6217;
    }

    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightVanishMessage.targetId.");
        }
    }
};
module.exports.GameActionFightVanishMessage = GameActionFightVanishMessage;
module.exports.messages[6217] = GameActionFightVanishMessage;

class GameActionAcknowledgementMessage extends ProtocolMessage {
    constructor(valid, actionId) {
        super(957);
        this.valid = valid;
        this.actionId = actionId;
    }

    serialize() {
        this.buffer.writeBoolean(this.valid);
        this.buffer.writeByte(this.actionId);
    }

    deserialize(buffer) {
        this.valid = buffer.readBoolean();
        this.actionId = buffer.readByte();;
    }
};
module.exports.GameActionAcknowledgementMessage = GameActionAcknowledgementMessage;
module.exports.messages[957] = GameActionAcknowledgementMessage;

class GameActionNoopMessage extends ProtocolMessage {
    constructor() {
        super(1002);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameActionNoopMessage = GameActionNoopMessage;
module.exports.messages[1002] = GameActionNoopMessage;

class SequenceEndMessage extends ProtocolMessage {
    constructor(actionId, authorId, sequenceType) {
        super(956);
        this.actionId = actionId;
        this.authorId = authorId;
        this.sequenceType = sequenceType;
    }

    serialize() {
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        this.buffer.writeVarShort(this.actionId);
        if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.authorId + ") on element authorId.");
        }
        this.buffer.writeDouble(this.authorId);
        this.buffer.writeByte(this.sequenceType);
    }

    deserialize(buffer) {
        this.actionId = buffer.readVarUhShort();
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element of SequenceEndMessage.actionId.");
        }
        this.authorId = buffer.readDouble();
        if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.authorId + ") on element of SequenceEndMessage.authorId.");
        };
        this.sequenceType = buffer.readByte();
    }
};
module.exports.SequenceEndMessage = SequenceEndMessage;
module.exports.messages[956] = SequenceEndMessage;

class SequenceStartMessage extends ProtocolMessage {
    constructor(sequenceType, authorId) {
        super(955);
        this.sequenceType = sequenceType;
        this.authorId = authorId;
    }

    serialize() {
        this.buffer.writeByte(this.sequenceType);
        if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.authorId + ") on element authorId.");
        }
        this.buffer.writeDouble(this.authorId);
    }

    deserialize(buffer) {
        this.sequenceType = buffer.readByte();
        this.authorId = buffer.readDouble();
        if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.authorId + ") on element of SequenceStartMessage.authorId.");
        }
    }
};
module.exports.SequenceStartMessage = SequenceStartMessage;
module.exports.messages[955] = SequenceStartMessage;

class SocialNoticeMessage extends ProtocolMessage {
    constructor(content, timestamp, memberId, memberName) {
        super(6688);
        this.content = content;
        this.timestamp = timestamp;
        this.memberId = memberId;
        this.memberName = memberName;
    }

    serialize() {
        this.buffer.writeUTF(this.content);
        if (this.timestamp < 0) {
            throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
        }
        this.buffer.writeInt(this.timestamp);
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        this.buffer.writeUTF(this.memberName);
    }

    deserialize(buffer) {
        this.content = buffer.readUTF();
        this.timestamp = buffer.readInt();
        if (this.timestamp < 0) {
            throw new Error("Forbidden value (" + this.timestamp + ") on element of SocialNoticeMessage.timestamp.");
        }
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element of SocialNoticeMessage.memberId.");
        };
        this.memberName = buffer.readUTF();;
    }
};
module.exports.SocialNoticeMessage = SocialNoticeMessage;
module.exports.messages[6688] = SocialNoticeMessage;

class BulletinMessage extends SocialNoticeMessage {
    constructor(content, timestamp, memberId, memberName, lastNotifiedTimestamp) {
        super(content, timestamp, memberId, memberName);
        this.lastNotifiedTimestamp = lastNotifiedTimestamp;
        this.messageId = 6695;
    }

    serialize() {
        super.serialize();
        if (this.lastNotifiedTimestamp < 0) {
            throw new Error("Forbidden value (" + this.lastNotifiedTimestamp + ") on element lastNotifiedTimestamp.");
        }
        this.buffer.writeInt(this.lastNotifiedTimestamp);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.lastNotifiedTimestamp = buffer.readInt();
        if (this.lastNotifiedTimestamp < 0) {
            throw new Error("Forbidden value (" + this.lastNotifiedTimestamp + ") on element of BulletinMessage.lastNotifiedTimestamp.");
        }
    }
};
module.exports.BulletinMessage = BulletinMessage;
module.exports.messages[6695] = BulletinMessage;

class AllianceBulletinMessage extends BulletinMessage {
    constructor(content, timestamp, memberId, memberName, lastNotifiedTimestamp) {
        super(content, timestamp, memberId, memberName, lastNotifiedTimestamp);
        this.messageId = 6690;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.AllianceBulletinMessage = AllianceBulletinMessage;
module.exports.messages[6690] = AllianceBulletinMessage;

class SocialNoticeSetErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6684);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of SocialNoticeSetErrorMessage.reason.");
        }
    }
};
module.exports.SocialNoticeSetErrorMessage = SocialNoticeSetErrorMessage;
module.exports.messages[6684] = SocialNoticeSetErrorMessage;

class AllianceBulletinSetErrorMessage extends SocialNoticeSetErrorMessage {
    constructor(reason) {
        super(reason);
        this.messageId = 6692;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.AllianceBulletinSetErrorMessage = AllianceBulletinSetErrorMessage;
module.exports.messages[6692] = AllianceBulletinSetErrorMessage;

class SocialNoticeSetRequestMessage extends ProtocolMessage {
    constructor() {
        super(6686);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.SocialNoticeSetRequestMessage = SocialNoticeSetRequestMessage;
module.exports.messages[6686] = SocialNoticeSetRequestMessage;

class AllianceBulletinSetRequestMessage extends SocialNoticeSetRequestMessage {
    constructor(content, notifyMembers) {
        super();
        this.content = content;
        this.notifyMembers = notifyMembers;
        this.messageId = 6693;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.content);
        this.buffer.writeBoolean(this.notifyMembers);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.content = buffer.readUTF();
        this.notifyMembers = buffer.readBoolean();;
    }
};
module.exports.AllianceBulletinSetRequestMessage = AllianceBulletinSetRequestMessage;
module.exports.messages[6693] = AllianceBulletinSetRequestMessage;

class AllianceChangeGuildRightsMessage extends ProtocolMessage {
    constructor(guildId, rights) {
        super(6426);
        this.guildId = guildId;
        this.rights = rights;
    }

    serialize() {
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
        if (this.rights < 0) {
            throw new Error("Forbidden value (" + this.rights + ") on element rights.");
        }
        this.buffer.writeByte(this.rights);
    }

    deserialize(buffer) {
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element of AllianceChangeGuildRightsMessage.guildId.");
        }
        this.rights = buffer.readByte();
        if (this.rights < 0) {
            throw new Error("Forbidden value (" + this.rights + ") on element of AllianceChangeGuildRightsMessage.rights.");
        };
    }
};
module.exports.AllianceChangeGuildRightsMessage = AllianceChangeGuildRightsMessage;
module.exports.messages[6426] = AllianceChangeGuildRightsMessage;

class AllianceCreationResultMessage extends ProtocolMessage {
    constructor(result) {
        super(6391);
        this.result = result;
    }

    serialize() {
        this.buffer.writeByte(this.result);
    }

    deserialize(buffer) {
        this.result = buffer.readByte();
        if (this.result < 0) {
            throw new Error("Forbidden value (" + this.result + ") on element of AllianceCreationResultMessage.result.");
        }
    }
};
module.exports.AllianceCreationResultMessage = AllianceCreationResultMessage;
module.exports.messages[6391] = AllianceCreationResultMessage;

class AllianceCreationStartedMessage extends ProtocolMessage {
    constructor() {
        super(6394);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.AllianceCreationStartedMessage = AllianceCreationStartedMessage;
module.exports.messages[6394] = AllianceCreationStartedMessage;

class AllianceCreationValidMessage extends ProtocolMessage {
    constructor(allianceName, allianceTag, allianceEmblem) {
        super(6393);
        this.allianceName = allianceName;
        this.allianceTag = allianceTag;
        this.allianceEmblem = allianceEmblem;
    }

    serialize() {
        this.buffer.writeUTF(this.allianceName);
        this.buffer.writeUTF(this.allianceTag);
        this.allianceEmblem.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.allianceName = buffer.readUTF();
        this.allianceTag = buffer.readUTF();;
        this.allianceEmblem = new GuildEmblem();
        this.allianceEmblem.deserialize(buffer);
    }
};
module.exports.AllianceCreationValidMessage = AllianceCreationValidMessage;
module.exports.messages[6393] = AllianceCreationValidMessage;

class AllianceFactsErrorMessage extends ProtocolMessage {
    constructor(allianceId) {
        super(6423);
        this.allianceId = allianceId;
    }

    serialize() {
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        this.buffer.writeVarInt(this.allianceId);
    }

    deserialize(buffer) {
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element of AllianceFactsErrorMessage.allianceId.");
        }
    }
};
module.exports.AllianceFactsErrorMessage = AllianceFactsErrorMessage;
module.exports.messages[6423] = AllianceFactsErrorMessage;

class AllianceFactsMessage extends ProtocolMessage {
    constructor(infos, guilds, controlledSubareaIds, leaderCharacterId, leaderCharacterName) {
        super(6414);
        this.infos = infos;
        this.guilds = guilds;
        this.controlledSubareaIds = controlledSubareaIds;
        this.leaderCharacterId = leaderCharacterId;
        this.leaderCharacterName = leaderCharacterName;
    }

    serialize() {
        this.buffer.writeShort(this.infos.getTypeId());
        this.infos.serialize(this.buffer);
        this.buffer.writeShort(this.guilds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.guilds.length) {
            (this.guilds[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.controlledSubareaIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.controlledSubareaIds.length) {
            if (this.controlledSubareaIds[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.controlledSubareaIds[_loc3_] + ") on element 3 (starting at 1) of controlledSubareaIds.");
            }
            this.buffer.writeVarShort(this.controlledSubareaIds[_loc3_]);
            _loc3_++;
        }
        if (this.leaderCharacterId < 0 || this.leaderCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leaderCharacterId + ") on element leaderCharacterId.");
        }
        this.buffer.writeVarLong(this.leaderCharacterId);
        this.buffer.writeUTF(this.leaderCharacterName);
    }

    deserialize(buffer) {
        var _loc7_ = null;
        var _loc8_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        this.infos = ProtocolTypeManager.getInstance(AllianceFactSheetInformations, _loc2_);
        this.infos.deserialize(buffer);
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc7_ = new GuildInAllianceInformations();
            _loc7_.deserialize(buffer);
            this.guilds.push(_loc7_);
            _loc4_++;
        }
        var _loc5_ = buffer.readUnsignedShort();
        var _loc6_ = 0;
        while (_loc6_ < _loc5_) {
            _loc8_ = buffer.readVarUhShort();
            if (_loc8_ < 0) {
                throw new Error("Forbidden value (" + _loc8_ + ") on elements of controlledSubareaIds.");
            }
            this.controlledSubareaIds.push(_loc8_);
            _loc6_++;
        }
        this._leaderCharacterIdFunc(buffer);
        this.leaderCharacterName = buffer.readUTF();
    }
};
module.exports.AllianceFactsMessage = AllianceFactsMessage;
module.exports.messages[6414] = AllianceFactsMessage;

class AllianceFactsRequestMessage extends ProtocolMessage {
    constructor(allianceId) {
        super(6409);
        this.allianceId = allianceId;
    }

    serialize() {
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        this.buffer.writeVarInt(this.allianceId);
    }

    deserialize(buffer) {
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            throw new Error("Forbidden value (" + this.allianceId + ") on element of AllianceFactsRequestMessage.allianceId.");
        }
    }
};
module.exports.AllianceFactsRequestMessage = AllianceFactsRequestMessage;
module.exports.messages[6409] = AllianceFactsRequestMessage;

class AllianceGuildLeavingMessage extends ProtocolMessage {
    constructor(kicked, guildId) {
        super(6399);
        this.kicked = kicked;
        this.guildId = guildId;
    }

    serialize() {
        this.buffer.writeBoolean(this.kicked);
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
    }

    deserialize(buffer) {
        this.kicked = buffer.readBoolean();
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element of AllianceGuildLeavingMessage.guildId.");
        }
    }
};
module.exports.AllianceGuildLeavingMessage = AllianceGuildLeavingMessage;
module.exports.messages[6399] = AllianceGuildLeavingMessage;

class AllianceInsiderInfoMessage extends ProtocolMessage {
    constructor(allianceInfos, guilds, prisms) {
        super(6403);
        this.allianceInfos = allianceInfos;
        this.guilds = guilds;
        this.prisms = prisms;
    }

    serialize() {
        this.allianceInfos.serialize(this.buffer);
        this.buffer.writeShort(this.guilds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.guilds.length) {
            (this.guilds[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.prisms.length);
        var _loc3_ = 0;
        while (_loc3_ < this.prisms.length) {
            this.buffer.writeShort((this.prisms[_loc3_]).getTypeId());
            (this.prisms[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = 0;
        var _loc8_ = null;
        this.allianceInfos = new AllianceFactSheetInformations();
        this.allianceInfos.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new GuildInsiderFactSheetInformations();
            _loc6_.deserialize(buffer);
            this.guilds.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readUnsignedShort();
            _loc8_ = ProtocolTypeManager.getInstance(PrismSubareaEmptyInfo, _loc7_);
            _loc8_.deserialize(buffer);
            this.prisms.push(_loc8_);
            _loc5_++;
        }
    }
};
module.exports.AllianceInsiderInfoMessage = AllianceInsiderInfoMessage;
module.exports.messages[6403] = AllianceInsiderInfoMessage;

class AllianceInsiderInfoRequestMessage extends ProtocolMessage {
    constructor() {
        super(6417);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.AllianceInsiderInfoRequestMessage = AllianceInsiderInfoRequestMessage;
module.exports.messages[6417] = AllianceInsiderInfoRequestMessage;

class AllianceInvitationAnswerMessage extends ProtocolMessage {
    constructor(accept) {
        super(6401);
        this.accept = accept;
    }

    serialize() {
        this.buffer.writeBoolean(this.accept);
    }

    deserialize(buffer) {
        this.accept = buffer.readBoolean();
    }
};
module.exports.AllianceInvitationAnswerMessage = AllianceInvitationAnswerMessage;
module.exports.messages[6401] = AllianceInvitationAnswerMessage;

class AllianceInvitationMessage extends ProtocolMessage {
    constructor(targetId) {
        super(6395);
        this.targetId = targetId;
    }

    serialize() {
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
    }

    deserialize(buffer) {
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of AllianceInvitationMessage.targetId.");
        }
    }
};
module.exports.AllianceInvitationMessage = AllianceInvitationMessage;
module.exports.messages[6395] = AllianceInvitationMessage;

class AllianceInvitationStateRecrutedMessage extends ProtocolMessage {
    constructor(invitationState) {
        super(6392);
        this.invitationState = invitationState;
    }

    serialize() {
        this.buffer.writeByte(this.invitationState);
    }

    deserialize(buffer) {
        this.invitationState = buffer.readByte();
        if (this.invitationState < 0) {
            throw new Error("Forbidden value (" + this.invitationState + ") on element of AllianceInvitationStateRecrutedMessage.invitationState.");
        }
    }
};
module.exports.AllianceInvitationStateRecrutedMessage = AllianceInvitationStateRecrutedMessage;
module.exports.messages[6392] = AllianceInvitationStateRecrutedMessage;

class AllianceInvitationStateRecruterMessage extends ProtocolMessage {
    constructor(recrutedName, invitationState) {
        super(6396);
        this.recrutedName = recrutedName;
        this.invitationState = invitationState;
    }

    serialize() {
        this.buffer.writeUTF(this.recrutedName);
        this.buffer.writeByte(this.invitationState);
    }

    deserialize(buffer) {
        this.recrutedName = buffer.readUTF();
        this.invitationState = buffer.readByte();
        if (this.invitationState < 0) {
            throw new Error("Forbidden value (" + this.invitationState + ") on element of AllianceInvitationStateRecruterMessage.invitationState.");
        }
    }
};
module.exports.AllianceInvitationStateRecruterMessage = AllianceInvitationStateRecruterMessage;
module.exports.messages[6396] = AllianceInvitationStateRecruterMessage;

class AllianceInvitedMessage extends ProtocolMessage {
    constructor(recruterId, recruterName, allianceInfo) {
        super(6397);
        this.recruterId = recruterId;
        this.recruterName = recruterName;
        this.allianceInfo = allianceInfo;
    }

    serialize() {
        if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.recruterId + ") on element recruterId.");
        }
        this.buffer.writeVarLong(this.recruterId);
        this.buffer.writeUTF(this.recruterName);
        this.allianceInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.recruterId = buffer.readVarUhLong();
        if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.recruterId + ") on element of AllianceInvitedMessage.recruterId.");
        }
        this.recruterName = buffer.readUTF();
        this.allianceInfo = new BasicNamedAllianceInformations();
        this.allianceInfo.deserialize(buffer);
    }
};
module.exports.AllianceInvitedMessage = AllianceInvitedMessage;
module.exports.messages[6397] = AllianceInvitedMessage;

class AllianceJoinedMessage extends ProtocolMessage {
    constructor(allianceInfo, enabled, leadingGuildId) {
        super(6402);
        this.allianceInfo = allianceInfo;
        this.enabled = enabled;
        this.leadingGuildId = leadingGuildId;
    }

    serialize() {
        this.allianceInfo.serialize(this.buffer);
        this.buffer.writeBoolean(this.enabled);
        if (this.leadingGuildId < 0) {
            throw new Error("Forbidden value (" + this.leadingGuildId + ") on element leadingGuildId.");
        }
        this.buffer.writeVarInt(this.leadingGuildId);
    }

    deserialize(buffer) {
        this.allianceInfo = new AllianceInformations();
        this.allianceInfo.deserialize(buffer);
        this.enabled = buffer.readBoolean();
        this.leadingGuildId = buffer.readVarUhInt();
        if (this.leadingGuildId < 0) {
            throw new Error("Forbidden value (" + this.leadingGuildId + ") on element of AllianceJoinedMessage.leadingGuildId.");
        }
    }
};
module.exports.AllianceJoinedMessage = AllianceJoinedMessage;
module.exports.messages[6402] = AllianceJoinedMessage;

class AllianceKickRequestMessage extends ProtocolMessage {
    constructor(kickedId) {
        super(6400);
        this.kickedId = kickedId;
    }

    serialize() {
        if (this.kickedId < 0) {
            throw new Error("Forbidden value (" + this.kickedId + ") on element kickedId.");
        }
        this.buffer.writeVarInt(this.kickedId);
    }

    deserialize(buffer) {
        this.kickedId = buffer.readVarUhInt();
        if (this.kickedId < 0) {
            throw new Error("Forbidden value (" + this.kickedId + ") on element of AllianceKickRequestMessage.kickedId.");
        }
    }
};
module.exports.AllianceKickRequestMessage = AllianceKickRequestMessage;
module.exports.messages[6400] = AllianceKickRequestMessage;

class AllianceLeftMessage extends ProtocolMessage {
    constructor() {
        super(6398);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.AllianceLeftMessage = AllianceLeftMessage;
module.exports.messages[6398] = AllianceLeftMessage;

class AllianceListMessage extends ProtocolMessage {
    constructor(alliances) {
        super(6408);
        this.alliances = alliances;
    }

    serialize() {
        this.buffer.writeShort(this.alliances.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alliances.length) {
            (this.alliances[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new AllianceFactSheetInformations();
            _loc4_.deserialize(buffer);
            this.alliances.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.AllianceListMessage = AllianceListMessage;
module.exports.messages[6408] = AllianceListMessage;

class AllianceMembershipMessage extends AllianceJoinedMessage {
    constructor(allianceInfo, enabled, leadingGuildId) {
        super(allianceInfo, enabled, leadingGuildId);
        this.messageId = 6390;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.AllianceMembershipMessage = AllianceMembershipMessage;
module.exports.messages[6390] = AllianceMembershipMessage;

class AllianceModificationEmblemValidMessage extends ProtocolMessage {
    constructor(Alliancemblem) {
        super(6447);
        this.Alliancemblem = Alliancemblem;
    }

    serialize() {
        this.Alliancemblem.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.Alliancemblem = new GuildEmblem();
        this.Alliancemblem.deserialize(buffer);
    }
};
module.exports.AllianceModificationEmblemValidMessage = AllianceModificationEmblemValidMessage;
module.exports.messages[6447] = AllianceModificationEmblemValidMessage;

class AllianceModificationNameAndTagValidMessage extends ProtocolMessage {
    constructor(allianceName, allianceTag) {
        super(6449);
        this.allianceName = allianceName;
        this.allianceTag = allianceTag;
    }

    serialize() {
        this.buffer.writeUTF(this.allianceName);
        this.buffer.writeUTF(this.allianceTag);
    }

    deserialize(buffer) {
        this.allianceName = buffer.readUTF();
        this.allianceTag = buffer.readUTF();;
    }
};
module.exports.AllianceModificationNameAndTagValidMessage = AllianceModificationNameAndTagValidMessage;
module.exports.messages[6449] = AllianceModificationNameAndTagValidMessage;

class AllianceModificationStartedMessage extends ProtocolMessage {
    constructor(canChangeName, canChangeTag, canChangeEmblem) {
        super(6444);
        this.canChangeName = canChangeName;
        this.canChangeTag = canChangeTag;
        this.canChangeEmblem = canChangeEmblem;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.canChangeName);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.canChangeTag);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.canChangeEmblem);
        this.buffer.writeByte(_loc2_);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
    }
};
module.exports.AllianceModificationStartedMessage = AllianceModificationStartedMessage;
module.exports.messages[6444] = AllianceModificationStartedMessage;

class AllianceModificationValidMessage extends ProtocolMessage {
    constructor(allianceName, allianceTag, Alliancemblem) {
        super(6450);
        this.allianceName = allianceName;
        this.allianceTag = allianceTag;
        this.Alliancemblem = Alliancemblem;
    }

    serialize() {
        this.buffer.writeUTF(this.allianceName);
        this.buffer.writeUTF(this.allianceTag);
        this.Alliancemblem.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.allianceName = buffer.readUTF();
        this.allianceTag = buffer.readUTF();;
        this.Alliancemblem = new GuildEmblem();
        this.Alliancemblem.deserialize(buffer);
    }
};
module.exports.AllianceModificationValidMessage = AllianceModificationValidMessage;
module.exports.messages[6450] = AllianceModificationValidMessage;

class AllianceMotdMessage extends SocialNoticeMessage {
    constructor(content, timestamp, memberId, memberName) {
        super(content, timestamp, memberId, memberName);
        this.messageId = 6685;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.AllianceMotdMessage = AllianceMotdMessage;
module.exports.messages[6685] = AllianceMotdMessage;

class AllianceMotdSetErrorMessage extends SocialNoticeSetErrorMessage {
    constructor(reason) {
        super(reason);
        this.messageId = 6683;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.AllianceMotdSetErrorMessage = AllianceMotdSetErrorMessage;
module.exports.messages[6683] = AllianceMotdSetErrorMessage;

class AllianceMotdSetRequestMessage extends SocialNoticeSetRequestMessage {
    constructor(content) {
        super();
        this.content = content;
        this.messageId = 6687;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.content);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.content = buffer.readUTF();
    }
};
module.exports.AllianceMotdSetRequestMessage = AllianceMotdSetRequestMessage;
module.exports.messages[6687] = AllianceMotdSetRequestMessage;

class AlliancePartialListMessage extends AllianceListMessage {
    constructor(alliances) {
        super(alliances);
        this.messageId = 6427;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.AlliancePartialListMessage = AlliancePartialListMessage;
module.exports.messages[6427] = AlliancePartialListMessage;

class AllianceVersatileInfoListMessage extends ProtocolMessage {
    constructor(alliances) {
        super(6436);
        this.alliances = alliances;
    }

    serialize() {
        this.buffer.writeShort(this.alliances.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alliances.length) {
            (this.alliances[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new AllianceVersatileInformations();
            _loc4_.deserialize(buffer);
            this.alliances.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.AllianceVersatileInfoListMessage = AllianceVersatileInfoListMessage;
module.exports.messages[6436] = AllianceVersatileInfoListMessage;

class KohUpdateMessage extends ProtocolMessage {
    constructor(alliances, allianceNbMembers, allianceRoundWeigth, allianceMatchScore, allianceMapWinner, allianceMapWinnerScore, allianceMapMyAllianceScore, nextTickTime) {
        super(6439);
        this.alliances = alliances;
        this.allianceNbMembers = allianceNbMembers;
        this.allianceRoundWeigth = allianceRoundWeigth;
        this.allianceMatchScore = allianceMatchScore;
        this.allianceMapWinner = allianceMapWinner;
        this.allianceMapWinnerScore = allianceMapWinnerScore;
        this.allianceMapMyAllianceScore = allianceMapMyAllianceScore;
        this.nextTickTime = nextTickTime;
    }

    serialize() {
        this.buffer.writeShort(this.alliances.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alliances.length) {
            (this.alliances[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.allianceNbMembers.length);
        var _loc3_ = 0;
        while (_loc3_ < this.allianceNbMembers.length) {
            if (this.allianceNbMembers[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.allianceNbMembers[_loc3_] + ") on element 2 (starting at 1) of allianceNbMembers.");
            }
            this.buffer.writeVarShort(this.allianceNbMembers[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.allianceRoundWeigth.length);
        var _loc4_ = 0;
        while (_loc4_ < this.allianceRoundWeigth.length) {
            if (this.allianceRoundWeigth[_loc4_] < 0) {
                throw new Error("Forbidden value (" + this.allianceRoundWeigth[_loc4_] + ") on element 3 (starting at 1) of allianceRoundWeigth.");
            }
            this.buffer.writeVarInt(this.allianceRoundWeigth[_loc4_]);
            _loc4_++;
        }
        this.buffer.writeShort(this.allianceMatchScore.length);
        var _loc5_ = 0;
        while (_loc5_ < this.allianceMatchScore.length) {
            if (this.allianceMatchScore[_loc5_] < 0) {
                throw new Error("Forbidden value (" + this.allianceMatchScore[_loc5_] + ") on element 4 (starting at 1) of allianceMatchScore.");
            }
            this.buffer.writeByte(this.allianceMatchScore[_loc5_]);
            _loc5_++;
        }
        this.allianceMapWinner.serialize(this.buffer);
        if (this.allianceMapWinnerScore < 0) {
            throw new Error("Forbidden value (" + this.allianceMapWinnerScore + ") on element allianceMapWinnerScore.");
        }
        this.buffer.writeVarInt(this.allianceMapWinnerScore);
        if (this.allianceMapMyAllianceScore < 0) {
            throw new Error("Forbidden value (" + this.allianceMapMyAllianceScore + ") on element allianceMapMyAllianceScore.");
        }
        this.buffer.writeVarInt(this.allianceMapMyAllianceScore);
        if (this.nextTickTime < 0 || this.nextTickTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.nextTickTime + ") on element nextTickTime.");
        }
        this.buffer.writeDouble(this.nextTickTime);
    }

    deserialize(buffer) {
        var _loc10_ = null;
        var _loc11_ = 0;
        var _loc12_ = 0;
        var _loc13_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc10_ = new AllianceInformations();
            _loc10_.deserialize(buffer);
            this.alliances.push(_loc10_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc11_ = buffer.readVarUhShort();
            if (_loc11_ < 0) {
                throw new Error("Forbidden value (" + _loc11_ + ") on elements of allianceNbMembers.");
            }
            this.allianceNbMembers.push(_loc11_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc12_ = buffer.readVarUhInt();
            if (_loc12_ < 0) {
                throw new Error("Forbidden value (" + _loc12_ + ") on elements of allianceRoundWeigth.");
            }
            this.allianceRoundWeigth.push(_loc12_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc13_ = buffer.readByte();
            if (_loc13_ < 0) {
                throw new Error("Forbidden value (" + _loc13_ + ") on elements of allianceMatchScore.");
            }
            this.allianceMatchScore.push(_loc13_);
            _loc9_++;
        }
        this.allianceMapWinner = new BasicAllianceInformations();
        this.allianceMapWinner.deserialize(buffer);
        this.allianceMapWinnerScore = buffer.readVarUhInt();
        if (this.allianceMapWinnerScore < 0) {
            throw new Error("Forbidden value (" + this.allianceMapWinnerScore + ") on element of KohUpdateMessage.allianceMapWinnerScore.");
        }
        this.allianceMapMyAllianceScore = buffer.readVarUhInt();
        if (this.allianceMapMyAllianceScore < 0) {
            throw new Error("Forbidden value (" + this.allianceMapMyAllianceScore + ") on element of KohUpdateMessage.allianceMapMyAllianceScore.");
        };
        this.nextTickTime = buffer.readDouble();
        if (this.nextTickTime < 0 || this.nextTickTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.nextTickTime + ") on element of KohUpdateMessage.nextTickTime.");
        };
    }
};
module.exports.KohUpdateMessage = KohUpdateMessage;
module.exports.messages[6439] = KohUpdateMessage;

class AlmanachCalendarDateMessage extends ProtocolMessage {
    constructor(date) {
        super(6341);
        this.date = date;
    }

    serialize() {
        this.buffer.writeInt(this.date);
    }

    deserialize(buffer) {
        this.date = buffer.readInt();
    }
};
module.exports.AlmanachCalendarDateMessage = AlmanachCalendarDateMessage;
module.exports.messages[6341] = AlmanachCalendarDateMessage;

class AccountCapabilitiesMessage extends ProtocolMessage {
    constructor(accountId, tutorialAvailable, breedsVisible, breedsAvailable, status, canCreateNewCharacter) {
        super(6216);
        this.accountId = accountId;
        this.tutorialAvailable = tutorialAvailable;
        this.breedsVisible = breedsVisible;
        this.breedsAvailable = breedsAvailable;
        this.status = status;
        this.canCreateNewCharacter = canCreateNewCharacter;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.tutorialAvailable);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.canCreateNewCharacter);
        this.buffer.writeByte(_loc2_);
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        if (this.breedsVisible < 0) {
            throw new Error("Forbidden value (" + this.breedsVisible + ") on element breedsVisible.");
        }
        this.buffer.writeVarInt(this.breedsVisible);
        if (this.breedsAvailable < 0) {
            throw new Error("Forbidden value (" + this.breedsAvailable + ") on element breedsAvailable.");
        }
        this.buffer.writeVarInt(this.breedsAvailable);
        this.buffer.writeByte(this.status);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of AccountCapabilitiesMessage.accountId.");
        }
        this.breedsVisible = buffer.readVarUhInt();
        if (this.breedsVisible < 0) {
            throw new Error("Forbidden value (" + this.breedsVisible + ") on element of AccountCapabilitiesMessage.breedsVisible.");
        };
        this.breedsAvailable = buffer.readVarUhInt();
        if (this.breedsAvailable < 0) {
            throw new Error("Forbidden value (" + this.breedsAvailable + ") on element of AccountCapabilitiesMessage.breedsAvailable.");
        };
        this.status = buffer.readByte();
    }
};
module.exports.AccountCapabilitiesMessage = AccountCapabilitiesMessage;
module.exports.messages[6216] = AccountCapabilitiesMessage;

class AccountLoggingKickedMessage extends ProtocolMessage {
    constructor(days, hours, minutes) {
        super(6029);
        this.days = days;
        this.hours = hours;
        this.minutes = minutes;
    }

    serialize() {
        if (this.days < 0) {
            throw new Error("Forbidden value (" + this.days + ") on element days.");
        }
        this.buffer.writeVarShort(this.days);
        if (this.hours < 0) {
            throw new Error("Forbidden value (" + this.hours + ") on element hours.");
        }
        this.buffer.writeByte(this.hours);
        if (this.minutes < 0) {
            throw new Error("Forbidden value (" + this.minutes + ") on element minutes.");
        }
        this.buffer.writeByte(this.minutes);
    }

    deserialize(buffer) {
        this.days = buffer.readVarUhShort();
        if (this.days < 0) {
            throw new Error("Forbidden value (" + this.days + ") on element of AccountLoggingKickedMessage.days.");
        }
        this.hours = buffer.readByte();
        if (this.hours < 0) {
            throw new Error("Forbidden value (" + this.hours + ") on element of AccountLoggingKickedMessage.hours.");
        };
        this.minutes = buffer.readByte();
        if (this.minutes < 0) {
            throw new Error("Forbidden value (" + this.minutes + ") on element of AccountLoggingKickedMessage.minutes.");
        };
    }
};
module.exports.AccountLoggingKickedMessage = AccountLoggingKickedMessage;
module.exports.messages[6029] = AccountLoggingKickedMessage;

class AlreadyConnectedMessage extends ProtocolMessage {
    constructor() {
        super(109);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.AlreadyConnectedMessage = AlreadyConnectedMessage;
module.exports.messages[109] = AlreadyConnectedMessage;

class AuthenticationTicketAcceptedMessage extends ProtocolMessage {
    constructor() {
        super(111);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.AuthenticationTicketAcceptedMessage = AuthenticationTicketAcceptedMessage;
module.exports.messages[111] = AuthenticationTicketAcceptedMessage;

class AuthenticationTicketMessage extends ProtocolMessage {
    constructor(lang, ticket) {
        super(110);
        this.lang = lang;
        this.ticket = ticket;
    }

    serialize() {
        this.buffer.writeUTF(this.lang);
        this.buffer.writeUTF(this.ticket);
    }

    deserialize(buffer) {
        this.lang = buffer.readUTF();
        this.ticket = buffer.readUTF();;
    }
};
module.exports.AuthenticationTicketMessage = AuthenticationTicketMessage;
module.exports.messages[110] = AuthenticationTicketMessage;

class AuthenticationTicketRefusedMessage extends ProtocolMessage {
    constructor() {
        super(112);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.AuthenticationTicketRefusedMessage = AuthenticationTicketRefusedMessage;
module.exports.messages[112] = AuthenticationTicketRefusedMessage;

class HelloGameMessage extends ProtocolMessage {
    constructor() {
        super(101);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.HelloGameMessage = HelloGameMessage;
module.exports.messages[101] = HelloGameMessage;

class ReloginTokenRequestMessage extends ProtocolMessage {
    constructor() {
        super(6540);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ReloginTokenRequestMessage = ReloginTokenRequestMessage;
module.exports.messages[6540] = ReloginTokenRequestMessage;

class ReloginTokenStatusMessage extends ProtocolMessage {
    constructor(validToken, ticket) {
        super(6539);
        this.validToken = validToken;
        this.ticket = ticket;
    }

    serialize() {
        this.buffer.writeBoolean(this.validToken);
        this.buffer.writeVarInt(this.ticket.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ticket.length) {
            this.buffer.writeByte(this.ticket[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.validToken = buffer.readBoolean();
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.ticket.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ReloginTokenStatusMessage = ReloginTokenStatusMessage;
module.exports.messages[6539] = ReloginTokenStatusMessage;

class ServerOptionalFeaturesMessage extends ProtocolMessage {
    constructor(features) {
        super(6305);
        this.features = features;
    }

    serialize() {
        this.buffer.writeShort(this.features.length);
        var _loc2_ = 0;
        while (_loc2_ < this.features.length) {
            if (this.features[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.features[_loc2_] + ") on element 1 (starting at 1) of features.");
            }
            this.buffer.writeByte(this.features[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of features.");
            }
            this.features.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ServerOptionalFeaturesMessage = ServerOptionalFeaturesMessage;
module.exports.messages[6305] = ServerOptionalFeaturesMessage;

class ServerSessionConstantsMessage extends ProtocolMessage {
    constructor(variables) {
        super(6434);
        this.variables = variables;
    }

    serialize() {
        this.buffer.writeShort(this.variables.length);
        var _loc2_ = 0;
        while (_loc2_ < this.variables.length) {
            this.buffer.writeShort((this.variables[_loc2_]).getTypeId());
            (this.variables[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ServerSessionConstant, _loc4_);
            _loc5_.deserialize(buffer);
            this.variables.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.ServerSessionConstantsMessage = ServerSessionConstantsMessage;
module.exports.messages[6434] = ServerSessionConstantsMessage;

class ServerSettingsMessage extends ProtocolMessage {
    constructor(lang, community, gameType, arenaLeaveBanTime) {
        super(6340);
        this.lang = lang;
        this.community = community;
        this.gameType = gameType;
        this.arenaLeaveBanTime = arenaLeaveBanTime;
    }

    serialize() {
        this.buffer.writeUTF(this.lang);
        if (this.community < 0) {
            throw new Error("Forbidden value (" + this.community + ") on element community.");
        }
        this.buffer.writeByte(this.community);
        this.buffer.writeByte(this.gameType);
        if (this.arenaLeaveBanTime < 0) {
            throw new Error("Forbidden value (" + this.arenaLeaveBanTime + ") on element arenaLeaveBanTime.");
        }
        this.buffer.writeVarShort(this.arenaLeaveBanTime);
    }

    deserialize(buffer) {
        this.lang = buffer.readUTF();
        this.community = buffer.readByte();
        if (this.community < 0) {
            throw new Error("Forbidden value (" + this.community + ") on element of ServerSettingsMessage.community.");
        }
        this.gameType = buffer.readByte();;
        this.arenaLeaveBanTime = buffer.readVarUhShort();
        if (this.arenaLeaveBanTime < 0) {
            throw new Error("Forbidden value (" + this.arenaLeaveBanTime + ") on element of ServerSettingsMessage.arenaLeaveBanTime.");
        };
    }
};
module.exports.ServerSettingsMessage = ServerSettingsMessage;
module.exports.messages[6340] = ServerSettingsMessage;

class AtlasPointInformationsMessage extends ProtocolMessage {
    constructor(type) {
        super(5956);
        this.type = type;
    }

    serialize() {
        this.type.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.type = new AtlasPointsInformations();
        this.type.deserialize(buffer);
    }
};
module.exports.AtlasPointInformationsMessage = AtlasPointInformationsMessage;
module.exports.messages[5956] = AtlasPointInformationsMessage;

class CompassResetMessage extends ProtocolMessage {
    constructor(type) {
        super(5584);
        this.type = type;
    }

    serialize() {
        this.buffer.writeByte(this.type);
    }

    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of CompassResetMessage.type.");
        }
    }
};
module.exports.CompassResetMessage = CompassResetMessage;
module.exports.messages[5584] = CompassResetMessage;

class CompassUpdateMessage extends ProtocolMessage {
    constructor(type, coords) {
        super(5591);
        this.type = type;
        this.coords = coords;
    }

    serialize() {
        this.buffer.writeByte(this.type);
        this.buffer.writeShort(this.coords.getTypeId());
        this.coords.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of CompassUpdateMessage.type.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.coords = ProtocolTypeManager.getInstance(MapCoordinates, _loc2_);
        this.coords.deserialize(buffer);
    }
};
module.exports.CompassUpdateMessage = CompassUpdateMessage;
module.exports.messages[5591] = CompassUpdateMessage;

class CompassUpdatePartyMemberMessage extends CompassUpdateMessage {
    constructor(type, coords, memberId, active) {
        super(type, coords);
        this.memberId = memberId;
        this.active = active;
        this.messageId = 5589;
    }

    serialize() {
        super.serialize();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        this.buffer.writeBoolean(this.active);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element of CompassUpdatePartyMemberMessage.memberId.");
        }
        this.active = buffer.readBoolean();
    }
};
module.exports.CompassUpdatePartyMemberMessage = CompassUpdatePartyMemberMessage;
module.exports.messages[5589] = CompassUpdatePartyMemberMessage;

class CompassUpdatePvpSeekMessage extends CompassUpdateMessage {
    constructor(type, coords, memberId, memberName) {
        super(type, coords);
        this.memberId = memberId;
        this.memberName = memberName;
        this.messageId = 6013;
    }

    serialize() {
        super.serialize();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        this.buffer.writeUTF(this.memberName);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element of CompassUpdatePvpSeekMessage.memberId.");
        }
        this.memberName = buffer.readUTF();
    }
};
module.exports.CompassUpdatePvpSeekMessage = CompassUpdatePvpSeekMessage;
module.exports.messages[6013] = CompassUpdatePvpSeekMessage;

class BasicAckMessage extends ProtocolMessage {
    constructor(seq, lastPacketId) {
        super(6362);
        this.seq = seq;
        this.lastPacketId = lastPacketId;
    }

    serialize() {
        if (this.seq < 0) {
            throw new Error("Forbidden value (" + this.seq + ") on element seq.");
        }
        this.buffer.writeVarInt(this.seq);
        if (this.lastPacketId < 0) {
            throw new Error("Forbidden value (" + this.lastPacketId + ") on element lastPacketId.");
        }
        this.buffer.writeVarShort(this.lastPacketId);
    }

    deserialize(buffer) {
        this.seq = buffer.readVarUhInt();
        if (this.seq < 0) {
            throw new Error("Forbidden value (" + this.seq + ") on element of BasicAckMessage.seq.");
        }
        this.lastPacketId = buffer.readVarUhShort();
        if (this.lastPacketId < 0) {
            throw new Error("Forbidden value (" + this.lastPacketId + ") on element of BasicAckMessage.lastPacketId.");
        };
    }
};
module.exports.BasicAckMessage = BasicAckMessage;
module.exports.messages[6362] = BasicAckMessage;

class BasicDateMessage extends ProtocolMessage {
    constructor(day, month, year) {
        super(177);
        this.day = day;
        this.month = month;
        this.year = year;
    }

    serialize() {
        if (this.day < 0) {
            throw new Error("Forbidden value (" + this.day + ") on element day.");
        }
        this.buffer.writeByte(this.day);
        if (this.month < 0) {
            throw new Error("Forbidden value (" + this.month + ") on element month.");
        }
        this.buffer.writeByte(this.month);
        if (this.year < 0) {
            throw new Error("Forbidden value (" + this.year + ") on element year.");
        }
        this.buffer.writeShort(this.year);
    }

    deserialize(buffer) {
        this.day = buffer.readByte();
        if (this.day < 0) {
            throw new Error("Forbidden value (" + this.day + ") on element of BasicDateMessage.day.");
        }
        this.month = buffer.readByte();
        if (this.month < 0) {
            throw new Error("Forbidden value (" + this.month + ") on element of BasicDateMessage.month.");
        };
        this.year = buffer.readShort();
        if (this.year < 0) {
            throw new Error("Forbidden value (" + this.year + ") on element of BasicDateMessage.year.");
        };
    }
};
module.exports.BasicDateMessage = BasicDateMessage;
module.exports.messages[177] = BasicDateMessage;

class BasicLatencyStatsMessage extends ProtocolMessage {
    constructor(latency, sampleCount, max) {
        super(5663);
        this.latency = latency;
        this.sampleCount = sampleCount;
        this.max = max;
    }

    serialize() {
        if (this.latency < 0 || this.latency > 65535) {
            throw new Error("Forbidden value (" + this.latency + ") on element latency.");
        }
        this.buffer.writeShort(this.latency);
        if (this.sampleCount < 0) {
            throw new Error("Forbidden value (" + this.sampleCount + ") on element sampleCount.");
        }
        this.buffer.writeVarShort(this.sampleCount);
        if (this.max < 0) {
            throw new Error("Forbidden value (" + this.max + ") on element max.");
        }
        this.buffer.writeVarShort(this.max);
    }

    deserialize(buffer) {
        this.latency = buffer.readUnsignedShort();
        if (this.latency < 0 || this.latency > 65535) {
            throw new Error("Forbidden value (" + this.latency + ") on element of BasicLatencyStatsMessage.latency.");
        }
        this.sampleCount = buffer.readVarUhShort();
        if (this.sampleCount < 0) {
            throw new Error("Forbidden value (" + this.sampleCount + ") on element of BasicLatencyStatsMessage.sampleCount.");
        };
        this.max = buffer.readVarUhShort();
        if (this.max < 0) {
            throw new Error("Forbidden value (" + this.max + ") on element of BasicLatencyStatsMessage.max.");
        };
    }
};
module.exports.BasicLatencyStatsMessage = BasicLatencyStatsMessage;
module.exports.messages[5663] = BasicLatencyStatsMessage;

class BasicLatencyStatsRequestMessage extends ProtocolMessage {
    constructor() {
        super(5816);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.BasicLatencyStatsRequestMessage = BasicLatencyStatsRequestMessage;
module.exports.messages[5816] = BasicLatencyStatsRequestMessage;

class BasicNoOperationMessage extends ProtocolMessage {
    constructor() {
        super(176);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.BasicNoOperationMessage = BasicNoOperationMessage;
module.exports.messages[176] = BasicNoOperationMessage;

class BasicTimeMessage extends ProtocolMessage {
    constructor(timestamp, timezoneOffset) {
        super(175);
        this.timestamp = timestamp;
        this.timezoneOffset = timezoneOffset;
    }

    serialize() {
        if (this.timestamp < 0 || this.timestamp > 9007199254740990) {
            throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
        }
        this.buffer.writeDouble(this.timestamp);
        this.buffer.writeShort(this.timezoneOffset);
    }

    deserialize(buffer) {
        this.timestamp = buffer.readDouble();
        if (this.timestamp < 0 || this.timestamp > 9007199254740990) {
            throw new Error("Forbidden value (" + this.timestamp + ") on element of BasicTimeMessage.timestamp.");
        }
        this.timezoneOffset = buffer.readShort();
    }
};
module.exports.BasicTimeMessage = BasicTimeMessage;
module.exports.messages[175] = BasicTimeMessage;

class BasicWhoAmIRequestMessage extends ProtocolMessage {
    constructor(verbose) {
        super(5664);
        this.verbose = verbose;
    }

    serialize() {
        this.buffer.writeBoolean(this.verbose);
    }

    deserialize(buffer) {
        this.verbose = buffer.readBoolean();
    }
};
module.exports.BasicWhoAmIRequestMessage = BasicWhoAmIRequestMessage;
module.exports.messages[5664] = BasicWhoAmIRequestMessage;

class BasicWhoIsMessage extends ProtocolMessage {
    constructor(self, position, accountNickname, accountId, playerName, playerId, areaId, serverId, originServerId, socialGroups, verbose, playerState) {
        super(180);
        this.self = self;
        this.position = position;
        this.accountNickname = accountNickname;
        this.accountId = accountId;
        this.playerName = playerName;
        this.playerId = playerId;
        this.areaId = areaId;
        this.serverId = serverId;
        this.originServerId = originServerId;
        this.socialGroups = socialGroups;
        this.verbose = verbose;
        this.playerState = playerState;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.self);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.verbose);
        this.buffer.writeByte(_loc2_);
        this.buffer.writeByte(this.position);
        this.buffer.writeUTF(this.accountNickname);
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        this.buffer.writeUTF(this.playerName);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeShort(this.areaId);
        this.buffer.writeShort(this.serverId);
        this.buffer.writeShort(this.originServerId);
        this.buffer.writeShort(this.socialGroups.length);
        var _loc3_ = 0;
        while (_loc3_ < this.socialGroups.length) {
            this.buffer.writeShort((this.socialGroups[_loc3_]).getTypeId());
            (this.socialGroups[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
        this.buffer.writeByte(this.playerState);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.deserializeByteBoxes(buffer);
        this.position = buffer.readByte();
        this.accountNickname = buffer.readUTF();;
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of BasicWhoIsMessage.accountId.");
        }
        this.playerName = buffer.readUTF();;
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of BasicWhoIsMessage.playerId.");
        };
        this.areaId = buffer.readShort();;
        this.serverId = buffer.readShort();;
        this.originServerId = buffer.readShort();;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(AbstractSocialGroupInfos, _loc4_);
            _loc5_.deserialize(buffer);
            this.socialGroups.push(_loc5_);
            _loc3_++;
        }
        this._playerStateFunc(buffer);
    }
};
module.exports.BasicWhoIsMessage = BasicWhoIsMessage;
module.exports.messages[180] = BasicWhoIsMessage;

class BasicWhoIsNoMatchMessage extends ProtocolMessage {
    constructor(search) {
        super(179);
        this.search = search;
    }

    serialize() {
        this.buffer.writeUTF(this.search);
    }

    deserialize(buffer) {
        this.search = buffer.readUTF();
    }
};
module.exports.BasicWhoIsNoMatchMessage = BasicWhoIsNoMatchMessage;
module.exports.messages[179] = BasicWhoIsNoMatchMessage;

class BasicWhoIsRequestMessage extends ProtocolMessage {
    constructor(verbose, search) {
        super(181);
        this.verbose = verbose;
        this.search = search;
    }

    serialize() {
        this.buffer.writeBoolean(this.verbose);
        this.buffer.writeUTF(this.search);
    }

    deserialize(buffer) {
        this.verbose = buffer.readBoolean();
        this.search = buffer.readUTF();;
    }
};
module.exports.BasicWhoIsRequestMessage = BasicWhoIsRequestMessage;
module.exports.messages[181] = BasicWhoIsRequestMessage;

class CurrentServerStatusUpdateMessage extends ProtocolMessage {
    constructor(status) {
        super(6525);
        this.status = status;
    }

    serialize() {
        this.buffer.writeByte(this.status);
    }

    deserialize(buffer) {
        this.status = buffer.readByte();
        if (this.status < 0) {
            throw new Error("Forbidden value (" + this.status + ") on element of CurrentServerStatusUpdateMessage.status.");
        }
    }
};
module.exports.CurrentServerStatusUpdateMessage = CurrentServerStatusUpdateMessage;
module.exports.messages[6525] = CurrentServerStatusUpdateMessage;

class NumericWhoIsMessage extends ProtocolMessage {
    constructor(playerId, accountId) {
        super(6297);
        this.playerId = playerId;
        this.accountId = accountId;
    }

    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
    }

    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of NumericWhoIsMessage.playerId.");
        }
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of NumericWhoIsMessage.accountId.");
        };
    }
};
module.exports.NumericWhoIsMessage = NumericWhoIsMessage;
module.exports.messages[6297] = NumericWhoIsMessage;

class NumericWhoIsRequestMessage extends ProtocolMessage {
    constructor(playerId) {
        super(6298);
        this.playerId = playerId;
    }

    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of NumericWhoIsRequestMessage.playerId.");
        }
    }
};
module.exports.NumericWhoIsRequestMessage = NumericWhoIsRequestMessage;
module.exports.messages[6298] = NumericWhoIsRequestMessage;

class SequenceNumberMessage extends ProtocolMessage {
    constructor(number) {
        super(6317);
        this.number = number;
    }

    serialize() {
        if (this.number < 0 || this.number > 65535) {
            throw new Error("Forbidden value (" + this.number + ") on element number.");
        }
        this.buffer.writeShort(this.number);
    }

    deserialize(buffer) {
        this.number = buffer.readUnsignedShort();
        if (this.number < 0 || this.number > 65535) {
            throw new Error("Forbidden value (" + this.number + ") on element of SequenceNumberMessage.number.");
        }
    }
};
module.exports.SequenceNumberMessage = SequenceNumberMessage;
module.exports.messages[6317] = SequenceNumberMessage;

class SequenceNumberRequestMessage extends ProtocolMessage {
    constructor() {
        super(6316);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.SequenceNumberRequestMessage = SequenceNumberRequestMessage;
module.exports.messages[6316] = SequenceNumberRequestMessage;

class TextInformationMessage extends ProtocolMessage {
    constructor(msgType, msgId, parameters) {
        super(780);
        this.msgType = msgType;
        this.msgId = msgId;
        this.parameters = parameters;
    }

    serialize() {
        this.buffer.writeByte(this.msgType);
        if (this.msgId < 0) {
            throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
        }
        this.buffer.writeVarShort(this.msgId);
        this.buffer.writeShort(this.parameters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parameters.length) {
            this.buffer.writeUTF(this.parameters[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.msgType = buffer.readByte();
        if (this.msgType < 0) {
            throw new Error("Forbidden value (" + this.msgType + ") on element of TextInformationMessage.msgType.");
        }
        this.msgId = buffer.readVarUhShort();
        if (this.msgId < 0) {
            throw new Error("Forbidden value (" + this.msgId + ") on element of TextInformationMessage.msgId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.parameters.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.TextInformationMessage = TextInformationMessage;
module.exports.messages[780] = TextInformationMessage;

class BasicCharactersListMessage extends ProtocolMessage {
    constructor(characters) {
        super(6475);
        this.characters = characters;
    }

    serialize() {
        this.buffer.writeShort(this.characters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.characters.length) {
            this.buffer.writeShort((this.characters[_loc2_]).getTypeId());
            (this.characters[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(CharacterBaseInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.characters.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.BasicCharactersListMessage = BasicCharactersListMessage;
module.exports.messages[6475] = BasicCharactersListMessage;

class CharacterSelectionMessage extends ProtocolMessage {
    constructor(id) {
        super(152);
        this.id = id;
    }

    serialize() {
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of CharacterSelectionMessage.id.");
        }
    }
};
module.exports.CharacterSelectionMessage = CharacterSelectionMessage;
module.exports.messages[152] = CharacterSelectionMessage;

class CharacterFirstSelectionMessage extends CharacterSelectionMessage {
    constructor(id, doTutorial) {
        super(id);
        this.doTutorial = doTutorial;
        this.messageId = 6084;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.doTutorial);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.doTutorial = buffer.readBoolean();
    }
};
module.exports.CharacterFirstSelectionMessage = CharacterFirstSelectionMessage;
module.exports.messages[6084] = CharacterFirstSelectionMessage;

class CharacterReplayRequestMessage extends ProtocolMessage {
    constructor(characterId) {
        super(167);
        this.characterId = characterId;
    }

    serialize() {
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }

    deserialize(buffer) {
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element of CharacterReplayRequestMessage.characterId.");
        }
    }
};
module.exports.CharacterReplayRequestMessage = CharacterReplayRequestMessage;
module.exports.messages[167] = CharacterReplayRequestMessage;

class CharacterReplayWithRemodelRequestMessage extends CharacterReplayRequestMessage {
    constructor(characterId, remodel) {
        super(characterId);
        this.remodel = remodel;
        this.messageId = 6551;
    }

    serialize() {
        super.serialize();
        this.remodel.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.remodel = new RemodelingInformation();
        this.remodel.deserialize(buffer);
    }
};
module.exports.CharacterReplayWithRemodelRequestMessage = CharacterReplayWithRemodelRequestMessage;
module.exports.messages[6551] = CharacterReplayWithRemodelRequestMessage;

class CharacterSelectedErrorMessage extends ProtocolMessage {
    constructor() {
        super(5836);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.CharacterSelectedErrorMessage = CharacterSelectedErrorMessage;
module.exports.messages[5836] = CharacterSelectedErrorMessage;

class CharacterSelectedForceMessage extends ProtocolMessage {
    constructor(id) {
        super(6068);
        this.id = id;
    }

    serialize() {
        if (this.id < 1 || this.id > 2147483647) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeInt(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readInt();
        if (this.id < 1 || this.id > 2147483647) {
            throw new Error("Forbidden value (" + this.id + ") on element of CharacterSelectedForceMessage.id.");
        }
    }
};
module.exports.CharacterSelectedForceMessage = CharacterSelectedForceMessage;
module.exports.messages[6068] = CharacterSelectedForceMessage;

class CharacterSelectedForceReadyMessage extends ProtocolMessage {
    constructor() {
        super(6072);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.CharacterSelectedForceReadyMessage = CharacterSelectedForceReadyMessage;
module.exports.messages[6072] = CharacterSelectedForceReadyMessage;

class CharacterSelectedSuccessMessage extends ProtocolMessage {
    constructor(infos, isCollectingStats) {
        super(153);
        this.infos = infos;
        this.isCollectingStats = isCollectingStats;
    }

    serialize() {
        this.infos.serialize(this.buffer);
        this.buffer.writeBoolean(this.isCollectingStats);
    }

    deserialize(buffer) {
        this.infos = new CharacterBaseInformations();
        this.infos.deserialize(buffer);
        this.isCollectingStats = buffer.readBoolean();
    }
};
module.exports.CharacterSelectedSuccessMessage = CharacterSelectedSuccessMessage;
module.exports.messages[153] = CharacterSelectedSuccessMessage;

class CharacterSelectionWithRemodelMessage extends CharacterSelectionMessage {
    constructor(id, remodel) {
        super(id);
        this.remodel = remodel;
        this.messageId = 6549;
    }

    serialize() {
        super.serialize();
        this.remodel.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.remodel = new RemodelingInformation();
        this.remodel.deserialize(buffer);
    }
};
module.exports.CharacterSelectionWithRemodelMessage = CharacterSelectionWithRemodelMessage;
module.exports.messages[6549] = CharacterSelectionWithRemodelMessage;

class CharactersListErrorMessage extends ProtocolMessage {
    constructor() {
        super(5545);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.CharactersListErrorMessage = CharactersListErrorMessage;
module.exports.messages[5545] = CharactersListErrorMessage;

class CharactersListMessage extends BasicCharactersListMessage {
    constructor(characters, hasStartupActions) {
        super(characters);
        this.hasStartupActions = hasStartupActions;
        this.messageId = 151;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.hasStartupActions);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.hasStartupActions = buffer.readBoolean();
    }
};
module.exports.CharactersListMessage = CharactersListMessage;
module.exports.messages[151] = CharactersListMessage;

class CharactersListRequestMessage extends ProtocolMessage {
    constructor() {
        super(150);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.CharactersListRequestMessage = CharactersListRequestMessage;
module.exports.messages[150] = CharactersListRequestMessage;

class CharactersListWithModificationsMessage extends CharactersListMessage {
    constructor(characters, hasStartupActions, charactersToRecolor, charactersToRename, unusableCharacters, charactersToRelook) {
        super(characters, hasStartupActions);
        this.charactersToRecolor = charactersToRecolor;
        this.charactersToRename = charactersToRename;
        this.unusableCharacters = unusableCharacters;
        this.charactersToRelook = charactersToRelook;
        this.messageId = 6120;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.charactersToRecolor.length);
        var _loc2_ = 0;
        while (_loc2_ < this.charactersToRecolor.length) {
            (this.charactersToRecolor[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.charactersToRename.length);
        var _loc3_ = 0;
        while (_loc3_ < this.charactersToRename.length) {
            this.buffer.writeInt(this.charactersToRename[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.unusableCharacters.length);
        var _loc4_ = 0;
        while (_loc4_ < this.unusableCharacters.length) {
            this.buffer.writeInt(this.unusableCharacters[_loc4_]);
            _loc4_++;
        }
        this.buffer.writeShort(this.charactersToRelook.length);
        var _loc5_ = 0;
        while (_loc5_ < this.charactersToRelook.length) {
            (this.charactersToRelook[_loc5_]).serialize(this.buffer);
            _loc5_++;
        }
    }

    deserialize(buffer) {
        var _loc10_ = null;
        var _loc11_ = 0;
        var _loc12_ = 0;
        var _loc13_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc10_ = new CharacterToRecolorInformation();
            _loc10_.deserialize(buffer);
            this.charactersToRecolor.push(_loc10_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc11_ = buffer.readInt();
            this.charactersToRename.push(_loc11_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc12_ = buffer.readInt();
            this.unusableCharacters.push(_loc12_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc13_ = new CharacterToRelookInformation();
            _loc13_.deserialize(buffer);
            this.charactersToRelook.push(_loc13_);
            _loc9_++;
        }
    }
};
module.exports.CharactersListWithModificationsMessage = CharactersListWithModificationsMessage;
module.exports.messages[6120] = CharactersListWithModificationsMessage;

class CharactersListWithRemodelingMessage extends CharactersListMessage {
    constructor(characters, hasStartupActions, charactersToRemodel) {
        super(characters, hasStartupActions);
        this.charactersToRemodel = charactersToRemodel;
        this.messageId = 6550;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.charactersToRemodel.length);
        var _loc2_ = 0;
        while (_loc2_ < this.charactersToRemodel.length) {
            (this.charactersToRemodel[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new CharacterToRemodelInformations();
            _loc4_.deserialize(buffer);
            this.charactersToRemodel.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.CharactersListWithRemodelingMessage = CharactersListWithRemodelingMessage;
module.exports.messages[6550] = CharactersListWithRemodelingMessage;

class CharacterCanBeCreatedResultMessage extends ProtocolMessage {
    constructor(yesYouCan) {
        super(6733);
        this.yesYouCan = yesYouCan;
    }

    serialize() {
        this.buffer.writeBoolean(this.yesYouCan);
    }

    deserialize(buffer) {
        this.yesYouCan = buffer.readBoolean();
    }
};
module.exports.CharacterCanBeCreatedResultMessage = CharacterCanBeCreatedResultMessage;
module.exports.messages[6733] = CharacterCanBeCreatedResultMessage;

class CharacterCreationRequestMessage extends ProtocolMessage {
    constructor(name, breed, sex, colors, cosmeticId) {
        super(160);
        this.name = name;
        this.breed = breed;
        this.sex = sex;
        this.colors = colors;
        this.cosmeticId = cosmeticId;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
        this.buffer.writeByte(this.breed);
        this.buffer.writeBoolean(this.sex);
        var _loc2_ = 0;
        while (_loc2_ < 5) {
            this.buffer.writeInt(this.colors[_loc2_]);
            _loc2_++;
        }
        if (this.cosmeticId < 0) {
            throw new Error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
        }
        this.buffer.writeVarShort(this.cosmeticId);
    }

    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.breed = buffer.readByte();
        if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
            throw new Error("Forbidden value (" + this.breed + ") on element of CharacterCreationRequestMessage.breed.");
        }
        this.sex = buffer.readBoolean();;
        var _loc2_ = 0;
        while (_loc2_ < 5) {
            this.colors[_loc2_] = buffer.readInt();
            _loc2_++;
        }
        this._cosmeticIdFunc(buffer);
    }
};
module.exports.CharacterCreationRequestMessage = CharacterCreationRequestMessage;
module.exports.messages[160] = CharacterCreationRequestMessage;

class CharacterCreationResultMessage extends ProtocolMessage {
    constructor(result) {
        super(161);
        this.result = result;
    }

    serialize() {
        this.buffer.writeByte(this.result);
    }

    deserialize(buffer) {
        this.result = buffer.readByte();
        if (this.result < 0) {
            throw new Error("Forbidden value (" + this.result + ") on element of CharacterCreationResultMessage.result.");
        }
    }
};
module.exports.CharacterCreationResultMessage = CharacterCreationResultMessage;
module.exports.messages[161] = CharacterCreationResultMessage;

class CharacterNameSuggestionFailureMessage extends ProtocolMessage {
    constructor(reason) {
        super(164);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of CharacterNameSuggestionFailureMessage.reason.");
        }
    }
};
module.exports.CharacterNameSuggestionFailureMessage = CharacterNameSuggestionFailureMessage;
module.exports.messages[164] = CharacterNameSuggestionFailureMessage;

class CharacterNameSuggestionRequestMessage extends ProtocolMessage {
    constructor() {
        super(162);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.CharacterNameSuggestionRequestMessage = CharacterNameSuggestionRequestMessage;
module.exports.messages[162] = CharacterNameSuggestionRequestMessage;

class CharacterNameSuggestionSuccessMessage extends ProtocolMessage {
    constructor(suggestion) {
        super(5544);
        this.suggestion = suggestion;
    }

    serialize() {
        this.buffer.writeUTF(this.suggestion);
    }

    deserialize(buffer) {
        this.suggestion = buffer.readUTF();
    }
};
module.exports.CharacterNameSuggestionSuccessMessage = CharacterNameSuggestionSuccessMessage;
module.exports.messages[5544] = CharacterNameSuggestionSuccessMessage;

class CharacterDeletionErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(166);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of CharacterDeletionErrorMessage.reason.");
        }
    }
};
module.exports.CharacterDeletionErrorMessage = CharacterDeletionErrorMessage;
module.exports.messages[166] = CharacterDeletionErrorMessage;

class CharacterDeletionRequestMessage extends ProtocolMessage {
    constructor(characterId, secretAnswerHash) {
        super(165);
        this.characterId = characterId;
        this.secretAnswerHash = secretAnswerHash;
    }

    serialize() {
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
        this.buffer.writeUTF(this.secretAnswerHash);
    }

    deserialize(buffer) {
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element of CharacterDeletionRequestMessage.characterId.");
        }
        this.secretAnswerHash = buffer.readUTF();
    }
};
module.exports.CharacterDeletionRequestMessage = CharacterDeletionRequestMessage;
module.exports.messages[165] = CharacterDeletionRequestMessage;

class CharacterExperienceGainMessage extends ProtocolMessage {
    constructor(experienceCharacter, experienceMount, experienceGuild, experienceIncarnation) {
        super(6321);
        this.experienceCharacter = experienceCharacter;
        this.experienceMount = experienceMount;
        this.experienceGuild = experienceGuild;
        this.experienceIncarnation = experienceIncarnation;
    }

    serialize() {
        if (this.experienceCharacter < 0 || this.experienceCharacter > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceCharacter + ") on element experienceCharacter.");
        }
        this.buffer.writeVarLong(this.experienceCharacter);
        if (this.experienceMount < 0 || this.experienceMount > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceMount + ") on element experienceMount.");
        }
        this.buffer.writeVarLong(this.experienceMount);
        if (this.experienceGuild < 0 || this.experienceGuild > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceGuild + ") on element experienceGuild.");
        }
        this.buffer.writeVarLong(this.experienceGuild);
        if (this.experienceIncarnation < 0 || this.experienceIncarnation > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceIncarnation + ") on element experienceIncarnation.");
        }
        this.buffer.writeVarLong(this.experienceIncarnation);
    }

    deserialize(buffer) {
        this.experienceCharacter = buffer.readVarUhLong();
        if (this.experienceCharacter < 0 || this.experienceCharacter > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceCharacter + ") on element of CharacterExperienceGainMessage.experienceCharacter.");
        }
        this.experienceMount = buffer.readVarUhLong();
        if (this.experienceMount < 0 || this.experienceMount > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceMount + ") on element of CharacterExperienceGainMessage.experienceMount.");
        };
        this.experienceGuild = buffer.readVarUhLong();
        if (this.experienceGuild < 0 || this.experienceGuild > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceGuild + ") on element of CharacterExperienceGainMessage.experienceGuild.");
        };
        this.experienceIncarnation = buffer.readVarUhLong();
        if (this.experienceIncarnation < 0 || this.experienceIncarnation > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experienceIncarnation + ") on element of CharacterExperienceGainMessage.experienceIncarnation.");
        };
    }
};
module.exports.CharacterExperienceGainMessage = CharacterExperienceGainMessage;
module.exports.messages[6321] = CharacterExperienceGainMessage;

class CharacterLevelUpMessage extends ProtocolMessage {
    constructor(newLevel) {
        super(5670);
        this.newLevel = newLevel;
    }

    serialize() {
        if (this.newLevel < 2 || this.newLevel > 206) {
            throw new Error("Forbidden value (" + this.newLevel + ") on element newLevel.");
        }
        this.buffer.writeByte(this.newLevel);
    }

    deserialize(buffer) {
        this.newLevel = buffer.readUnsignedByte();
        if (this.newLevel < 2 || this.newLevel > 206) {
            throw new Error("Forbidden value (" + this.newLevel + ") on element of CharacterLevelUpMessage.newLevel.");
        }
    }
};
module.exports.CharacterLevelUpMessage = CharacterLevelUpMessage;
module.exports.messages[5670] = CharacterLevelUpMessage;

class CharacterLevelUpInformationMessage extends CharacterLevelUpMessage {
    constructor(newLevel, name, id) {
        super(newLevel);
        this.name = name;
        this.id = id;
        this.messageId = 6076;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.name);
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of CharacterLevelUpInformationMessage.id.");
        }
    }
};
module.exports.CharacterLevelUpInformationMessage = CharacterLevelUpInformationMessage;
module.exports.messages[6076] = CharacterLevelUpInformationMessage;

class CharacterStatsListMessage extends ProtocolMessage {
    constructor(stats) {
        super(500);
        this.stats = stats;
    }

    serialize() {
        this.stats.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.stats = new CharacterCharacteristicsInformations();
        this.stats.deserialize(buffer);
    }
};
module.exports.CharacterStatsListMessage = CharacterStatsListMessage;
module.exports.messages[500] = CharacterStatsListMessage;

class FighterStatsListMessage extends ProtocolMessage {
    constructor(stats) {
        super(6322);
        this.stats = stats;
    }

    serialize() {
        this.stats.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.stats = new CharacterCharacteristicsInformations();
        this.stats.deserialize(buffer);
    }
};
module.exports.FighterStatsListMessage = FighterStatsListMessage;
module.exports.messages[6322] = FighterStatsListMessage;

class LifePointsRegenBeginMessage extends ProtocolMessage {
    constructor(regenRate) {
        super(5684);
        this.regenRate = regenRate;
    }

    serialize() {
        if (this.regenRate < 0 || this.regenRate > 255) {
            throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
        }
        this.buffer.writeByte(this.regenRate);
    }

    deserialize(buffer) {
        this.regenRate = buffer.readUnsignedByte();
        if (this.regenRate < 0 || this.regenRate > 255) {
            throw new Error("Forbidden value (" + this.regenRate + ") on element of LifePointsRegenBeginMessage.regenRate.");
        }
    }
};
module.exports.LifePointsRegenBeginMessage = LifePointsRegenBeginMessage;
module.exports.messages[5684] = LifePointsRegenBeginMessage;

class UpdateLifePointsMessage extends ProtocolMessage {
    constructor(lifePoints, maxLifePoints) {
        super(5658);
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
    }

    serialize() {
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        this.buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        this.buffer.writeVarInt(this.maxLifePoints);
    }

    deserialize(buffer) {
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element of UpdateLifePointsMessage.lifePoints.");
        }
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of UpdateLifePointsMessage.maxLifePoints.");
        };
    }
};
module.exports.UpdateLifePointsMessage = UpdateLifePointsMessage;
module.exports.messages[5658] = UpdateLifePointsMessage;

class LifePointsRegenEndMessage extends UpdateLifePointsMessage {
    constructor(lifePoints, maxLifePoints, lifePointsGained) {
        super(lifePoints, maxLifePoints);
        this.lifePointsGained = lifePointsGained;
        this.messageId = 5686;
    }

    serialize() {
        super.serialize();
        if (this.lifePointsGained < 0) {
            throw new Error("Forbidden value (" + this.lifePointsGained + ") on element lifePointsGained.");
        }
        this.buffer.writeVarInt(this.lifePointsGained);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.lifePointsGained = buffer.readVarUhInt();
        if (this.lifePointsGained < 0) {
            throw new Error("Forbidden value (" + this.lifePointsGained + ") on element of LifePointsRegenEndMessage.lifePointsGained.");
        }
    }
};
module.exports.LifePointsRegenEndMessage = LifePointsRegenEndMessage;
module.exports.messages[5686] = LifePointsRegenEndMessage;

class PlayerStatusUpdateErrorMessage extends ProtocolMessage {
    constructor() {
        super(6385);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.PlayerStatusUpdateErrorMessage = PlayerStatusUpdateErrorMessage;
module.exports.messages[6385] = PlayerStatusUpdateErrorMessage;

class PlayerStatusUpdateMessage extends ProtocolMessage {
    constructor(accountId, playerId, status) {
        super(6386);
        this.accountId = accountId;
        this.playerId = playerId;
        this.status = status;
    }

    serialize() {
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeShort(this.status.getTypeId());
        this.status.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of PlayerStatusUpdateMessage.accountId.");
        }
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of PlayerStatusUpdateMessage.playerId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
    }
};
module.exports.PlayerStatusUpdateMessage = PlayerStatusUpdateMessage;
module.exports.messages[6386] = PlayerStatusUpdateMessage;

class PlayerStatusUpdateRequestMessage extends ProtocolMessage {
    constructor(status) {
        super(6387);
        this.status = status;
    }

    serialize() {
        this.buffer.writeShort(this.status.getTypeId());
        this.status.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
    }
};
module.exports.PlayerStatusUpdateRequestMessage = PlayerStatusUpdateRequestMessage;
module.exports.messages[6387] = PlayerStatusUpdateRequestMessage;

class ChannelEnablingChangeMessage extends ProtocolMessage {
    constructor(channel, enable) {
        super(891);
        this.channel = channel;
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeByte(this.channel);
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.channel = buffer.readByte();
        if (this.channel < 0) {
            throw new Error("Forbidden value (" + this.channel + ") on element of ChannelEnablingChangeMessage.channel.");
        }
        this.enable = buffer.readBoolean();
    }
};
module.exports.ChannelEnablingChangeMessage = ChannelEnablingChangeMessage;
module.exports.messages[891] = ChannelEnablingChangeMessage;

class ChannelEnablingMessage extends ProtocolMessage {
    constructor(channel, enable) {
        super(890);
        this.channel = channel;
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeByte(this.channel);
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.channel = buffer.readByte();
        if (this.channel < 0) {
            throw new Error("Forbidden value (" + this.channel + ") on element of ChannelEnablingMessage.channel.");
        }
        this.enable = buffer.readBoolean();
    }
};
module.exports.ChannelEnablingMessage = ChannelEnablingMessage;
module.exports.messages[890] = ChannelEnablingMessage;

class EnabledChannelsMessage extends ProtocolMessage {
    constructor(channels, disallowed) {
        super(892);
        this.channels = channels;
        this.disallowed = disallowed;
    }

    serialize() {
        this.buffer.writeShort(this.channels.length);
        var _loc2_ = 0;
        while (_loc2_ < this.channels.length) {
            this.buffer.writeByte(this.channels[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.disallowed.length);
        var _loc3_ = 0;
        while (_loc3_ < this.disallowed.length) {
            this.buffer.writeByte(this.disallowed[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readByte();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of channels.");
            }
            this.channels.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readByte();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of disallowed.");
            }
            this.disallowed.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.EnabledChannelsMessage = EnabledChannelsMessage;
module.exports.messages[892] = EnabledChannelsMessage;

class ChatAbstractClientMessage extends ProtocolMessage {
    constructor(content) {
        super(850);
        this.content = content;
    }

    serialize() {
        this.buffer.writeUTF(this.content);
    }

    deserialize(buffer) {
        this.content = buffer.readUTF();
    }
};
module.exports.ChatAbstractClientMessage = ChatAbstractClientMessage;
module.exports.messages[850] = ChatAbstractClientMessage;

class ChatAbstractServerMessage extends ProtocolMessage {
    constructor(channel, content, timestamp, fingerprint) {
        super(880);
        this.channel = channel;
        this.content = content;
        this.timestamp = timestamp;
        this.fingerprint = fingerprint;
    }

    serialize() {
        this.buffer.writeByte(this.channel);
        this.buffer.writeUTF(this.content);
        if (this.timestamp < 0) {
            throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
        }
        this.buffer.writeInt(this.timestamp);
        this.buffer.writeUTF(this.fingerprint);
    }

    deserialize(buffer) {
        this.channel = buffer.readByte();
        if (this.channel < 0) {
            throw new Error("Forbidden value (" + this.channel + ") on element of ChatAbstractServerMessage.channel.");
        }
        this.content = buffer.readUTF();
        this.timestamp = buffer.readInt();
        if (this.timestamp < 0) {
            throw new Error("Forbidden value (" + this.timestamp + ") on element of ChatAbstractServerMessage.timestamp.");
        };
        this.fingerprint = buffer.readUTF();;
    }
};
module.exports.ChatAbstractServerMessage = ChatAbstractServerMessage;
module.exports.messages[880] = ChatAbstractServerMessage;

class ChatServerMessage extends ChatAbstractServerMessage {
    constructor(channel, content, timestamp, fingerprint, senderId, senderName, senderAccountId) {
        super(channel, content, timestamp, fingerprint);
        this.senderId = senderId;
        this.senderName = senderName;
        this.senderAccountId = senderAccountId;
        this.messageId = 881;
    }

    serialize() {
        super.serialize();
        if (this.senderId < -9007199254740990 || this.senderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.senderId + ") on element senderId.");
        }
        this.buffer.writeDouble(this.senderId);
        this.buffer.writeUTF(this.senderName);
        if (this.senderAccountId < 0) {
            throw new Error("Forbidden value (" + this.senderAccountId + ") on element senderAccountId.");
        }
        this.buffer.writeInt(this.senderAccountId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.senderId = buffer.readDouble();
        if (this.senderId < -9007199254740990 || this.senderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.senderId + ") on element of ChatServerMessage.senderId.");
        }
        this.senderName = buffer.readUTF();
        this.senderAccountId = buffer.readInt();
        if (this.senderAccountId < 0) {
            throw new Error("Forbidden value (" + this.senderAccountId + ") on element of ChatServerMessage.senderAccountId.");
        };
    }
};
module.exports.ChatServerMessage = ChatServerMessage;
module.exports.messages[881] = ChatServerMessage;

class ChatAdminServerMessage extends ChatServerMessage {
    constructor(channel, content, timestamp, fingerprint, senderId, senderName, senderAccountId) {
        super(channel, content, timestamp, fingerprint, senderId, senderName, senderAccountId);
        this.messageId = 6135;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.ChatAdminServerMessage = ChatAdminServerMessage;
module.exports.messages[6135] = ChatAdminServerMessage;

class ChatClientMultiMessage extends ChatAbstractClientMessage {
    constructor(content, channel) {
        super(content);
        this.channel = channel;
        this.messageId = 861;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.channel);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.channel = buffer.readByte();
        if (this.channel < 0) {
            throw new Error("Forbidden value (" + this.channel + ") on element of ChatClientMultiMessage.channel.");
        }
    }
};
module.exports.ChatClientMultiMessage = ChatClientMultiMessage;
module.exports.messages[861] = ChatClientMultiMessage;

class ChatClientMultiWithObjectMessage extends ChatClientMultiMessage {
    constructor(content, channel, objects) {
        super(content, channel);
        this.objects = objects;
        this.messageId = 862;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            (this.objects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ChatClientMultiWithObjectMessage = ChatClientMultiWithObjectMessage;
module.exports.messages[862] = ChatClientMultiWithObjectMessage;

class ChatClientPrivateMessage extends ChatAbstractClientMessage {
    constructor(content, receiver) {
        super(content);
        this.receiver = receiver;
        this.messageId = 851;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.receiver);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.receiver = buffer.readUTF();
    }
};
module.exports.ChatClientPrivateMessage = ChatClientPrivateMessage;
module.exports.messages[851] = ChatClientPrivateMessage;

class ChatClientPrivateWithObjectMessage extends ChatClientPrivateMessage {
    constructor(content, receiver, objects) {
        super(content, receiver);
        this.objects = objects;
        this.messageId = 852;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            (this.objects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ChatClientPrivateWithObjectMessage = ChatClientPrivateWithObjectMessage;
module.exports.messages[852] = ChatClientPrivateWithObjectMessage;

class ChatErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(870);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of ChatErrorMessage.reason.");
        }
    }
};
module.exports.ChatErrorMessage = ChatErrorMessage;
module.exports.messages[870] = ChatErrorMessage;

class ChatServerCopyMessage extends ChatAbstractServerMessage {
    constructor(channel, content, timestamp, fingerprint, receiverId, receiverName) {
        super(channel, content, timestamp, fingerprint);
        this.receiverId = receiverId;
        this.receiverName = receiverName;
        this.messageId = 882;
    }

    serialize() {
        super.serialize();
        if (this.receiverId < 0 || this.receiverId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.receiverId + ") on element receiverId.");
        }
        this.buffer.writeVarLong(this.receiverId);
        this.buffer.writeUTF(this.receiverName);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.receiverId = buffer.readVarUhLong();
        if (this.receiverId < 0 || this.receiverId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.receiverId + ") on element of ChatServerCopyMessage.receiverId.");
        }
        this.receiverName = buffer.readUTF();
    }
};
module.exports.ChatServerCopyMessage = ChatServerCopyMessage;
module.exports.messages[882] = ChatServerCopyMessage;

class ChatServerCopyWithObjectMessage extends ChatServerCopyMessage {
    constructor(channel, content, timestamp, fingerprint, receiverId, receiverName, objects) {
        super(channel, content, timestamp, fingerprint, receiverId, receiverName);
        this.objects = objects;
        this.messageId = 884;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            (this.objects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ChatServerCopyWithObjectMessage = ChatServerCopyWithObjectMessage;
module.exports.messages[884] = ChatServerCopyWithObjectMessage;

class ChatServerWithObjectMessage extends ChatServerMessage {
    constructor(channel, content, timestamp, fingerprint, senderId, senderName, senderAccountId, objects) {
        super(channel, content, timestamp, fingerprint, senderId, senderName, senderAccountId);
        this.objects = objects;
        this.messageId = 883;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            (this.objects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ChatServerWithObjectMessage = ChatServerWithObjectMessage;
module.exports.messages[883] = ChatServerWithObjectMessage;

class ChatCommunityChannelCommunityMessage extends ProtocolMessage {
    constructor(communityId) {
        super(6730);
        this.communityId = communityId;
    }

    serialize() {
        this.buffer.writeShort(this.communityId);
    }

    deserialize(buffer) {
        this.communityId = buffer.readShort();
    }
};
module.exports.ChatCommunityChannelCommunityMessage = ChatCommunityChannelCommunityMessage;
module.exports.messages[6730] = ChatCommunityChannelCommunityMessage;

class ChatCommunityChannelSetCommunityRequestMessage extends ProtocolMessage {
    constructor(communityId) {
        super(6729);
        this.communityId = communityId;
    }

    serialize() {
        this.buffer.writeShort(this.communityId);
    }

    deserialize(buffer) {
        this.communityId = buffer.readShort();
    }
};
module.exports.ChatCommunityChannelSetCommunityRequestMessage = ChatCommunityChannelSetCommunityRequestMessage;
module.exports.messages[6729] = ChatCommunityChannelSetCommunityRequestMessage;

class ChatMessageReportMessage extends ProtocolMessage {
    constructor(senderName, content, timestamp, channel, fingerprint, reason) {
        super(821);
        this.senderName = senderName;
        this.content = content;
        this.timestamp = timestamp;
        this.channel = channel;
        this.fingerprint = fingerprint;
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeUTF(this.senderName);
        this.buffer.writeUTF(this.content);
        if (this.timestamp < 0) {
            throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
        }
        this.buffer.writeInt(this.timestamp);
        this.buffer.writeByte(this.channel);
        this.buffer.writeUTF(this.fingerprint);
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element reason.");
        }
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.senderName = buffer.readUTF();
        this.content = buffer.readUTF();;
        this.timestamp = buffer.readInt();
        if (this.timestamp < 0) {
            throw new Error("Forbidden value (" + this.timestamp + ") on element of ChatMessageReportMessage.timestamp.");
        }
        this.channel = buffer.readByte();
        if (this.channel < 0) {
            throw new Error("Forbidden value (" + this.channel + ") on element of ChatMessageReportMessage.channel.");
        };
        this.fingerprint = buffer.readUTF();;
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of ChatMessageReportMessage.reason.");
        };
    }
};
module.exports.ChatMessageReportMessage = ChatMessageReportMessage;
module.exports.messages[821] = ChatMessageReportMessage;

class ChatSmileyExtraPackListMessage extends ProtocolMessage {
    constructor(packIds) {
        super(6596);
        this.packIds = packIds;
    }

    serialize() {
        this.buffer.writeShort(this.packIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.packIds.length) {
            if (this.packIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.packIds[_loc2_] + ") on element 1 (starting at 1) of packIds.");
            }
            this.buffer.writeByte(this.packIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of packIds.");
            }
            this.packIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ChatSmileyExtraPackListMessage = ChatSmileyExtraPackListMessage;
module.exports.messages[6596] = ChatSmileyExtraPackListMessage;

class ChatSmileyMessage extends ProtocolMessage {
    constructor(entityId, smileyId, accountId) {
        super(801);
        this.entityId = entityId;
        this.smileyId = smileyId;
        this.accountId = accountId;
    }

    serialize() {
        if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.entityId + ") on element entityId.");
        }
        this.buffer.writeDouble(this.entityId);
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
    }

    deserialize(buffer) {
        this.entityId = buffer.readDouble();
        if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.entityId + ") on element of ChatSmileyMessage.entityId.");
        }
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element of ChatSmileyMessage.smileyId.");
        };
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of ChatSmileyMessage.accountId.");
        };
    }
};
module.exports.ChatSmileyMessage = ChatSmileyMessage;
module.exports.messages[801] = ChatSmileyMessage;

class ChatSmileyRequestMessage extends ProtocolMessage {
    constructor(smileyId) {
        super(800);
        this.smileyId = smileyId;
    }

    serialize() {
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
    }

    deserialize(buffer) {
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element of ChatSmileyRequestMessage.smileyId.");
        }
    }
};
module.exports.ChatSmileyRequestMessage = ChatSmileyRequestMessage;
module.exports.messages[800] = ChatSmileyRequestMessage;

class LocalizedChatSmileyMessage extends ChatSmileyMessage {
    constructor(entityId, smileyId, accountId, cellId) {
        super(entityId, smileyId, accountId);
        this.cellId = cellId;
        this.messageId = 6185;
    }

    serialize() {
        super.serialize();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of LocalizedChatSmileyMessage.cellId.");
        }
    }
};
module.exports.LocalizedChatSmileyMessage = LocalizedChatSmileyMessage;
module.exports.messages[6185] = LocalizedChatSmileyMessage;

class MoodSmileyRequestMessage extends ProtocolMessage {
    constructor(smileyId) {
        super(6192);
        this.smileyId = smileyId;
    }

    serialize() {
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
    }

    deserialize(buffer) {
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyRequestMessage.smileyId.");
        }
    }
};
module.exports.MoodSmileyRequestMessage = MoodSmileyRequestMessage;
module.exports.messages[6192] = MoodSmileyRequestMessage;

class MoodSmileyResultMessage extends ProtocolMessage {
    constructor(resultCode, smileyId) {
        super(6196);
        this.resultCode = resultCode;
        this.smileyId = smileyId;
    }

    serialize() {
        this.buffer.writeByte(this.resultCode);
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
    }

    deserialize(buffer) {
        this.resultCode = buffer.readByte();
        if (this.resultCode < 0) {
            throw new Error("Forbidden value (" + this.resultCode + ") on element of MoodSmileyResultMessage.resultCode.");
        }
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyResultMessage.smileyId.");
        };
    }
};
module.exports.MoodSmileyResultMessage = MoodSmileyResultMessage;
module.exports.messages[6196] = MoodSmileyResultMessage;

class MoodSmileyUpdateMessage extends ProtocolMessage {
    constructor(accountId, playerId, smileyId) {
        super(6388);
        this.accountId = accountId;
        this.playerId = playerId;
        this.smileyId = smileyId;
    }

    serialize() {
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
    }

    deserialize(buffer) {
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of MoodSmileyUpdateMessage.accountId.");
        }
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of MoodSmileyUpdateMessage.playerId.");
        };
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            throw new Error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyUpdateMessage.smileyId.");
        };
    }
};
module.exports.MoodSmileyUpdateMessage = MoodSmileyUpdateMessage;
module.exports.messages[6388] = MoodSmileyUpdateMessage;

class DisplayNumericalValuePaddockMessage extends ProtocolMessage {
    constructor(rideId, value, type) {
        super(6563);
        this.rideId = rideId;
        this.value = value;
        this.type = type;
    }

    serialize() {
        this.buffer.writeInt(this.rideId);
        this.buffer.writeInt(this.value);
        this.buffer.writeByte(this.type);
    }

    deserialize(buffer) {
        this.rideId = buffer.readInt();
        this.value = buffer.readInt();;
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of DisplayNumericalValuePaddockMessage.type.");
        }
    }
};
module.exports.DisplayNumericalValuePaddockMessage = DisplayNumericalValuePaddockMessage;
module.exports.messages[6563] = DisplayNumericalValuePaddockMessage;

class DungeonKeyRingMessage extends ProtocolMessage {
    constructor(availables, unavailables) {
        super(6299);
        this.availables = availables;
        this.unavailables = unavailables;
    }

    serialize() {
        this.buffer.writeShort(this.availables.length);
        var _loc2_ = 0;
        while (_loc2_ < this.availables.length) {
            if (this.availables[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.availables[_loc2_] + ") on element 1 (starting at 1) of availables.");
            }
            this.buffer.writeVarShort(this.availables[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.unavailables.length);
        var _loc3_ = 0;
        while (_loc3_ < this.unavailables.length) {
            if (this.unavailables[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.unavailables[_loc3_] + ") on element 2 (starting at 1) of unavailables.");
            }
            this.buffer.writeVarShort(this.unavailables[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of availables.");
            }
            this.availables.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of unavailables.");
            }
            this.unavailables.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.DungeonKeyRingMessage = DungeonKeyRingMessage;
module.exports.messages[6299] = DungeonKeyRingMessage;

class DungeonKeyRingUpdateMessage extends ProtocolMessage {
    constructor(dungeonId, available) {
        super(6296);
        this.dungeonId = dungeonId;
        this.available = available;
    }

    serialize() {
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        this.buffer.writeBoolean(this.available);
    }

    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonKeyRingUpdateMessage.dungeonId.");
        }
        this.available = buffer.readBoolean();
    }
};
module.exports.DungeonKeyRingUpdateMessage = DungeonKeyRingUpdateMessage;
module.exports.messages[6296] = DungeonKeyRingUpdateMessage;

class ArenaFighterLeaveMessage extends ProtocolMessage {
    constructor(leaver) {
        super(6700);
        this.leaver = leaver;
    }

    serialize() {
        this.leaver.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.leaver = new CharacterBasicMinimalInformations();
        this.leaver.deserialize(buffer);
    }
};
module.exports.ArenaFighterLeaveMessage = ArenaFighterLeaveMessage;
module.exports.messages[6700] = ArenaFighterLeaveMessage;

class ChallengeInfoMessage extends ProtocolMessage {
    constructor(challengeId, targetId, xpBonus, dropBonus) {
        super(6022);
        this.challengeId = challengeId;
        this.targetId = targetId;
        this.xpBonus = xpBonus;
        this.dropBonus = dropBonus;
    }

    serialize() {
        if (this.challengeId < 0) {
            throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
        }
        this.buffer.writeVarShort(this.challengeId);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.xpBonus < 0) {
            throw new Error("Forbidden value (" + this.xpBonus + ") on element xpBonus.");
        }
        this.buffer.writeVarInt(this.xpBonus);
        if (this.dropBonus < 0) {
            throw new Error("Forbidden value (" + this.dropBonus + ") on element dropBonus.");
        }
        this.buffer.writeVarInt(this.dropBonus);
    }

    deserialize(buffer) {
        this.challengeId = buffer.readVarUhShort();
        if (this.challengeId < 0) {
            throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeInfoMessage.challengeId.");
        }
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of ChallengeInfoMessage.targetId.");
        };
        this.xpBonus = buffer.readVarUhInt();
        if (this.xpBonus < 0) {
            throw new Error("Forbidden value (" + this.xpBonus + ") on element of ChallengeInfoMessage.xpBonus.");
        };
        this.dropBonus = buffer.readVarUhInt();
        if (this.dropBonus < 0) {
            throw new Error("Forbidden value (" + this.dropBonus + ") on element of ChallengeInfoMessage.dropBonus.");
        };
    }
};
module.exports.ChallengeInfoMessage = ChallengeInfoMessage;
module.exports.messages[6022] = ChallengeInfoMessage;

class ChallengeResultMessage extends ProtocolMessage {
    constructor(challengeId, success) {
        super(6019);
        this.challengeId = challengeId;
        this.success = success;
    }

    serialize() {
        if (this.challengeId < 0) {
            throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
        }
        this.buffer.writeVarShort(this.challengeId);
        this.buffer.writeBoolean(this.success);
    }

    deserialize(buffer) {
        this.challengeId = buffer.readVarUhShort();
        if (this.challengeId < 0) {
            throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeResultMessage.challengeId.");
        }
        this.success = buffer.readBoolean();
    }
};
module.exports.ChallengeResultMessage = ChallengeResultMessage;
module.exports.messages[6019] = ChallengeResultMessage;

class ChallengeTargetsListMessage extends ProtocolMessage {
    constructor(targetIds, targetCells) {
        super(5613);
        this.targetIds = targetIds;
        this.targetCells = targetCells;
    }

    serialize() {
        this.buffer.writeShort(this.targetIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.targetIds.length) {
            if (this.targetIds[_loc2_] < -9007199254740990 || this.targetIds[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetIds[_loc2_] + ") on element 1 (starting at 1) of targetIds.");
            }
            this.buffer.writeDouble(this.targetIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.targetCells.length);
        var _loc3_ = 0;
        while (_loc3_ < this.targetCells.length) {
            if (this.targetCells[_loc3_] < -1 || this.targetCells[_loc3_] > 559) {
                throw new Error("Forbidden value (" + this.targetCells[_loc3_] + ") on element 2 (starting at 1) of targetCells.");
            }
            this.buffer.writeShort(this.targetCells[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = NaN;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readDouble();
            if (_loc6_ < -9007199254740990 || _loc6_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of targetIds.");
            }
            this.targetIds.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readShort();
            if (_loc7_ < -1 || _loc7_ > 559) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of targetCells.");
            }
            this.targetCells.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.ChallengeTargetsListMessage = ChallengeTargetsListMessage;
module.exports.messages[5613] = ChallengeTargetsListMessage;

class ChallengeTargetsListRequestMessage extends ProtocolMessage {
    constructor(challengeId) {
        super(5614);
        this.challengeId = challengeId;
    }

    serialize() {
        if (this.challengeId < 0) {
            throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
        }
        this.buffer.writeVarShort(this.challengeId);
    }

    deserialize(buffer) {
        this.challengeId = buffer.readVarUhShort();
        if (this.challengeId < 0) {
            throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeTargetsListRequestMessage.challengeId.");
        }
    }
};
module.exports.ChallengeTargetsListRequestMessage = ChallengeTargetsListRequestMessage;
module.exports.messages[5614] = ChallengeTargetsListRequestMessage;

class ChallengeTargetUpdateMessage extends ProtocolMessage {
    constructor(challengeId, targetId) {
        super(6123);
        this.challengeId = challengeId;
        this.targetId = targetId;
    }

    serialize() {
        if (this.challengeId < 0) {
            throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
        }
        this.buffer.writeVarShort(this.challengeId);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }

    deserialize(buffer) {
        this.challengeId = buffer.readVarUhShort();
        if (this.challengeId < 0) {
            throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeTargetUpdateMessage.challengeId.");
        }
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of ChallengeTargetUpdateMessage.targetId.");
        };
    }
};
module.exports.ChallengeTargetUpdateMessage = ChallengeTargetUpdateMessage;
module.exports.messages[6123] = ChallengeTargetUpdateMessage;

class GameFightRefreshFighterMessage extends ProtocolMessage {
    constructor(informations) {
        super(6309);
        this.informations = informations;
    }

    serialize() {
        this.buffer.writeShort(this.informations.getTypeId());
        this.informations.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.informations = ProtocolTypeManager.getInstance(GameContextActorInformations, _loc2_);
        this.informations.deserialize(buffer);
    }
};
module.exports.GameFightRefreshFighterMessage = GameFightRefreshFighterMessage;
module.exports.messages[6309] = GameFightRefreshFighterMessage;

class GameFightShowFighterMessage extends ProtocolMessage {
    constructor(informations) {
        super(5864);
        this.informations = informations;
    }

    serialize() {
        this.buffer.writeShort(this.informations.getTypeId());
        this.informations.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.informations = ProtocolTypeManager.getInstance(GameFightFighterInformations, _loc2_);
        this.informations.deserialize(buffer);
    }
};
module.exports.GameFightShowFighterMessage = GameFightShowFighterMessage;
module.exports.messages[5864] = GameFightShowFighterMessage;

class GameFightShowFighterRandomStaticPoseMessage extends GameFightShowFighterMessage {
    constructor(informations) {
        super(informations);
        this.messageId = 6218;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GameFightShowFighterRandomStaticPoseMessage = GameFightShowFighterRandomStaticPoseMessage;
module.exports.messages[6218] = GameFightShowFighterRandomStaticPoseMessage;

class GameFightEndMessage extends ProtocolMessage {
    constructor(duration, ageBonus, lootShareLimitMalus, results, namedPartyTeamsOutcomes) {
        super(720);
        this.duration = duration;
        this.ageBonus = ageBonus;
        this.lootShareLimitMalus = lootShareLimitMalus;
        this.results = results;
        this.namedPartyTeamsOutcomes = namedPartyTeamsOutcomes;
    }

    serialize() {
        if (this.duration < 0) {
            throw new Error("Forbidden value (" + this.duration + ") on element duration.");
        }
        this.buffer.writeInt(this.duration);
        this.buffer.writeShort(this.ageBonus);
        this.buffer.writeShort(this.lootShareLimitMalus);
        this.buffer.writeShort(this.results.length);
        var _loc2_ = 0;
        while (_loc2_ < this.results.length) {
            this.buffer.writeShort((this.results[_loc2_]).getTypeId());
            (this.results[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.namedPartyTeamsOutcomes.length);
        var _loc3_ = 0;
        while (_loc3_ < this.namedPartyTeamsOutcomes.length) {
            (this.namedPartyTeamsOutcomes[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = null;
        this.duration = buffer.readInt();
        if (this.duration < 0) {
            throw new Error("Forbidden value (" + this.duration + ") on element of GameFightEndMessage.duration.");
        }
        this.ageBonus = buffer.readShort();
        this.lootShareLimitMalus = buffer.readShort();;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(FightResultListEntry, _loc6_);
            _loc7_.deserialize(buffer);
            this.results.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = new NamedPartyTeamWithOutcome();
            _loc8_.deserialize(buffer);
            this.namedPartyTeamsOutcomes.push(_loc8_);
            _loc5_++;
        }
    }
};
module.exports.GameFightEndMessage = GameFightEndMessage;
module.exports.messages[720] = GameFightEndMessage;

class GameFightHumanReadyStateMessage extends ProtocolMessage {
    constructor(characterId, isReady) {
        super(740);
        this.characterId = characterId;
        this.isReady = isReady;
    }

    serialize() {
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
        this.buffer.writeBoolean(this.isReady);
    }

    deserialize(buffer) {
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element of GameFightHumanReadyStateMessage.characterId.");
        }
        this.isReady = buffer.readBoolean();
    }
};
module.exports.GameFightHumanReadyStateMessage = GameFightHumanReadyStateMessage;
module.exports.messages[740] = GameFightHumanReadyStateMessage;

class GameFightJoinMessage extends ProtocolMessage {
    constructor(isTeamPhase, canBeCancelled, canSayReady, isFightStarted, timeMaxBeforeFightStart, fightType) {
        super(702);
        this.isTeamPhase = isTeamPhase;
        this.canBeCancelled = canBeCancelled;
        this.canSayReady = canSayReady;
        this.isFightStarted = isFightStarted;
        this.timeMaxBeforeFightStart = timeMaxBeforeFightStart;
        this.fightType = fightType;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.isTeamPhase);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.canBeCancelled);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.canSayReady);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.isFightStarted);
        this.buffer.writeByte(_loc2_);
        if (this.timeMaxBeforeFightStart < 0) {
            throw new Error("Forbidden value (" + this.timeMaxBeforeFightStart + ") on element timeMaxBeforeFightStart.");
        }
        this.buffer.writeShort(this.timeMaxBeforeFightStart);
        this.buffer.writeByte(this.fightType);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.timeMaxBeforeFightStart = buffer.readShort();
        if (this.timeMaxBeforeFightStart < 0) {
            throw new Error("Forbidden value (" + this.timeMaxBeforeFightStart + ") on element of GameFightJoinMessage.timeMaxBeforeFightStart.");
        }
        this.fightType = buffer.readByte();
        if (this.fightType < 0) {
            throw new Error("Forbidden value (" + this.fightType + ") on element of GameFightJoinMessage.fightType.");
        };
    }
};
module.exports.GameFightJoinMessage = GameFightJoinMessage;
module.exports.messages[702] = GameFightJoinMessage;

class GameFightJoinRequestMessage extends ProtocolMessage {
    constructor(fighterId, fightId) {
        super(701);
        this.fighterId = fighterId;
        this.fightId = fightId;
    }

    serialize() {
        if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fighterId + ") on element fighterId.");
        }
        this.buffer.writeDouble(this.fighterId);
        this.buffer.writeInt(this.fightId);
    }

    deserialize(buffer) {
        this.fighterId = buffer.readDouble();
        if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fighterId + ") on element of GameFightJoinRequestMessage.fighterId.");
        }
        this.fightId = buffer.readInt();
    }
};
module.exports.GameFightJoinRequestMessage = GameFightJoinRequestMessage;
module.exports.messages[701] = GameFightJoinRequestMessage;

class GameFightLeaveMessage extends ProtocolMessage {
    constructor(charId) {
        super(721);
        this.charId = charId;
    }

    serialize() {
        if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.charId + ") on element charId.");
        }
        this.buffer.writeDouble(this.charId);
    }

    deserialize(buffer) {
        this.charId = buffer.readDouble();
        if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.charId + ") on element of GameFightLeaveMessage.charId.");
        }
    }
};
module.exports.GameFightLeaveMessage = GameFightLeaveMessage;
module.exports.messages[721] = GameFightLeaveMessage;

class GameFightNewRoundMessage extends ProtocolMessage {
    constructor(roundNumber) {
        super(6239);
        this.roundNumber = roundNumber;
    }

    serialize() {
        if (this.roundNumber < 0) {
            throw new Error("Forbidden value (" + this.roundNumber + ") on element roundNumber.");
        }
        this.buffer.writeVarInt(this.roundNumber);
    }

    deserialize(buffer) {
        this.roundNumber = buffer.readVarUhInt();
        if (this.roundNumber < 0) {
            throw new Error("Forbidden value (" + this.roundNumber + ") on element of GameFightNewRoundMessage.roundNumber.");
        }
    }
};
module.exports.GameFightNewRoundMessage = GameFightNewRoundMessage;
module.exports.messages[6239] = GameFightNewRoundMessage;

class GameFightNewWaveMessage extends ProtocolMessage {
    constructor(id, teamId, nbTurnBeforeNextWave) {
        super(6490);
        this.id = id;
        this.teamId = teamId;
        this.nbTurnBeforeNextWave = nbTurnBeforeNextWave;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeByte(this.id);
        this.buffer.writeByte(this.teamId);
        this.buffer.writeShort(this.nbTurnBeforeNextWave);
    }

    deserialize(buffer) {
        this.id = buffer.readByte();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of GameFightNewWaveMessage.id.");
        }
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            throw new Error("Forbidden value (" + this.teamId + ") on element of GameFightNewWaveMessage.teamId.");
        };
        this.nbTurnBeforeNextWave = buffer.readShort();
    }
};
module.exports.GameFightNewWaveMessage = GameFightNewWaveMessage;
module.exports.messages[6490] = GameFightNewWaveMessage;

class GameFightOptionStateUpdateMessage extends ProtocolMessage {
    constructor(fightId, teamId, option, state) {
        super(5927);
        this.fightId = fightId;
        this.teamId = teamId;
        this.option = option;
        this.state = state;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeShort(this.fightId);
        this.buffer.writeByte(this.teamId);
        this.buffer.writeByte(this.option);
        this.buffer.writeBoolean(this.state);
    }

    deserialize(buffer) {
        this.fightId = buffer.readShort();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightOptionStateUpdateMessage.fightId.");
        }
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            throw new Error("Forbidden value (" + this.teamId + ") on element of GameFightOptionStateUpdateMessage.teamId.");
        };
        this.option = buffer.readByte();
        if (this.option < 0) {
            throw new Error("Forbidden value (" + this.option + ") on element of GameFightOptionStateUpdateMessage.option.");
        };
        this.state = buffer.readBoolean();
    }
};
module.exports.GameFightOptionStateUpdateMessage = GameFightOptionStateUpdateMessage;
module.exports.messages[5927] = GameFightOptionStateUpdateMessage;

class GameFightOptionToggleMessage extends ProtocolMessage {
    constructor(option) {
        super(707);
        this.option = option;
    }

    serialize() {
        this.buffer.writeByte(this.option);
    }

    deserialize(buffer) {
        this.option = buffer.readByte();
        if (this.option < 0) {
            throw new Error("Forbidden value (" + this.option + ") on element of GameFightOptionToggleMessage.option.");
        }
    }
};
module.exports.GameFightOptionToggleMessage = GameFightOptionToggleMessage;
module.exports.messages[707] = GameFightOptionToggleMessage;

class GameFightPlacementPositionRequestMessage extends ProtocolMessage {
    constructor(cellId) {
        super(704);
        this.cellId = cellId;
    }

    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }

    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of GameFightPlacementPositionRequestMessage.cellId.");
        }
    }
};
module.exports.GameFightPlacementPositionRequestMessage = GameFightPlacementPositionRequestMessage;
module.exports.messages[704] = GameFightPlacementPositionRequestMessage;

class GameFightPlacementPossiblePositionsMessage extends ProtocolMessage {
    constructor(positionsForChallengers, positionsForDefenders, teamNumber) {
        super(703);
        this.positionsForChallengers = positionsForChallengers;
        this.positionsForDefenders = positionsForDefenders;
        this.teamNumber = teamNumber;
    }

    serialize() {
        this.buffer.writeShort(this.positionsForChallengers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.positionsForChallengers.length) {
            if (this.positionsForChallengers[_loc2_] < 0 || this.positionsForChallengers[_loc2_] > 559) {
                throw new Error("Forbidden value (" + this.positionsForChallengers[_loc2_] + ") on element 1 (starting at 1) of positionsForChallengers.");
            }
            this.buffer.writeVarShort(this.positionsForChallengers[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.positionsForDefenders.length);
        var _loc3_ = 0;
        while (_loc3_ < this.positionsForDefenders.length) {
            if (this.positionsForDefenders[_loc3_] < 0 || this.positionsForDefenders[_loc3_] > 559) {
                throw new Error("Forbidden value (" + this.positionsForDefenders[_loc3_] + ") on element 2 (starting at 1) of positionsForDefenders.");
            }
            this.buffer.writeVarShort(this.positionsForDefenders[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeByte(this.teamNumber);
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0 || _loc6_ > 559) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of positionsForChallengers.");
            }
            this.positionsForChallengers.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0 || _loc7_ > 559) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of positionsForDefenders.");
            }
            this.positionsForDefenders.push(_loc7_);
            _loc5_++;
        }
        this._teamNumberFunc(buffer);
    }
};
module.exports.GameFightPlacementPossiblePositionsMessage = GameFightPlacementPossiblePositionsMessage;
module.exports.messages[703] = GameFightPlacementPossiblePositionsMessage;

class GameFightPlacementSwapPositionsAcceptMessage extends ProtocolMessage {
    constructor(requestId) {
        super(6547);
        this.requestId = requestId;
    }

    serialize() {
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeInt(this.requestId);
    }

    deserialize(buffer) {
        this.requestId = buffer.readInt();
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsAcceptMessage.requestId.");
        }
    }
};
module.exports.GameFightPlacementSwapPositionsAcceptMessage = GameFightPlacementSwapPositionsAcceptMessage;
module.exports.messages[6547] = GameFightPlacementSwapPositionsAcceptMessage;

class GameFightPlacementSwapPositionsCancelledMessage extends ProtocolMessage {
    constructor(requestId, cancellerId) {
        super(6546);
        this.requestId = requestId;
        this.cancellerId = cancellerId;
    }

    serialize() {
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeInt(this.requestId);
        if (this.cancellerId < -9007199254740990 || this.cancellerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.cancellerId + ") on element cancellerId.");
        }
        this.buffer.writeDouble(this.cancellerId);
    }

    deserialize(buffer) {
        this.requestId = buffer.readInt();
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsCancelledMessage.requestId.");
        }
        this.cancellerId = buffer.readDouble();
        if (this.cancellerId < -9007199254740990 || this.cancellerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.cancellerId + ") on element of GameFightPlacementSwapPositionsCancelledMessage.cancellerId.");
        };
    }
};
module.exports.GameFightPlacementSwapPositionsCancelledMessage = GameFightPlacementSwapPositionsCancelledMessage;
module.exports.messages[6546] = GameFightPlacementSwapPositionsCancelledMessage;

class GameFightPlacementSwapPositionsCancelMessage extends ProtocolMessage {
    constructor(requestId) {
        super(6543);
        this.requestId = requestId;
    }

    serialize() {
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeInt(this.requestId);
    }

    deserialize(buffer) {
        this.requestId = buffer.readInt();
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsCancelMessage.requestId.");
        }
    }
};
module.exports.GameFightPlacementSwapPositionsCancelMessage = GameFightPlacementSwapPositionsCancelMessage;
module.exports.messages[6543] = GameFightPlacementSwapPositionsCancelMessage;

class GameFightPlacementSwapPositionsErrorMessage extends ProtocolMessage {
    constructor() {
        super(6548);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameFightPlacementSwapPositionsErrorMessage = GameFightPlacementSwapPositionsErrorMessage;
module.exports.messages[6548] = GameFightPlacementSwapPositionsErrorMessage;

class GameFightPlacementSwapPositionsMessage extends ProtocolMessage {
    constructor(dispositions) {
        super(6544);
        this.dispositions = dispositions;
    }

    serialize() {
        var _loc2_ = 0;
        while (_loc2_ < 2) {
            this.dispositions[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc2_ = 0;
        while (_loc2_ < 2) {
            this.dispositions[_loc2_] = new IdentifiedEntityDispositionInformations();
            this.dispositions[_loc2_].deserialize(buffer);
            _loc2_++;
        }
    }
};
module.exports.GameFightPlacementSwapPositionsMessage = GameFightPlacementSwapPositionsMessage;
module.exports.messages[6544] = GameFightPlacementSwapPositionsMessage;

class GameFightPlacementSwapPositionsOfferMessage extends ProtocolMessage {
    constructor(requestId, requesterId, requesterCellId, requestedId, requestedCellId) {
        super(6542);
        this.requestId = requestId;
        this.requesterId = requesterId;
        this.requesterCellId = requesterCellId;
        this.requestedId = requestedId;
        this.requestedCellId = requestedCellId;
    }

    serialize() {
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeInt(this.requestId);
        if (this.requesterId < -9007199254740990 || this.requesterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.requesterId + ") on element requesterId.");
        }
        this.buffer.writeDouble(this.requesterId);
        if (this.requesterCellId < 0 || this.requesterCellId > 559) {
            throw new Error("Forbidden value (" + this.requesterCellId + ") on element requesterCellId.");
        }
        this.buffer.writeVarShort(this.requesterCellId);
        if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.requestedId + ") on element requestedId.");
        }
        this.buffer.writeDouble(this.requestedId);
        if (this.requestedCellId < 0 || this.requestedCellId > 559) {
            throw new Error("Forbidden value (" + this.requestedCellId + ") on element requestedCellId.");
        }
        this.buffer.writeVarShort(this.requestedCellId);
    }

    deserialize(buffer) {
        this.requestId = buffer.readInt();
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestId.");
        }
        this.requesterId = buffer.readDouble();
        if (this.requesterId < -9007199254740990 || this.requesterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.requesterId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requesterId.");
        };
        this.requesterCellId = buffer.readVarUhShort();
        if (this.requesterCellId < 0 || this.requesterCellId > 559) {
            throw new Error("Forbidden value (" + this.requesterCellId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requesterCellId.");
        };
        this.requestedId = buffer.readDouble();
        if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.requestedId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestedId.");
        };
        this.requestedCellId = buffer.readVarUhShort();
        if (this.requestedCellId < 0 || this.requestedCellId > 559) {
            throw new Error("Forbidden value (" + this.requestedCellId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestedCellId.");
        };
    }
};
module.exports.GameFightPlacementSwapPositionsOfferMessage = GameFightPlacementSwapPositionsOfferMessage;
module.exports.messages[6542] = GameFightPlacementSwapPositionsOfferMessage;

class GameFightPlacementSwapPositionsRequestMessage extends GameFightPlacementPositionRequestMessage {
    constructor(cellId, requestedId) {
        super(cellId);
        this.requestedId = requestedId;
        this.messageId = 6541;
    }

    serialize() {
        super.serialize();
        if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.requestedId + ") on element requestedId.");
        }
        this.buffer.writeDouble(this.requestedId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.requestedId = buffer.readDouble();
        if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.requestedId + ") on element of GameFightPlacementSwapPositionsRequestMessage.requestedId.");
        }
    }
};
module.exports.GameFightPlacementSwapPositionsRequestMessage = GameFightPlacementSwapPositionsRequestMessage;
module.exports.messages[6541] = GameFightPlacementSwapPositionsRequestMessage;

class GameFightReadyMessage extends ProtocolMessage {
    constructor(isReady) {
        super(708);
        this.isReady = isReady;
    }

    serialize() {
        this.buffer.writeBoolean(this.isReady);
    }

    deserialize(buffer) {
        this.isReady = buffer.readBoolean();
    }
};
module.exports.GameFightReadyMessage = GameFightReadyMessage;
module.exports.messages[708] = GameFightReadyMessage;

class GameFightRemoveTeamMemberMessage extends ProtocolMessage {
    constructor(fightId, teamId, charId) {
        super(711);
        this.fightId = fightId;
        this.teamId = teamId;
        this.charId = charId;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeShort(this.fightId);
        this.buffer.writeByte(this.teamId);
        if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.charId + ") on element charId.");
        }
        this.buffer.writeDouble(this.charId);
    }

    deserialize(buffer) {
        this.fightId = buffer.readShort();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightRemoveTeamMemberMessage.fightId.");
        }
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            throw new Error("Forbidden value (" + this.teamId + ") on element of GameFightRemoveTeamMemberMessage.teamId.");
        };
        this.charId = buffer.readDouble();
        if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.charId + ") on element of GameFightRemoveTeamMemberMessage.charId.");
        };
    }
};
module.exports.GameFightRemoveTeamMemberMessage = GameFightRemoveTeamMemberMessage;
module.exports.messages[711] = GameFightRemoveTeamMemberMessage;

class GameFightSpectateMessage extends ProtocolMessage {
    constructor(effects, marks, gameTurn, fightStart, idols) {
        super(6069);
        this.effects = effects;
        this.marks = marks;
        this.gameTurn = gameTurn;
        this.fightStart = fightStart;
        this.idols = idols;
    }

    serialize() {
        this.buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            (this.effects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.marks.length);
        var _loc3_ = 0;
        while (_loc3_ < this.marks.length) {
            (this.marks[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
        if (this.gameTurn < 0) {
            throw new Error("Forbidden value (" + this.gameTurn + ") on element gameTurn.");
        }
        this.buffer.writeVarShort(this.gameTurn);
        if (this.fightStart < 0) {
            throw new Error("Forbidden value (" + this.fightStart + ") on element fightStart.");
        }
        this.buffer.writeInt(this.fightStart);
        this.buffer.writeShort(this.idols.length);
        var _loc4_ = 0;
        while (_loc4_ < this.idols.length) {
            (this.idols[_loc4_]).serialize(this.buffer);
            _loc4_++;
        }
    }

    deserialize(buffer) {
        var _loc8_ = null;
        var _loc9_ = null;
        var _loc10_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = new FightDispellableEffectExtendedInformations();
            _loc8_.deserialize(buffer);
            this.effects.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = new GameActionMark();
            _loc9_.deserialize(buffer);
            this.marks.push(_loc9_);
            _loc5_++;
        }
        this._gameTurnFunc(buffer);
        this.fightStart = buffer.readInt();
        if (this.fightStart < 0) {
            throw new Error("Forbidden value (" + this.fightStart + ") on element of GameFightSpectateMessage.fightStart.");
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = new Idol();
            _loc10_.deserialize(buffer);
            this.idols.push(_loc10_);
            _loc7_++;
        }
    }
};
module.exports.GameFightSpectateMessage = GameFightSpectateMessage;
module.exports.messages[6069] = GameFightSpectateMessage;

class GameFightResumeMessage extends GameFightSpectateMessage {
    constructor(effects, marks, gameTurn, fightStart, idols, spellCooldowns, summonCount, bombCount) {
        super(effects, marks, gameTurn, fightStart, idols);
        this.spellCooldowns = spellCooldowns;
        this.summonCount = summonCount;
        this.bombCount = bombCount;
        this.messageId = 6067;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.spellCooldowns.length);
        var _loc2_ = 0;
        while (_loc2_ < this.spellCooldowns.length) {
            (this.spellCooldowns[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.summonCount < 0) {
            throw new Error("Forbidden value (" + this.summonCount + ") on element summonCount.");
        }
        this.buffer.writeByte(this.summonCount);
        if (this.bombCount < 0) {
            throw new Error("Forbidden value (" + this.bombCount + ") on element bombCount.");
        }
        this.buffer.writeByte(this.bombCount);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GameFightSpellCooldown();
            _loc4_.deserialize(buffer);
            this.spellCooldowns.push(_loc4_);
            _loc3_++;
        }
        this._summonCountFunc(buffer);
        this.bombCount = buffer.readByte();
        if (this.bombCount < 0) {
            throw new Error("Forbidden value (" + this.bombCount + ") on element of GameFightResumeMessage.bombCount.");
        }
    }
};
module.exports.GameFightResumeMessage = GameFightResumeMessage;
module.exports.messages[6067] = GameFightResumeMessage;

class GameFightResumeWithSlavesMessage extends GameFightResumeMessage {
    constructor(effects, marks, gameTurn, fightStart, idols, spellCooldowns, summonCount, bombCount, slavesInfo) {
        super(effects, marks, gameTurn, fightStart, idols, spellCooldowns, summonCount, bombCount);
        this.slavesInfo = slavesInfo;
        this.messageId = 6215;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.slavesInfo.length);
        var _loc2_ = 0;
        while (_loc2_ < this.slavesInfo.length) {
            (this.slavesInfo[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GameFightResumeSlaveInfo();
            _loc4_.deserialize(buffer);
            this.slavesInfo.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameFightResumeWithSlavesMessage = GameFightResumeWithSlavesMessage;
module.exports.messages[6215] = GameFightResumeWithSlavesMessage;

class GameFightSpectatePlayerRequestMessage extends ProtocolMessage {
    constructor(playerId) {
        super(6474);
        this.playerId = playerId;
    }

    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of GameFightSpectatePlayerRequestMessage.playerId.");
        }
    }
};
module.exports.GameFightSpectatePlayerRequestMessage = GameFightSpectatePlayerRequestMessage;
module.exports.messages[6474] = GameFightSpectatePlayerRequestMessage;

class GameFightSpectatorJoinMessage extends GameFightJoinMessage {
    constructor(isTeamPhase, canBeCancelled, canSayReady, isFightStarted, timeMaxBeforeFightStart, fightType, namedPartyTeams) {
        super(isTeamPhase, canBeCancelled, canSayReady, isFightStarted, timeMaxBeforeFightStart, fightType);
        this.namedPartyTeams = namedPartyTeams;
        this.messageId = 6504;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.namedPartyTeams.length);
        var _loc2_ = 0;
        while (_loc2_ < this.namedPartyTeams.length) {
            (this.namedPartyTeams[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new NamedPartyTeam();
            _loc4_.deserialize(buffer);
            this.namedPartyTeams.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameFightSpectatorJoinMessage = GameFightSpectatorJoinMessage;
module.exports.messages[6504] = GameFightSpectatorJoinMessage;

class GameFightStartingMessage extends ProtocolMessage {
    constructor(fightType, attackerId, defenderId) {
        super(700);
        this.fightType = fightType;
        this.attackerId = attackerId;
        this.defenderId = defenderId;
    }

    serialize() {
        this.buffer.writeByte(this.fightType);
        if (this.attackerId < -9007199254740990 || this.attackerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.attackerId + ") on element attackerId.");
        }
        this.buffer.writeDouble(this.attackerId);
        if (this.defenderId < -9007199254740990 || this.defenderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.defenderId + ") on element defenderId.");
        }
        this.buffer.writeDouble(this.defenderId);
    }

    deserialize(buffer) {
        this.fightType = buffer.readByte();
        if (this.fightType < 0) {
            throw new Error("Forbidden value (" + this.fightType + ") on element of GameFightStartingMessage.fightType.");
        }
        this.attackerId = buffer.readDouble();
        if (this.attackerId < -9007199254740990 || this.attackerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.attackerId + ") on element of GameFightStartingMessage.attackerId.");
        };
        this.defenderId = buffer.readDouble();
        if (this.defenderId < -9007199254740990 || this.defenderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.defenderId + ") on element of GameFightStartingMessage.defenderId.");
        };
    }
};
module.exports.GameFightStartingMessage = GameFightStartingMessage;
module.exports.messages[700] = GameFightStartingMessage;

class GameFightStartMessage extends ProtocolMessage {
    constructor(idols) {
        super(712);
        this.idols = idols;
    }

    serialize() {
        this.buffer.writeShort(this.idols.length);
        var _loc2_ = 0;
        while (_loc2_ < this.idols.length) {
            (this.idols[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Idol();
            _loc4_.deserialize(buffer);
            this.idols.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameFightStartMessage = GameFightStartMessage;
module.exports.messages[712] = GameFightStartMessage;

class GameFightSynchronizeMessage extends ProtocolMessage {
    constructor(fighters) {
        super(5921);
        this.fighters = fighters;
    }

    serialize() {
        this.buffer.writeShort(this.fighters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.fighters.length) {
            this.buffer.writeShort((this.fighters[_loc2_]).getTypeId());
            (this.fighters[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(GameFightFighterInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.fighters.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.GameFightSynchronizeMessage = GameFightSynchronizeMessage;
module.exports.messages[5921] = GameFightSynchronizeMessage;

class GameFightTurnEndMessage extends ProtocolMessage {
    constructor(id) {
        super(719);
        this.id = id;
    }

    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of GameFightTurnEndMessage.id.");
        }
    }
};
module.exports.GameFightTurnEndMessage = GameFightTurnEndMessage;
module.exports.messages[719] = GameFightTurnEndMessage;

class GameFightTurnFinishMessage extends ProtocolMessage {
    constructor(isAfk) {
        super(718);
        this.isAfk = isAfk;
    }

    serialize() {
        this.buffer.writeBoolean(this.isAfk);
    }

    deserialize(buffer) {
        this.isAfk = buffer.readBoolean();
    }
};
module.exports.GameFightTurnFinishMessage = GameFightTurnFinishMessage;
module.exports.messages[718] = GameFightTurnFinishMessage;

class GameFightTurnListMessage extends ProtocolMessage {
    constructor(ids, deadsIds) {
        super(713);
        this.ids = ids;
        this.deadsIds = deadsIds;
    }

    serialize() {
        this.buffer.writeShort(this.ids.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ids.length) {
            if (this.ids[_loc2_] < -9007199254740990 || this.ids[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.ids[_loc2_] + ") on element 1 (starting at 1) of ids.");
            }
            this.buffer.writeDouble(this.ids[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.deadsIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.deadsIds.length) {
            if (this.deadsIds[_loc3_] < -9007199254740990 || this.deadsIds[_loc3_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.deadsIds[_loc3_] + ") on element 2 (starting at 1) of deadsIds.");
            }
            this.buffer.writeDouble(this.deadsIds[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = NaN;
        var _loc7_ = NaN;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readDouble();
            if (_loc6_ < -9007199254740990 || _loc6_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of ids.");
            }
            this.ids.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readDouble();
            if (_loc7_ < -9007199254740990 || _loc7_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of deadsIds.");
            }
            this.deadsIds.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.GameFightTurnListMessage = GameFightTurnListMessage;
module.exports.messages[713] = GameFightTurnListMessage;

class GameFightTurnReadyMessage extends ProtocolMessage {
    constructor(isReady) {
        super(716);
        this.isReady = isReady;
    }

    serialize() {
        this.buffer.writeBoolean(this.isReady);
    }

    deserialize(buffer) {
        this.isReady = buffer.readBoolean();
    }
};
module.exports.GameFightTurnReadyMessage = GameFightTurnReadyMessage;
module.exports.messages[716] = GameFightTurnReadyMessage;

class GameFightTurnReadyRequestMessage extends ProtocolMessage {
    constructor(id) {
        super(715);
        this.id = id;
    }

    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of GameFightTurnReadyRequestMessage.id.");
        }
    }
};
module.exports.GameFightTurnReadyRequestMessage = GameFightTurnReadyRequestMessage;
module.exports.messages[715] = GameFightTurnReadyRequestMessage;

class GameFightTurnStartMessage extends ProtocolMessage {
    constructor(id, waitTime) {
        super(714);
        this.id = id;
        this.waitTime = waitTime;
    }

    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        if (this.waitTime < 0) {
            throw new Error("Forbidden value (" + this.waitTime + ") on element waitTime.");
        }
        this.buffer.writeVarInt(this.waitTime);
    }

    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of GameFightTurnStartMessage.id.");
        }
        this.waitTime = buffer.readVarUhInt();
        if (this.waitTime < 0) {
            throw new Error("Forbidden value (" + this.waitTime + ") on element of GameFightTurnStartMessage.waitTime.");
        };
    }
};
module.exports.GameFightTurnStartMessage = GameFightTurnStartMessage;
module.exports.messages[714] = GameFightTurnStartMessage;

class GameFightTurnResumeMessage extends GameFightTurnStartMessage {
    constructor(id, waitTime, remainingTime) {
        super(id, waitTime);
        this.remainingTime = remainingTime;
        this.messageId = 6307;
    }

    serialize() {
        super.serialize();
        if (this.remainingTime < 0) {
            throw new Error("Forbidden value (" + this.remainingTime + ") on element remainingTime.");
        }
        this.buffer.writeVarInt(this.remainingTime);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.remainingTime = buffer.readVarUhInt();
        if (this.remainingTime < 0) {
            throw new Error("Forbidden value (" + this.remainingTime + ") on element of GameFightTurnResumeMessage.remainingTime.");
        }
    }
};
module.exports.GameFightTurnResumeMessage = GameFightTurnResumeMessage;
module.exports.messages[6307] = GameFightTurnResumeMessage;

class GameFightTurnStartPlayingMessage extends ProtocolMessage {
    constructor() {
        super(6465);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameFightTurnStartPlayingMessage = GameFightTurnStartPlayingMessage;
module.exports.messages[6465] = GameFightTurnStartPlayingMessage;

class GameFightUpdateTeamMessage extends ProtocolMessage {
    constructor(fightId, team) {
        super(5572);
        this.fightId = fightId;
        this.team = team;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeShort(this.fightId);
        this.team.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.fightId = buffer.readShort();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightUpdateTeamMessage.fightId.");
        }
        this.team = new FightTeamInformations();
        this.team.deserialize(buffer);
    }
};
module.exports.GameFightUpdateTeamMessage = GameFightUpdateTeamMessage;
module.exports.messages[5572] = GameFightUpdateTeamMessage;

class RefreshCharacterStatsMessage extends ProtocolMessage {
    constructor(fighterId, stats) {
        super(6699);
        this.fighterId = fighterId;
        this.stats = stats;
    }

    serialize() {
        if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fighterId + ") on element fighterId.");
        }
        this.buffer.writeDouble(this.fighterId);
        this.stats.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.fighterId = buffer.readDouble();
        if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fighterId + ") on element of RefreshCharacterStatsMessage.fighterId.");
        }
        this.stats = new GameFightMinimalStats();
        this.stats.deserialize(buffer);
    }
};
module.exports.RefreshCharacterStatsMessage = RefreshCharacterStatsMessage;
module.exports.messages[6699] = RefreshCharacterStatsMessage;

class SlaveSwitchContextMessage extends ProtocolMessage {
    constructor(masterId, slaveId, slaveSpells, slaveStats, shortcuts) {
        super(6214);
        this.masterId = masterId;
        this.slaveId = slaveId;
        this.slaveSpells = slaveSpells;
        this.slaveStats = slaveStats;
        this.shortcuts = shortcuts;
    }

    serialize() {
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
        }
        this.buffer.writeDouble(this.masterId);
        if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.slaveId + ") on element slaveId.");
        }
        this.buffer.writeDouble(this.slaveId);
        this.buffer.writeShort(this.slaveSpells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.slaveSpells.length) {
            (this.slaveSpells[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.slaveStats.serialize(this.buffer);
        this.buffer.writeShort(this.shortcuts.length);
        var _loc3_ = 0;
        while (_loc3_ < this.shortcuts.length) {
            this.buffer.writeShort((this.shortcuts[_loc3_]).getTypeId());
            (this.shortcuts[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = 0;
        var _loc8_ = null;
        this.masterId = buffer.readDouble();
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.masterId + ") on element of SlaveSwitchContextMessage.masterId.");
        }
        this.slaveId = buffer.readDouble();
        if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.slaveId + ") on element of SlaveSwitchContextMessage.slaveId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new SpellItem();
            _loc6_.deserialize(buffer);
            this.slaveSpells.push(_loc6_);
            _loc3_++;
        }
        this.slaveStats = new CharacterCharacteristicsInformations();
        this.slaveStats.deserialize(buffer);
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readUnsignedShort();
            _loc8_ = ProtocolTypeManager.getInstance(Shortcut, _loc7_);
            _loc8_.deserialize(buffer);
            this.shortcuts.push(_loc8_);
            _loc5_++;
        }
    }
};
module.exports.SlaveSwitchContextMessage = SlaveSwitchContextMessage;
module.exports.messages[6214] = SlaveSwitchContextMessage;

class GameMapMovementMessage extends ProtocolMessage {
    constructor(keyMovements, forcedDirection, actorId) {
        super(951);
        this.keyMovements = keyMovements;
        this.forcedDirection = forcedDirection;
        this.actorId = actorId;
    }

    serialize() {
        this.buffer.writeShort(this.keyMovements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.keyMovements.length) {
            if (this.keyMovements[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.keyMovements[_loc2_] + ") on element 1 (starting at 1) of keyMovements.");
            }
            this.buffer.writeShort(this.keyMovements[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.forcedDirection);
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
        }
        this.buffer.writeDouble(this.actorId);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of keyMovements.");
            }
            this.keyMovements.push(_loc4_);
            _loc3_++;
        }
        this._forcedDirectionFunc(buffer);
        this.actorId = buffer.readDouble();
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.actorId + ") on element of GameMapMovementMessage.actorId.");
        }
    }
};
module.exports.GameMapMovementMessage = GameMapMovementMessage;
module.exports.messages[951] = GameMapMovementMessage;

class GameCautiousMapMovementMessage extends GameMapMovementMessage {
    constructor(keyMovements, forcedDirection, actorId) {
        super(keyMovements, forcedDirection, actorId);
        this.messageId = 6497;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GameCautiousMapMovementMessage = GameCautiousMapMovementMessage;
module.exports.messages[6497] = GameCautiousMapMovementMessage;

class GameMapMovementRequestMessage extends ProtocolMessage {
    constructor(keyMovements, mapId) {
        super(950);
        this.keyMovements = keyMovements;
        this.mapId = mapId;
    }

    serialize() {
        this.buffer.writeShort(this.keyMovements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.keyMovements.length) {
            if (this.keyMovements[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.keyMovements[_loc2_] + ") on element 1 (starting at 1) of keyMovements.");
            }
            this.buffer.writeShort(this.keyMovements[_loc2_]);
            _loc2_++;
        }
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of keyMovements.");
            }
            this.keyMovements.push(_loc4_);
            _loc3_++;
        }
        this._mapIdFunc(buffer);
    }
};
module.exports.GameMapMovementRequestMessage = GameMapMovementRequestMessage;
module.exports.messages[950] = GameMapMovementRequestMessage;

class GameCautiousMapMovementRequestMessage extends GameMapMovementRequestMessage {
    constructor(keyMovements, mapId) {
        super(keyMovements, mapId);
        this.messageId = 6496;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GameCautiousMapMovementRequestMessage = GameCautiousMapMovementRequestMessage;
module.exports.messages[6496] = GameCautiousMapMovementRequestMessage;

class GameContextCreateErrorMessage extends ProtocolMessage {
    constructor() {
        super(6024);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameContextCreateErrorMessage = GameContextCreateErrorMessage;
module.exports.messages[6024] = GameContextCreateErrorMessage;

class GameContextCreateMessage extends ProtocolMessage {
    constructor(context) {
        super(200);
        this.context = context;
    }

    serialize() {
        this.buffer.writeByte(this.context);
    }

    deserialize(buffer) {
        this.context = buffer.readByte();
        if (this.context < 0) {
            throw new Error("Forbidden value (" + this.context + ") on element of GameContextCreateMessage.context.");
        }
    }
};
module.exports.GameContextCreateMessage = GameContextCreateMessage;
module.exports.messages[200] = GameContextCreateMessage;

class GameContextCreateRequestMessage extends ProtocolMessage {
    constructor() {
        super(250);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameContextCreateRequestMessage = GameContextCreateRequestMessage;
module.exports.messages[250] = GameContextCreateRequestMessage;

class GameContextDestroyMessage extends ProtocolMessage {
    constructor() {
        super(201);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameContextDestroyMessage = GameContextDestroyMessage;
module.exports.messages[201] = GameContextDestroyMessage;

class GameContextKickMessage extends ProtocolMessage {
    constructor(targetId) {
        super(6081);
        this.targetId = targetId;
    }

    serialize() {
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }

    deserialize(buffer) {
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameContextKickMessage.targetId.");
        }
    }
};
module.exports.GameContextKickMessage = GameContextKickMessage;
module.exports.messages[6081] = GameContextKickMessage;

class GameContextMoveElementMessage extends ProtocolMessage {
    constructor(movement) {
        super(253);
        this.movement = movement;
    }

    serialize() {
        this.movement.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.movement = new EntityMovementInformations();
        this.movement.deserialize(buffer);
    }
};
module.exports.GameContextMoveElementMessage = GameContextMoveElementMessage;
module.exports.messages[253] = GameContextMoveElementMessage;

class GameContextMoveMultipleElementsMessage extends ProtocolMessage {
    constructor(movements) {
        super(254);
        this.movements = movements;
    }

    serialize() {
        this.buffer.writeShort(this.movements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.movements.length) {
            (this.movements[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new EntityMovementInformations();
            _loc4_.deserialize(buffer);
            this.movements.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameContextMoveMultipleElementsMessage = GameContextMoveMultipleElementsMessage;
module.exports.messages[254] = GameContextMoveMultipleElementsMessage;

class GameContextQuitMessage extends ProtocolMessage {
    constructor() {
        super(255);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameContextQuitMessage = GameContextQuitMessage;
module.exports.messages[255] = GameContextQuitMessage;

class GameContextReadyMessage extends ProtocolMessage {
    constructor(mapId) {
        super(6071);
        this.mapId = mapId;
    }

    serialize() {
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }

    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element of GameContextReadyMessage.mapId.");
        }
    }
};
module.exports.GameContextReadyMessage = GameContextReadyMessage;
module.exports.messages[6071] = GameContextReadyMessage;

class GameContextRefreshEntityLookMessage extends ProtocolMessage {
    constructor(id, look) {
        super(5637);
        this.id = id;
        this.look = look;
    }

    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        this.look.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of GameContextRefreshEntityLookMessage.id.");
        }
        this.look = new EntityLook();
        this.look.deserialize(buffer);
    }
};
module.exports.GameContextRefreshEntityLookMessage = GameContextRefreshEntityLookMessage;
module.exports.messages[5637] = GameContextRefreshEntityLookMessage;

class GameContextRemoveElementMessage extends ProtocolMessage {
    constructor(id) {
        super(251);
        this.id = id;
    }

    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of GameContextRemoveElementMessage.id.");
        }
    }
};
module.exports.GameContextRemoveElementMessage = GameContextRemoveElementMessage;
module.exports.messages[251] = GameContextRemoveElementMessage;

class GameContextRemoveElementWithEventMessage extends GameContextRemoveElementMessage {
    constructor(id, elementEventId) {
        super(id);
        this.elementEventId = elementEventId;
        this.messageId = 6412;
    }

    serialize() {
        super.serialize();
        if (this.elementEventId < 0) {
            throw new Error("Forbidden value (" + this.elementEventId + ") on element elementEventId.");
        }
        this.buffer.writeByte(this.elementEventId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.elementEventId = buffer.readByte();
        if (this.elementEventId < 0) {
            throw new Error("Forbidden value (" + this.elementEventId + ") on element of GameContextRemoveElementWithEventMessage.elementEventId.");
        }
    }
};
module.exports.GameContextRemoveElementWithEventMessage = GameContextRemoveElementWithEventMessage;
module.exports.messages[6412] = GameContextRemoveElementWithEventMessage;

class GameContextRemoveMultipleElementsMessage extends ProtocolMessage {
    constructor(elementsIds) {
        super(252);
        this.elementsIds = elementsIds;
    }

    serialize() {
        this.buffer.writeShort(this.elementsIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.elementsIds.length) {
            if (this.elementsIds[_loc2_] < -9007199254740990 || this.elementsIds[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.elementsIds[_loc2_] + ") on element 1 (starting at 1) of elementsIds.");
            }
            this.buffer.writeDouble(this.elementsIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = NaN;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readDouble();
            if (_loc4_ < -9007199254740990 || _loc4_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of elementsIds.");
            }
            this.elementsIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameContextRemoveMultipleElementsMessage = GameContextRemoveMultipleElementsMessage;
module.exports.messages[252] = GameContextRemoveMultipleElementsMessage;

class GameContextRemoveMultipleElementsWithEventsMessage extends GameContextRemoveMultipleElementsMessage {
    constructor(elementsIds, elementEventIds) {
        super(elementsIds);
        this.elementEventIds = elementEventIds;
        this.messageId = 6416;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.elementEventIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.elementEventIds.length) {
            if (this.elementEventIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.elementEventIds[_loc2_] + ") on element 1 (starting at 1) of elementEventIds.");
            }
            this.buffer.writeByte(this.elementEventIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of elementEventIds.");
            }
            this.elementEventIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameContextRemoveMultipleElementsWithEventsMessage = GameContextRemoveMultipleElementsWithEventsMessage;
module.exports.messages[6416] = GameContextRemoveMultipleElementsWithEventsMessage;

class GameEntitiesDispositionMessage extends ProtocolMessage {
    constructor(dispositions) {
        super(5696);
        this.dispositions = dispositions;
    }

    serialize() {
        this.buffer.writeShort(this.dispositions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dispositions.length) {
            (this.dispositions[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new IdentifiedEntityDispositionInformations();
            _loc4_.deserialize(buffer);
            this.dispositions.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameEntitiesDispositionMessage = GameEntitiesDispositionMessage;
module.exports.messages[5696] = GameEntitiesDispositionMessage;

class GameEntityDispositionErrorMessage extends ProtocolMessage {
    constructor() {
        super(5695);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameEntityDispositionErrorMessage = GameEntityDispositionErrorMessage;
module.exports.messages[5695] = GameEntityDispositionErrorMessage;

class GameEntityDispositionMessage extends ProtocolMessage {
    constructor(disposition) {
        super(5693);
        this.disposition = disposition;
    }

    serialize() {
        this.disposition.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.disposition = new IdentifiedEntityDispositionInformations();
        this.disposition.deserialize(buffer);
    }
};
module.exports.GameEntityDispositionMessage = GameEntityDispositionMessage;
module.exports.messages[5693] = GameEntityDispositionMessage;

class GameMapChangeOrientationMessage extends ProtocolMessage {
    constructor(orientation) {
        super(946);
        this.orientation = orientation;
    }

    serialize() {
        this.orientation.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.orientation = new ActorOrientation();
        this.orientation.deserialize(buffer);
    }
};
module.exports.GameMapChangeOrientationMessage = GameMapChangeOrientationMessage;
module.exports.messages[946] = GameMapChangeOrientationMessage;

class GameMapChangeOrientationRequestMessage extends ProtocolMessage {
    constructor(direction) {
        super(945);
        this.direction = direction;
    }

    serialize() {
        this.buffer.writeByte(this.direction);
    }

    deserialize(buffer) {
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            throw new Error("Forbidden value (" + this.direction + ") on element of GameMapChangeOrientationRequestMessage.direction.");
        }
    }
};
module.exports.GameMapChangeOrientationRequestMessage = GameMapChangeOrientationRequestMessage;
module.exports.messages[945] = GameMapChangeOrientationRequestMessage;

class GameMapChangeOrientationsMessage extends ProtocolMessage {
    constructor(orientations) {
        super(6155);
        this.orientations = orientations;
    }

    serialize() {
        this.buffer.writeShort(this.orientations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.orientations.length) {
            (this.orientations[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ActorOrientation();
            _loc4_.deserialize(buffer);
            this.orientations.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameMapChangeOrientationsMessage = GameMapChangeOrientationsMessage;
module.exports.messages[6155] = GameMapChangeOrientationsMessage;

class GameMapMovementCancelMessage extends ProtocolMessage {
    constructor(cellId) {
        super(953);
        this.cellId = cellId;
    }

    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }

    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of GameMapMovementCancelMessage.cellId.");
        }
    }
};
module.exports.GameMapMovementCancelMessage = GameMapMovementCancelMessage;
module.exports.messages[953] = GameMapMovementCancelMessage;

class GameMapMovementConfirmMessage extends ProtocolMessage {
    constructor(mapId, characterId) {
        super(952);
        this.mapId = mapId;
        this.characterId = characterId;
    }

    serialize() {
        this.buffer.writeInt(this.mapId);
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }

    deserialize(buffer) {
        this.mapId = buffer.readInt();
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element of GameMapMovementConfirmMessage.characterId.");
        }
    }
};
module.exports.GameMapMovementConfirmMessage = GameMapMovementConfirmMessage;
module.exports.messages[952] = GameMapMovementConfirmMessage;

class GameMapNoMovementMessage extends ProtocolMessage {
    constructor(cellX, cellY) {
        super(954);
        this.cellX = cellX;
        this.cellY = cellY;
    }

    serialize() {
        this.buffer.writeShort(this.cellX);
        this.buffer.writeShort(this.cellY);
    }

    deserialize(buffer) {
        this.cellX = buffer.readShort();
        this.cellY = buffer.readShort();;
    }
};
module.exports.GameMapNoMovementMessage = GameMapNoMovementMessage;
module.exports.messages[954] = GameMapNoMovementMessage;

class GameRefreshMonsterBoostsMessage extends ProtocolMessage {
    constructor(monsterBoosts, familyBoosts) {
        super(6618);
        this.monsterBoosts = monsterBoosts;
        this.familyBoosts = familyBoosts;
    }

    serialize() {
        this.buffer.writeShort(this.monsterBoosts.length);
        var _loc2_ = 0;
        while (_loc2_ < this.monsterBoosts.length) {
            (this.monsterBoosts[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.familyBoosts.length);
        var _loc3_ = 0;
        while (_loc3_ < this.familyBoosts.length) {
            (this.familyBoosts[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new MonsterBoosts();
            _loc6_.deserialize(buffer);
            this.monsterBoosts.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new MonsterBoosts();
            _loc7_.deserialize(buffer);
            this.familyBoosts.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.GameRefreshMonsterBoostsMessage = GameRefreshMonsterBoostsMessage;
module.exports.messages[6618] = GameRefreshMonsterBoostsMessage;

class GameDataPaddockObjectAddMessage extends ProtocolMessage {
    constructor(paddockItemDescription) {
        super(5990);
        this.paddockItemDescription = paddockItemDescription;
    }

    serialize() {
        this.paddockItemDescription.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.paddockItemDescription = new PaddockItem();
        this.paddockItemDescription.deserialize(buffer);
    }
};
module.exports.GameDataPaddockObjectAddMessage = GameDataPaddockObjectAddMessage;
module.exports.messages[5990] = GameDataPaddockObjectAddMessage;

class GameDataPaddockObjectListAddMessage extends ProtocolMessage {
    constructor(paddockItemDescription) {
        super(5992);
        this.paddockItemDescription = paddockItemDescription;
    }

    serialize() {
        this.buffer.writeShort(this.paddockItemDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.paddockItemDescription.length) {
            (this.paddockItemDescription[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PaddockItem();
            _loc4_.deserialize(buffer);
            this.paddockItemDescription.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameDataPaddockObjectListAddMessage = GameDataPaddockObjectListAddMessage;
module.exports.messages[5992] = GameDataPaddockObjectListAddMessage;

class GameDataPaddockObjectRemoveMessage extends ProtocolMessage {
    constructor(cellId) {
        super(5993);
        this.cellId = cellId;
    }

    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }

    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of GameDataPaddockObjectRemoveMessage.cellId.");
        }
    }
};
module.exports.GameDataPaddockObjectRemoveMessage = GameDataPaddockObjectRemoveMessage;
module.exports.messages[5993] = GameDataPaddockObjectRemoveMessage;

class MountDataErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6172);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of MountDataErrorMessage.reason.");
        }
    }
};
module.exports.MountDataErrorMessage = MountDataErrorMessage;
module.exports.messages[6172] = MountDataErrorMessage;

class MountDataMessage extends ProtocolMessage {
    constructor(mountData) {
        super(5973);
        this.mountData = mountData;
    }

    serialize() {
        this.mountData.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.mountData = new MountClientData();
        this.mountData.deserialize(buffer);
    }
};
module.exports.MountDataMessage = MountDataMessage;
module.exports.messages[5973] = MountDataMessage;

class MountEmoteIconUsedOkMessage extends ProtocolMessage {
    constructor(mountId, reactionType) {
        super(5978);
        this.mountId = mountId;
        this.reactionType = reactionType;
    }

    serialize() {
        this.buffer.writeVarInt(this.mountId);
        if (this.reactionType < 0) {
            throw new Error("Forbidden value (" + this.reactionType + ") on element reactionType.");
        }
        this.buffer.writeByte(this.reactionType);
    }

    deserialize(buffer) {
        this.mountId = buffer.readVarInt();
        this.reactionType = buffer.readByte();
        if (this.reactionType < 0) {
            throw new Error("Forbidden value (" + this.reactionType + ") on element of MountEmoteIconUsedOkMessage.reactionType.");
        }
    }
};
module.exports.MountEmoteIconUsedOkMessage = MountEmoteIconUsedOkMessage;
module.exports.messages[5978] = MountEmoteIconUsedOkMessage;

class MountEquipedErrorMessage extends ProtocolMessage {
    constructor(errorType) {
        super(5963);
        this.errorType = errorType;
    }

    serialize() {
        this.buffer.writeByte(this.errorType);
    }

    deserialize(buffer) {
        this.errorType = buffer.readByte();
        if (this.errorType < 0) {
            throw new Error("Forbidden value (" + this.errorType + ") on element of MountEquipedErrorMessage.errorType.");
        }
    }
};
module.exports.MountEquipedErrorMessage = MountEquipedErrorMessage;
module.exports.messages[5963] = MountEquipedErrorMessage;

class MountFeedRequestMessage extends ProtocolMessage {
    constructor(mountUid, mountLocation, mountFoodUid, quantity) {
        super(6189);
        this.mountUid = mountUid;
        this.mountLocation = mountLocation;
        this.mountFoodUid = mountFoodUid;
        this.quantity = quantity;
    }

    serialize() {
        if (this.mountUid < 0) {
            throw new Error("Forbidden value (" + this.mountUid + ") on element mountUid.");
        }
        this.buffer.writeVarInt(this.mountUid);
        this.buffer.writeByte(this.mountLocation);
        if (this.mountFoodUid < 0) {
            throw new Error("Forbidden value (" + this.mountFoodUid + ") on element mountFoodUid.");
        }
        this.buffer.writeVarInt(this.mountFoodUid);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        this.mountUid = buffer.readVarUhInt();
        if (this.mountUid < 0) {
            throw new Error("Forbidden value (" + this.mountUid + ") on element of MountFeedRequestMessage.mountUid.");
        }
        this.mountLocation = buffer.readByte();
        this.mountFoodUid = buffer.readVarUhInt();
        if (this.mountFoodUid < 0) {
            throw new Error("Forbidden value (" + this.mountFoodUid + ") on element of MountFeedRequestMessage.mountFoodUid.");
        };
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of MountFeedRequestMessage.quantity.");
        };
    }
};
module.exports.MountFeedRequestMessage = MountFeedRequestMessage;
module.exports.messages[6189] = MountFeedRequestMessage;

class MountHarnessColorsUpdateRequestMessage extends ProtocolMessage {
    constructor(useHarnessColors) {
        super(6697);
        this.useHarnessColors = useHarnessColors;
    }

    serialize() {
        this.buffer.writeBoolean(this.useHarnessColors);
    }

    deserialize(buffer) {
        this.useHarnessColors = buffer.readBoolean();
    }
};
module.exports.MountHarnessColorsUpdateRequestMessage = MountHarnessColorsUpdateRequestMessage;
module.exports.messages[6697] = MountHarnessColorsUpdateRequestMessage;

class MountHarnessDissociateRequestMessage extends ProtocolMessage {
    constructor() {
        super(6696);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.MountHarnessDissociateRequestMessage = MountHarnessDissociateRequestMessage;
module.exports.messages[6696] = MountHarnessDissociateRequestMessage;

class MountInformationInPaddockRequestMessage extends ProtocolMessage {
    constructor(mapRideId) {
        super(5975);
        this.mapRideId = mapRideId;
    }

    serialize() {
        this.buffer.writeVarInt(this.mapRideId);
    }

    deserialize(buffer) {
        this.mapRideId = buffer.readVarInt();
    }
};
module.exports.MountInformationInPaddockRequestMessage = MountInformationInPaddockRequestMessage;
module.exports.messages[5975] = MountInformationInPaddockRequestMessage;

class MountInformationRequestMessage extends ProtocolMessage {
    constructor(id, time) {
        super(5972);
        this.id = id;
        this.time = time;
    }

    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        if (this.time < -9007199254740990 || this.time > 9007199254740990) {
            throw new Error("Forbidden value (" + this.time + ") on element time.");
        }
        this.buffer.writeDouble(this.time);
    }

    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of MountInformationRequestMessage.id.");
        }
        this.time = buffer.readDouble();
        if (this.time < -9007199254740990 || this.time > 9007199254740990) {
            throw new Error("Forbidden value (" + this.time + ") on element of MountInformationRequestMessage.time.");
        };
    }
};
module.exports.MountInformationRequestMessage = MountInformationRequestMessage;
module.exports.messages[5972] = MountInformationRequestMessage;

class MountReleasedMessage extends ProtocolMessage {
    constructor(mountId) {
        super(6308);
        this.mountId = mountId;
    }

    serialize() {
        this.buffer.writeVarInt(this.mountId);
    }

    deserialize(buffer) {
        this.mountId = buffer.readVarInt();
    }
};
module.exports.MountReleasedMessage = MountReleasedMessage;
module.exports.messages[6308] = MountReleasedMessage;

class MountReleaseRequestMessage extends ProtocolMessage {
    constructor() {
        super(5980);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.MountReleaseRequestMessage = MountReleaseRequestMessage;
module.exports.messages[5980] = MountReleaseRequestMessage;

class MountRenamedMessage extends ProtocolMessage {
    constructor(mountId, name) {
        super(5983);
        this.mountId = mountId;
        this.name = name;
    }

    serialize() {
        this.buffer.writeVarInt(this.mountId);
        this.buffer.writeUTF(this.name);
    }

    deserialize(buffer) {
        this.mountId = buffer.readVarInt();
        this.name = buffer.readUTF();;
    }
};
module.exports.MountRenamedMessage = MountRenamedMessage;
module.exports.messages[5983] = MountRenamedMessage;

class MountRenameRequestMessage extends ProtocolMessage {
    constructor(name, mountId) {
        super(5987);
        this.name = name;
        this.mountId = mountId;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
        this.buffer.writeVarInt(this.mountId);
    }

    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.mountId = buffer.readVarInt();;
    }
};
module.exports.MountRenameRequestMessage = MountRenameRequestMessage;
module.exports.messages[5987] = MountRenameRequestMessage;

class MountRidingMessage extends ProtocolMessage {
    constructor(isRiding) {
        super(5967);
        this.isRiding = isRiding;
    }

    serialize() {
        this.buffer.writeBoolean(this.isRiding);
    }

    deserialize(buffer) {
        this.isRiding = buffer.readBoolean();
    }
};
module.exports.MountRidingMessage = MountRidingMessage;
module.exports.messages[5967] = MountRidingMessage;

class MountSetMessage extends ProtocolMessage {
    constructor(mountData) {
        super(5968);
        this.mountData = mountData;
    }

    serialize() {
        this.mountData.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.mountData = new MountClientData();
        this.mountData.deserialize(buffer);
    }
};
module.exports.MountSetMessage = MountSetMessage;
module.exports.messages[5968] = MountSetMessage;

class MountSetXpRatioRequestMessage extends ProtocolMessage {
    constructor(xpRatio) {
        super(5989);
        this.xpRatio = xpRatio;
    }

    serialize() {
        if (this.xpRatio < 0) {
            throw new Error("Forbidden value (" + this.xpRatio + ") on element xpRatio.");
        }
        this.buffer.writeByte(this.xpRatio);
    }

    deserialize(buffer) {
        this.xpRatio = buffer.readByte();
        if (this.xpRatio < 0) {
            throw new Error("Forbidden value (" + this.xpRatio + ") on element of MountSetXpRatioRequestMessage.xpRatio.");
        }
    }
};
module.exports.MountSetXpRatioRequestMessage = MountSetXpRatioRequestMessage;
module.exports.messages[5989] = MountSetXpRatioRequestMessage;

class MountSterilizedMessage extends ProtocolMessage {
    constructor(mountId) {
        super(5977);
        this.mountId = mountId;
    }

    serialize() {
        this.buffer.writeVarInt(this.mountId);
    }

    deserialize(buffer) {
        this.mountId = buffer.readVarInt();
    }
};
module.exports.MountSterilizedMessage = MountSterilizedMessage;
module.exports.messages[5977] = MountSterilizedMessage;

class MountSterilizeRequestMessage extends ProtocolMessage {
    constructor() {
        super(5962);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.MountSterilizeRequestMessage = MountSterilizeRequestMessage;
module.exports.messages[5962] = MountSterilizeRequestMessage;

class MountToggleRidingRequestMessage extends ProtocolMessage {
    constructor() {
        super(5976);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.MountToggleRidingRequestMessage = MountToggleRidingRequestMessage;
module.exports.messages[5976] = MountToggleRidingRequestMessage;

class MountUnSetMessage extends ProtocolMessage {
    constructor() {
        super(5982);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.MountUnSetMessage = MountUnSetMessage;
module.exports.messages[5982] = MountUnSetMessage;

class MountXpRatioMessage extends ProtocolMessage {
    constructor(ratio) {
        super(5970);
        this.ratio = ratio;
    }

    serialize() {
        if (this.ratio < 0) {
            throw new Error("Forbidden value (" + this.ratio + ") on element ratio.");
        }
        this.buffer.writeByte(this.ratio);
    }

    deserialize(buffer) {
        this.ratio = buffer.readByte();
        if (this.ratio < 0) {
            throw new Error("Forbidden value (" + this.ratio + ") on element of MountXpRatioMessage.ratio.");
        }
    }
};
module.exports.MountXpRatioMessage = MountXpRatioMessage;
module.exports.messages[5970] = MountXpRatioMessage;

class PaddockBuyRequestMessage extends ProtocolMessage {
    constructor(proposedPrice) {
        super(5951);
        this.proposedPrice = proposedPrice;
    }

    serialize() {
        if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.proposedPrice + ") on element proposedPrice.");
        }
        this.buffer.writeVarLong(this.proposedPrice);
    }

    deserialize(buffer) {
        this.proposedPrice = buffer.readVarUhLong();
        if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.proposedPrice + ") on element of PaddockBuyRequestMessage.proposedPrice.");
        }
    }
};
module.exports.PaddockBuyRequestMessage = PaddockBuyRequestMessage;
module.exports.messages[5951] = PaddockBuyRequestMessage;

class PaddockBuyResultMessage extends ProtocolMessage {
    constructor(paddockId, bought, realPrice) {
        super(6516);
        this.paddockId = paddockId;
        this.bought = bought;
        this.realPrice = realPrice;
    }

    serialize() {
        this.buffer.writeInt(this.paddockId);
        this.buffer.writeBoolean(this.bought);
        if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.realPrice + ") on element realPrice.");
        }
        this.buffer.writeVarLong(this.realPrice);
    }

    deserialize(buffer) {
        this.paddockId = buffer.readInt();
        this.bought = buffer.readBoolean();;
        this.realPrice = buffer.readVarUhLong();
        if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.realPrice + ") on element of PaddockBuyResultMessage.realPrice.");
        }
    }
};
module.exports.PaddockBuyResultMessage = PaddockBuyResultMessage;
module.exports.messages[6516] = PaddockBuyResultMessage;

class PaddockMoveItemRequestMessage extends ProtocolMessage {
    constructor(oldCellId, newCellId) {
        super(6052);
        this.oldCellId = oldCellId;
        this.newCellId = newCellId;
    }

    serialize() {
        if (this.oldCellId < 0 || this.oldCellId > 559) {
            throw new Error("Forbidden value (" + this.oldCellId + ") on element oldCellId.");
        }
        this.buffer.writeVarShort(this.oldCellId);
        if (this.newCellId < 0 || this.newCellId > 559) {
            throw new Error("Forbidden value (" + this.newCellId + ") on element newCellId.");
        }
        this.buffer.writeVarShort(this.newCellId);
    }

    deserialize(buffer) {
        this.oldCellId = buffer.readVarUhShort();
        if (this.oldCellId < 0 || this.oldCellId > 559) {
            throw new Error("Forbidden value (" + this.oldCellId + ") on element of PaddockMoveItemRequestMessage.oldCellId.");
        }
        this.newCellId = buffer.readVarUhShort();
        if (this.newCellId < 0 || this.newCellId > 559) {
            throw new Error("Forbidden value (" + this.newCellId + ") on element of PaddockMoveItemRequestMessage.newCellId.");
        };
    }
};
module.exports.PaddockMoveItemRequestMessage = PaddockMoveItemRequestMessage;
module.exports.messages[6052] = PaddockMoveItemRequestMessage;

class PaddockRemoveItemRequestMessage extends ProtocolMessage {
    constructor(cellId) {
        super(5958);
        this.cellId = cellId;
    }

    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }

    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of PaddockRemoveItemRequestMessage.cellId.");
        }
    }
};
module.exports.PaddockRemoveItemRequestMessage = PaddockRemoveItemRequestMessage;
module.exports.messages[5958] = PaddockRemoveItemRequestMessage;

class PaddockSellRequestMessage extends ProtocolMessage {
    constructor(price, forSale) {
        super(5953);
        this.price = price;
        this.forSale = forSale;
    }

    serialize() {
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarLong(this.price);
        this.buffer.writeBoolean(this.forSale);
    }

    deserialize(buffer) {
        this.price = buffer.readVarUhLong();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element of PaddockSellRequestMessage.price.");
        }
        this.forSale = buffer.readBoolean();
    }
};
module.exports.PaddockSellRequestMessage = PaddockSellRequestMessage;
module.exports.messages[5953] = PaddockSellRequestMessage;

class NotificationByServerMessage extends ProtocolMessage {
    constructor(id, parameters, forceOpen) {
        super(6103);
        this.id = id;
        this.parameters = parameters;
        this.forceOpen = forceOpen;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
        this.buffer.writeShort(this.parameters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parameters.length) {
            this.buffer.writeUTF(this.parameters[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeBoolean(this.forceOpen);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of NotificationByServerMessage.id.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.parameters.push(_loc4_);
            _loc3_++;
        }
        this._forceOpenFunc(buffer);
    }
};
module.exports.NotificationByServerMessage = NotificationByServerMessage;
module.exports.messages[6103] = NotificationByServerMessage;

class NotificationListMessage extends ProtocolMessage {
    constructor(flags) {
        super(6087);
        this.flags = flags;
    }

    serialize() {
        this.buffer.writeShort(this.flags.length);
        var _loc2_ = 0;
        while (_loc2_ < this.flags.length) {
            this.buffer.writeVarInt(this.flags[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarInt();
            this.flags.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.NotificationListMessage = NotificationListMessage;
module.exports.messages[6087] = NotificationListMessage;

class NotificationResetMessage extends ProtocolMessage {
    constructor() {
        super(6089);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.NotificationResetMessage = NotificationResetMessage;
module.exports.messages[6089] = NotificationResetMessage;

class NotificationUpdateFlagMessage extends ProtocolMessage {
    constructor(index) {
        super(6090);
        this.index = index;
    }

    serialize() {
        if (this.index < 0) {
            throw new Error("Forbidden value (" + this.index + ") on element index.");
        }
        this.buffer.writeVarShort(this.index);
    }

    deserialize(buffer) {
        this.index = buffer.readVarUhShort();
        if (this.index < 0) {
            throw new Error("Forbidden value (" + this.index + ") on element of NotificationUpdateFlagMessage.index.");
        }
    }
};
module.exports.NotificationUpdateFlagMessage = NotificationUpdateFlagMessage;
module.exports.messages[6090] = NotificationUpdateFlagMessage;

class ChangeMapMessage extends ProtocolMessage {
    constructor(mapId) {
        super(221);
        this.mapId = mapId;
    }

    serialize() {
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }

    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element of ChangeMapMessage.mapId.");
        }
    }
};
module.exports.ChangeMapMessage = ChangeMapMessage;
module.exports.messages[221] = ChangeMapMessage;

class CurrentMapMessage extends ProtocolMessage {
    constructor(mapId, mapKey) {
        super(220);
        this.mapId = mapId;
        this.mapKey = mapKey;
    }

    serialize() {
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
        this.buffer.writeUTF(this.mapKey);
    }

    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element of CurrentMapMessage.mapId.");
        }
        this.mapKey = buffer.readUTF();
    }
};
module.exports.CurrentMapMessage = CurrentMapMessage;
module.exports.messages[220] = CurrentMapMessage;

class GameRolePlayFreeSoulRequestMessage extends ProtocolMessage {
    constructor() {
        super(745);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameRolePlayFreeSoulRequestMessage = GameRolePlayFreeSoulRequestMessage;
module.exports.messages[745] = GameRolePlayFreeSoulRequestMessage;

class GameRolePlayGameOverMessage extends ProtocolMessage {
    constructor() {
        super(746);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameRolePlayGameOverMessage = GameRolePlayGameOverMessage;
module.exports.messages[746] = GameRolePlayGameOverMessage;

class GameRolePlayPlayerLifeStatusMessage extends ProtocolMessage {
    constructor(state, phenixMapId) {
        super(5996);
        this.state = state;
        this.phenixMapId = phenixMapId;
    }

    serialize() {
        this.buffer.writeByte(this.state);
        if (this.phenixMapId < 0) {
            throw new Error("Forbidden value (" + this.phenixMapId + ") on element phenixMapId.");
        }
        this.buffer.writeInt(this.phenixMapId);
    }

    deserialize(buffer) {
        this.state = buffer.readByte();
        if (this.state < 0) {
            throw new Error("Forbidden value (" + this.state + ") on element of GameRolePlayPlayerLifeStatusMessage.state.");
        }
        this.phenixMapId = buffer.readInt();
        if (this.phenixMapId < 0) {
            throw new Error("Forbidden value (" + this.phenixMapId + ") on element of GameRolePlayPlayerLifeStatusMessage.phenixMapId.");
        };
    }
};
module.exports.GameRolePlayPlayerLifeStatusMessage = GameRolePlayPlayerLifeStatusMessage;
module.exports.messages[5996] = GameRolePlayPlayerLifeStatusMessage;

class WarnOnPermaDeathMessage extends ProtocolMessage {
    constructor(enable) {
        super(6512);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.WarnOnPermaDeathMessage = WarnOnPermaDeathMessage;
module.exports.messages[6512] = WarnOnPermaDeathMessage;

class GameRolePlayDelayedActionFinishedMessage extends ProtocolMessage {
    constructor(delayedCharacterId, delayTypeId) {
        super(6150);
        this.delayedCharacterId = delayedCharacterId;
        this.delayTypeId = delayTypeId;
    }

    serialize() {
        if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element delayedCharacterId.");
        }
        this.buffer.writeDouble(this.delayedCharacterId);
        this.buffer.writeByte(this.delayTypeId);
    }

    deserialize(buffer) {
        this.delayedCharacterId = buffer.readDouble();
        if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element of GameRolePlayDelayedActionFinishedMessage.delayedCharacterId.");
        }
        this.delayTypeId = buffer.readByte();
        if (this.delayTypeId < 0) {
            throw new Error("Forbidden value (" + this.delayTypeId + ") on element of GameRolePlayDelayedActionFinishedMessage.delayTypeId.");
        };
    }
};
module.exports.GameRolePlayDelayedActionFinishedMessage = GameRolePlayDelayedActionFinishedMessage;
module.exports.messages[6150] = GameRolePlayDelayedActionFinishedMessage;

class GameRolePlayDelayedActionMessage extends ProtocolMessage {
    constructor(delayedCharacterId, delayTypeId, delayEndTime) {
        super(6153);
        this.delayedCharacterId = delayedCharacterId;
        this.delayTypeId = delayTypeId;
        this.delayEndTime = delayEndTime;
    }

    serialize() {
        if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element delayedCharacterId.");
        }
        this.buffer.writeDouble(this.delayedCharacterId);
        this.buffer.writeByte(this.delayTypeId);
        if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.delayEndTime + ") on element delayEndTime.");
        }
        this.buffer.writeDouble(this.delayEndTime);
    }

    deserialize(buffer) {
        this.delayedCharacterId = buffer.readDouble();
        if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element of GameRolePlayDelayedActionMessage.delayedCharacterId.");
        }
        this.delayTypeId = buffer.readByte();
        if (this.delayTypeId < 0) {
            throw new Error("Forbidden value (" + this.delayTypeId + ") on element of GameRolePlayDelayedActionMessage.delayTypeId.");
        };
        this.delayEndTime = buffer.readDouble();
        if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.delayEndTime + ") on element of GameRolePlayDelayedActionMessage.delayEndTime.");
        };
    }
};
module.exports.GameRolePlayDelayedActionMessage = GameRolePlayDelayedActionMessage;
module.exports.messages[6153] = GameRolePlayDelayedActionMessage;

class GameRolePlayDelayedObjectUseMessage extends GameRolePlayDelayedActionMessage {
    constructor(delayedCharacterId, delayTypeId, delayEndTime, objectGID) {
        super(delayedCharacterId, delayTypeId, delayEndTime);
        this.objectGID = objectGID;
        this.messageId = 6425;
    }

    serialize() {
        super.serialize();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of GameRolePlayDelayedObjectUseMessage.objectGID.");
        }
    }
};
module.exports.GameRolePlayDelayedObjectUseMessage = GameRolePlayDelayedObjectUseMessage;
module.exports.messages[6425] = GameRolePlayDelayedObjectUseMessage;

class ComicReadingBeginMessage extends ProtocolMessage {
    constructor(comicId) {
        super(6536);
        this.comicId = comicId;
    }

    serialize() {
        if (this.comicId < 0) {
            throw new Error("Forbidden value (" + this.comicId + ") on element comicId.");
        }
        this.buffer.writeVarShort(this.comicId);
    }

    deserialize(buffer) {
        this.comicId = buffer.readVarUhShort();
        if (this.comicId < 0) {
            throw new Error("Forbidden value (" + this.comicId + ") on element of ComicReadingBeginMessage.comicId.");
        }
    }
};
module.exports.ComicReadingBeginMessage = ComicReadingBeginMessage;
module.exports.messages[6536] = ComicReadingBeginMessage;

class DocumentReadingBeginMessage extends ProtocolMessage {
    constructor(documentId) {
        super(5675);
        this.documentId = documentId;
    }

    serialize() {
        if (this.documentId < 0) {
            throw new Error("Forbidden value (" + this.documentId + ") on element documentId.");
        }
        this.buffer.writeVarShort(this.documentId);
    }

    deserialize(buffer) {
        this.documentId = buffer.readVarUhShort();
        if (this.documentId < 0) {
            throw new Error("Forbidden value (" + this.documentId + ") on element of DocumentReadingBeginMessage.documentId.");
        }
    }
};
module.exports.DocumentReadingBeginMessage = DocumentReadingBeginMessage;
module.exports.messages[5675] = DocumentReadingBeginMessage;

class EmoteAddMessage extends ProtocolMessage {
    constructor(emoteId) {
        super(5644);
        this.emoteId = emoteId;
    }

    serialize() {
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
    }

    deserialize(buffer) {
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element of EmoteAddMessage.emoteId.");
        }
    }
};
module.exports.EmoteAddMessage = EmoteAddMessage;
module.exports.messages[5644] = EmoteAddMessage;

class EmoteListMessage extends ProtocolMessage {
    constructor(emoteIds) {
        super(5689);
        this.emoteIds = emoteIds;
    }

    serialize() {
        this.buffer.writeShort(this.emoteIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.emoteIds.length) {
            if (this.emoteIds[_loc2_] < 0 || this.emoteIds[_loc2_] > 255) {
                throw new Error("Forbidden value (" + this.emoteIds[_loc2_] + ") on element 1 (starting at 1) of emoteIds.");
            }
            this.buffer.writeByte(this.emoteIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedByte();
            if (_loc4_ < 0 || _loc4_ > 255) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of emoteIds.");
            }
            this.emoteIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.EmoteListMessage = EmoteListMessage;
module.exports.messages[5689] = EmoteListMessage;

class EmotePlayAbstractMessage extends ProtocolMessage {
    constructor(emoteId, emoteStartTime) {
        super(5690);
        this.emoteId = emoteId;
        this.emoteStartTime = emoteStartTime;
    }

    serialize() {
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
        if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.emoteStartTime + ") on element emoteStartTime.");
        }
        this.buffer.writeDouble(this.emoteStartTime);
    }

    deserialize(buffer) {
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element of EmotePlayAbstractMessage.emoteId.");
        }
        this.emoteStartTime = buffer.readDouble();
        if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
            throw new Error("Forbidden value (" + this.emoteStartTime + ") on element of EmotePlayAbstractMessage.emoteStartTime.");
        };
    }
};
module.exports.EmotePlayAbstractMessage = EmotePlayAbstractMessage;
module.exports.messages[5690] = EmotePlayAbstractMessage;

class EmotePlayErrorMessage extends ProtocolMessage {
    constructor(emoteId) {
        super(5688);
        this.emoteId = emoteId;
    }

    serialize() {
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
    }

    deserialize(buffer) {
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element of EmotePlayErrorMessage.emoteId.");
        }
    }
};
module.exports.EmotePlayErrorMessage = EmotePlayErrorMessage;
module.exports.messages[5688] = EmotePlayErrorMessage;

class EmotePlayMassiveMessage extends EmotePlayAbstractMessage {
    constructor(emoteId, emoteStartTime, actorIds) {
        super(emoteId, emoteStartTime);
        this.actorIds = actorIds;
        this.messageId = 5691;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.actorIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.actorIds.length) {
            if (this.actorIds[_loc2_] < -9007199254740990 || this.actorIds[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.actorIds[_loc2_] + ") on element 1 (starting at 1) of actorIds.");
            }
            this.buffer.writeDouble(this.actorIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = NaN;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readDouble();
            if (_loc4_ < -9007199254740990 || _loc4_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of actorIds.");
            }
            this.actorIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.EmotePlayMassiveMessage = EmotePlayMassiveMessage;
module.exports.messages[5691] = EmotePlayMassiveMessage;

class EmotePlayMessage extends EmotePlayAbstractMessage {
    constructor(emoteId, emoteStartTime, actorId, accountId) {
        super(emoteId, emoteStartTime);
        this.actorId = actorId;
        this.accountId = accountId;
        this.messageId = 5683;
    }

    serialize() {
        super.serialize();
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
        }
        this.buffer.writeDouble(this.actorId);
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.actorId = buffer.readDouble();
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.actorId + ") on element of EmotePlayMessage.actorId.");
        }
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of EmotePlayMessage.accountId.");
        };
    }
};
module.exports.EmotePlayMessage = EmotePlayMessage;
module.exports.messages[5683] = EmotePlayMessage;

class EmotePlayRequestMessage extends ProtocolMessage {
    constructor(emoteId) {
        super(5685);
        this.emoteId = emoteId;
    }

    serialize() {
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
    }

    deserialize(buffer) {
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element of EmotePlayRequestMessage.emoteId.");
        }
    }
};
module.exports.EmotePlayRequestMessage = EmotePlayRequestMessage;
module.exports.messages[5685] = EmotePlayRequestMessage;

class EmoteRemoveMessage extends ProtocolMessage {
    constructor(emoteId) {
        super(5687);
        this.emoteId = emoteId;
    }

    serialize() {
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
    }

    deserialize(buffer) {
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            throw new Error("Forbidden value (" + this.emoteId + ") on element of EmoteRemoveMessage.emoteId.");
        }
    }
};
module.exports.EmoteRemoveMessage = EmoteRemoveMessage;
module.exports.messages[5687] = EmoteRemoveMessage;

class ErrorMapNotFoundMessage extends ProtocolMessage {
    constructor(mapId) {
        super(6197);
        this.mapId = mapId;
    }

    serialize() {
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }

    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element of ErrorMapNotFoundMessage.mapId.");
        }
    }
};
module.exports.ErrorMapNotFoundMessage = ErrorMapNotFoundMessage;
module.exports.messages[6197] = ErrorMapNotFoundMessage;

class GameRolePlayArenaFightAnswerMessage extends ProtocolMessage {
    constructor(fightId, accept) {
        super(6279);
        this.fightId = fightId;
        this.accept = accept;
    }

    serialize() {
        this.buffer.writeInt(this.fightId);
        this.buffer.writeBoolean(this.accept);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.accept = buffer.readBoolean();;
    }
};
module.exports.GameRolePlayArenaFightAnswerMessage = GameRolePlayArenaFightAnswerMessage;
module.exports.messages[6279] = GameRolePlayArenaFightAnswerMessage;

class GameRolePlayArenaFighterStatusMessage extends ProtocolMessage {
    constructor(fightId, playerId, accepted) {
        super(6281);
        this.fightId = fightId;
        this.playerId = playerId;
        this.accepted = accepted;
    }

    serialize() {
        this.buffer.writeInt(this.fightId);
        this.buffer.writeInt(this.playerId);
        this.buffer.writeBoolean(this.accepted);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.playerId = buffer.readInt();;
        this.accepted = buffer.readBoolean();;
    }
};
module.exports.GameRolePlayArenaFighterStatusMessage = GameRolePlayArenaFighterStatusMessage;
module.exports.messages[6281] = GameRolePlayArenaFighterStatusMessage;

class GameRolePlayArenaFightPropositionMessage extends ProtocolMessage {
    constructor(fightId, alliesId, duration) {
        super(6276);
        this.fightId = fightId;
        this.alliesId = alliesId;
        this.duration = duration;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        this.buffer.writeShort(this.alliesId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alliesId.length) {
            if (this.alliesId[_loc2_] < -9007199254740990 || this.alliesId[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.alliesId[_loc2_] + ") on element 2 (starting at 1) of alliesId.");
            }
            this.buffer.writeDouble(this.alliesId[_loc2_]);
            _loc2_++;
        }
        if (this.duration < 0) {
            throw new Error("Forbidden value (" + this.duration + ") on element duration.");
        }
        this.buffer.writeVarShort(this.duration);
    }

    deserialize(buffer) {
        var _loc4_ = NaN;
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayArenaFightPropositionMessage.fightId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readDouble();
            if (_loc4_ < -9007199254740990 || _loc4_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of alliesId.");
            }
            this.alliesId.push(_loc4_);
            _loc3_++;
        }
        this._durationFunc(buffer);
    }
};
module.exports.GameRolePlayArenaFightPropositionMessage = GameRolePlayArenaFightPropositionMessage;
module.exports.messages[6276] = GameRolePlayArenaFightPropositionMessage;

class GameRolePlayArenaRegisterMessage extends ProtocolMessage {
    constructor(battleMode) {
        super(6280);
        this.battleMode = battleMode;
    }

    serialize() {
        this.buffer.writeInt(this.battleMode);
    }

    deserialize(buffer) {
        this.battleMode = buffer.readInt();
        if (this.battleMode < 0) {
            throw new Error("Forbidden value (" + this.battleMode + ") on element of GameRolePlayArenaRegisterMessage.battleMode.");
        }
    }
};
module.exports.GameRolePlayArenaRegisterMessage = GameRolePlayArenaRegisterMessage;
module.exports.messages[6280] = GameRolePlayArenaRegisterMessage;

class GameRolePlayArenaRegistrationStatusMessage extends ProtocolMessage {
    constructor(registered, step, battleMode) {
        super(6284);
        this.registered = registered;
        this.step = step;
        this.battleMode = battleMode;
    }

    serialize() {
        this.buffer.writeBoolean(this.registered);
        this.buffer.writeByte(this.step);
        this.buffer.writeInt(this.battleMode);
    }

    deserialize(buffer) {
        this.registered = buffer.readBoolean();
        this.step = buffer.readByte();
        if (this.step < 0) {
            throw new Error("Forbidden value (" + this.step + ") on element of GameRolePlayArenaRegistrationStatusMessage.step.");
        }
        this.battleMode = buffer.readInt();
        if (this.battleMode < 0) {
            throw new Error("Forbidden value (" + this.battleMode + ") on element of GameRolePlayArenaRegistrationStatusMessage.battleMode.");
        };
    }
};
module.exports.GameRolePlayArenaRegistrationStatusMessage = GameRolePlayArenaRegistrationStatusMessage;
module.exports.messages[6284] = GameRolePlayArenaRegistrationStatusMessage;

class GameRolePlayArenaSwitchToFightServerMessage extends ProtocolMessage {
    constructor(address, port, ticket) {
        super(6575);
        this.address = address;
        this.port = port;
        this.ticket = ticket;
    }

    serialize() {
        this.buffer.writeUTF(this.address);
        if (this.port < 0 || this.port > 65535) {
            throw new Error("Forbidden value (" + this.port + ") on element port.");
        }
        this.buffer.writeShort(this.port);
        this.buffer.writeVarInt(this.ticket.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ticket.length) {
            this.buffer.writeByte(this.ticket[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.address = buffer.readUTF();
        this.port = buffer.readUnsignedShort();
        if (this.port < 0 || this.port > 65535) {
            throw new Error("Forbidden value (" + this.port + ") on element of GameRolePlayArenaSwitchToFightServerMessage.port.");
        }
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.ticket.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameRolePlayArenaSwitchToFightServerMessage = GameRolePlayArenaSwitchToFightServerMessage;
module.exports.messages[6575] = GameRolePlayArenaSwitchToFightServerMessage;

class GameRolePlayArenaSwitchToGameServerMessage extends ProtocolMessage {
    constructor(validToken, ticket, homeServerId) {
        super(6574);
        this.validToken = validToken;
        this.ticket = ticket;
        this.homeServerId = homeServerId;
    }

    serialize() {
        this.buffer.writeBoolean(this.validToken);
        this.buffer.writeVarInt(this.ticket.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ticket.length) {
            this.buffer.writeByte(this.ticket[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.homeServerId);
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.validToken = buffer.readBoolean();
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.ticket.push(_loc4_);
            _loc3_++;
        }
        this._homeServerIdFunc(buffer);
    }
};
module.exports.GameRolePlayArenaSwitchToGameServerMessage = GameRolePlayArenaSwitchToGameServerMessage;
module.exports.messages[6574] = GameRolePlayArenaSwitchToGameServerMessage;

class GameRolePlayArenaUnregisterMessage extends ProtocolMessage {
    constructor() {
        super(6282);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GameRolePlayArenaUnregisterMessage = GameRolePlayArenaUnregisterMessage;
module.exports.messages[6282] = GameRolePlayArenaUnregisterMessage;

class GameRolePlayArenaUpdatePlayerInfosMessage extends ProtocolMessage {
    constructor(solo) {
        super(6301);
        this.solo = solo;
    }

    serialize() {
        this.solo.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.solo = new ArenaRankInfos();
        this.solo.deserialize(buffer);
    }
};
module.exports.GameRolePlayArenaUpdatePlayerInfosMessage = GameRolePlayArenaUpdatePlayerInfosMessage;
module.exports.messages[6301] = GameRolePlayArenaUpdatePlayerInfosMessage;

class GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage extends GameRolePlayArenaUpdatePlayerInfosMessage {
    constructor(solo, team, duel) {
        super(solo);
        this.team = team;
        this.duel = duel;
        this.messageId = 6728;
    }

    serialize() {
        super.serialize();
        this.team.serialize(this.buffer);
        this.duel.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.team = new ArenaRankInfos();
        this.team.deserialize(buffer);
        this.duel = new ArenaRankInfos();
        this.duel.deserialize(buffer);
    }
};
module.exports.GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage = GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage;
module.exports.messages[6728] = GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage;

class GameRolePlayAggressionMessage extends ProtocolMessage {
    constructor(attackerId, defenderId) {
        super(6073);
        this.attackerId = attackerId;
        this.defenderId = defenderId;
    }

    serialize() {
        if (this.attackerId < 0 || this.attackerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.attackerId + ") on element attackerId.");
        }
        this.buffer.writeVarLong(this.attackerId);
        if (this.defenderId < 0 || this.defenderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.defenderId + ") on element defenderId.");
        }
        this.buffer.writeVarLong(this.defenderId);
    }

    deserialize(buffer) {
        this.attackerId = buffer.readVarUhLong();
        if (this.attackerId < 0 || this.attackerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.attackerId + ") on element of GameRolePlayAggressionMessage.attackerId.");
        }
        this.defenderId = buffer.readVarUhLong();
        if (this.defenderId < 0 || this.defenderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.defenderId + ") on element of GameRolePlayAggressionMessage.defenderId.");
        };
    }
};
module.exports.GameRolePlayAggressionMessage = GameRolePlayAggressionMessage;
module.exports.messages[6073] = GameRolePlayAggressionMessage;

class GameRolePlayAttackMonsterRequestMessage extends ProtocolMessage {
    constructor(monsterGroupId) {
        super(6191);
        this.monsterGroupId = monsterGroupId;
    }

    serialize() {
        if (this.monsterGroupId < -9007199254740990 || this.monsterGroupId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.monsterGroupId + ") on element monsterGroupId.");
        }
        this.buffer.writeDouble(this.monsterGroupId);
    }

    deserialize(buffer) {
        this.monsterGroupId = buffer.readDouble();
        if (this.monsterGroupId < -9007199254740990 || this.monsterGroupId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.monsterGroupId + ") on element of GameRolePlayAttackMonsterRequestMessage.monsterGroupId.");
        }
    }
};
module.exports.GameRolePlayAttackMonsterRequestMessage = GameRolePlayAttackMonsterRequestMessage;
module.exports.messages[6191] = GameRolePlayAttackMonsterRequestMessage;

class GameRolePlayFightRequestCanceledMessage extends ProtocolMessage {
    constructor(fightId, sourceId, targetId) {
        super(5822);
        this.fightId = fightId;
        this.sourceId = sourceId;
        this.targetId = targetId;
    }

    serialize() {
        this.buffer.writeInt(this.fightId);
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeDouble(this.sourceId);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.sourceId = buffer.readDouble();
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayFightRequestCanceledMessage.sourceId.");
        }
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayFightRequestCanceledMessage.targetId.");
        };
    }
};
module.exports.GameRolePlayFightRequestCanceledMessage = GameRolePlayFightRequestCanceledMessage;
module.exports.messages[5822] = GameRolePlayFightRequestCanceledMessage;

class GameRolePlayPlayerFightFriendlyAnsweredMessage extends ProtocolMessage {
    constructor(fightId, sourceId, targetId, accept) {
        super(5733);
        this.fightId = fightId;
        this.sourceId = sourceId;
        this.targetId = targetId;
        this.accept = accept;
    }

    serialize() {
        this.buffer.writeInt(this.fightId);
        if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeVarLong(this.sourceId);
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
        this.buffer.writeBoolean(this.accept);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.sourceId = buffer.readVarUhLong();
        if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.sourceId.");
        }
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.targetId.");
        };
        this.accept = buffer.readBoolean();;
    }
};
module.exports.GameRolePlayPlayerFightFriendlyAnsweredMessage = GameRolePlayPlayerFightFriendlyAnsweredMessage;
module.exports.messages[5733] = GameRolePlayPlayerFightFriendlyAnsweredMessage;

class GameRolePlayPlayerFightFriendlyAnswerMessage extends ProtocolMessage {
    constructor(fightId, accept) {
        super(5732);
        this.fightId = fightId;
        this.accept = accept;
    }

    serialize() {
        this.buffer.writeInt(this.fightId);
        this.buffer.writeBoolean(this.accept);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.accept = buffer.readBoolean();;
    }
};
module.exports.GameRolePlayPlayerFightFriendlyAnswerMessage = GameRolePlayPlayerFightFriendlyAnswerMessage;
module.exports.messages[5732] = GameRolePlayPlayerFightFriendlyAnswerMessage;

class GameRolePlayPlayerFightFriendlyRequestedMessage extends ProtocolMessage {
    constructor(fightId, sourceId, targetId) {
        super(5937);
        this.fightId = fightId;
        this.sourceId = sourceId;
        this.targetId = targetId;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeVarLong(this.sourceId);
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.fightId.");
        }
        this.sourceId = buffer.readVarUhLong();
        if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.sourceId.");
        };
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.targetId.");
        };
    }
};
module.exports.GameRolePlayPlayerFightFriendlyRequestedMessage = GameRolePlayPlayerFightFriendlyRequestedMessage;
module.exports.messages[5937] = GameRolePlayPlayerFightFriendlyRequestedMessage;

class GameRolePlayPlayerFightRequestMessage extends ProtocolMessage {
    constructor(targetId, targetCellId, friendly) {
        super(5731);
        this.targetId = targetId;
        this.targetCellId = targetCellId;
        this.friendly = friendly;
    }

    serialize() {
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
        if (this.targetCellId < -1 || this.targetCellId > 559) {
            throw new Error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
        }
        this.buffer.writeShort(this.targetCellId);
        this.buffer.writeBoolean(this.friendly);
    }

    deserialize(buffer) {
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightRequestMessage.targetId.");
        }
        this.targetCellId = buffer.readShort();
        if (this.targetCellId < -1 || this.targetCellId > 559) {
            throw new Error("Forbidden value (" + this.targetCellId + ") on element of GameRolePlayPlayerFightRequestMessage.targetCellId.");
        };
        this.friendly = buffer.readBoolean();
    }
};
module.exports.GameRolePlayPlayerFightRequestMessage = GameRolePlayPlayerFightRequestMessage;
module.exports.messages[5731] = GameRolePlayPlayerFightRequestMessage;

class GameRolePlayRemoveChallengeMessage extends ProtocolMessage {
    constructor(fightId) {
        super(300);
        this.fightId = fightId;
    }

    serialize() {
        this.buffer.writeInt(this.fightId);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
    }
};
module.exports.GameRolePlayRemoveChallengeMessage = GameRolePlayRemoveChallengeMessage;
module.exports.messages[300] = GameRolePlayRemoveChallengeMessage;

class GameRolePlayShowChallengeMessage extends ProtocolMessage {
    constructor(commonsInfos) {
        super(301);
        this.commonsInfos = commonsInfos;
    }

    serialize() {
        this.commonsInfos.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.commonsInfos = new FightCommonInformations();
        this.commonsInfos.deserialize(buffer);
    }
};
module.exports.GameRolePlayShowChallengeMessage = GameRolePlayShowChallengeMessage;
module.exports.messages[301] = GameRolePlayShowChallengeMessage;

class GameRolePlayShowActorMessage extends ProtocolMessage {
    constructor(informations) {
        super(5632);
        this.informations = informations;
    }

    serialize() {
        this.buffer.writeShort(this.informations.getTypeId());
        this.informations.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.informations = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _loc2_);
        this.informations.deserialize(buffer);
    }
};
module.exports.GameRolePlayShowActorMessage = GameRolePlayShowActorMessage;
module.exports.messages[5632] = GameRolePlayShowActorMessage;

class GameRolePlayShowActorWithEventMessage extends GameRolePlayShowActorMessage {
    constructor(informations, actorEventId) {
        super(informations);
        this.actorEventId = actorEventId;
        this.messageId = 6407;
    }

    serialize() {
        super.serialize();
        if (this.actorEventId < 0) {
            throw new Error("Forbidden value (" + this.actorEventId + ") on element actorEventId.");
        }
        this.buffer.writeByte(this.actorEventId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.actorEventId = buffer.readByte();
        if (this.actorEventId < 0) {
            throw new Error("Forbidden value (" + this.actorEventId + ") on element of GameRolePlayShowActorWithEventMessage.actorEventId.");
        }
    }
};
module.exports.GameRolePlayShowActorWithEventMessage = GameRolePlayShowActorWithEventMessage;
module.exports.messages[6407] = GameRolePlayShowActorWithEventMessage;

class GameRolePlayShowMultipleActorsMessage extends ProtocolMessage {
    constructor(informationsList) {
        super(6712);
        this.informationsList = informationsList;
    }

    serialize() {
        this.buffer.writeShort(this.informationsList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.informationsList.length) {
            this.buffer.writeShort((this.informationsList[_loc2_]).getTypeId());
            (this.informationsList[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.informationsList.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.GameRolePlayShowMultipleActorsMessage = GameRolePlayShowMultipleActorsMessage;
module.exports.messages[6712] = GameRolePlayShowMultipleActorsMessage;

class ChangeHavenBagRoomRequestMessage extends ProtocolMessage {
    constructor(roomId) {
        super(6638);
        this.roomId = roomId;
    }

    serialize() {
        if (this.roomId < 0) {
            throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
        }
        this.buffer.writeByte(this.roomId);
    }

    deserialize(buffer) {
        this.roomId = buffer.readByte();
        if (this.roomId < 0) {
            throw new Error("Forbidden value (" + this.roomId + ") on element of ChangeHavenBagRoomRequestMessage.roomId.");
        }
    }
};
module.exports.ChangeHavenBagRoomRequestMessage = ChangeHavenBagRoomRequestMessage;
module.exports.messages[6638] = ChangeHavenBagRoomRequestMessage;

class ChangeThemeRequestMessage extends ProtocolMessage {
    constructor(theme) {
        super(6639);
        this.theme = theme;
    }

    serialize() {
        this.buffer.writeByte(this.theme);
    }

    deserialize(buffer) {
        this.theme = buffer.readByte();
    }
};
module.exports.ChangeThemeRequestMessage = ChangeThemeRequestMessage;
module.exports.messages[6639] = ChangeThemeRequestMessage;

class CloseHavenBagFurnitureSequenceRequestMessage extends ProtocolMessage {
    constructor() {
        super(6621);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.CloseHavenBagFurnitureSequenceRequestMessage = CloseHavenBagFurnitureSequenceRequestMessage;
module.exports.messages[6621] = CloseHavenBagFurnitureSequenceRequestMessage;

class EditHavenBagCancelRequestMessage extends ProtocolMessage {
    constructor() {
        super(6619);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.EditHavenBagCancelRequestMessage = EditHavenBagCancelRequestMessage;
module.exports.messages[6619] = EditHavenBagCancelRequestMessage;

class EditHavenBagFinishedMessage extends ProtocolMessage {
    constructor() {
        super(6628);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.EditHavenBagFinishedMessage = EditHavenBagFinishedMessage;
module.exports.messages[6628] = EditHavenBagFinishedMessage;

class EditHavenBagRequestMessage extends ProtocolMessage {
    constructor() {
        super(6626);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.EditHavenBagRequestMessage = EditHavenBagRequestMessage;
module.exports.messages[6626] = EditHavenBagRequestMessage;

class EditHavenBagStartMessage extends ProtocolMessage {
    constructor() {
        super(6632);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.EditHavenBagStartMessage = EditHavenBagStartMessage;
module.exports.messages[6632] = EditHavenBagStartMessage;

class EnterHavenBagRequestMessage extends ProtocolMessage {
    constructor(havenBagOwner) {
        super(6636);
        this.havenBagOwner = havenBagOwner;
    }

    serialize() {
        if (this.havenBagOwner < 0 || this.havenBagOwner > 9007199254740990) {
            throw new Error("Forbidden value (" + this.havenBagOwner + ") on element havenBagOwner.");
        }
        this.buffer.writeVarLong(this.havenBagOwner);
    }

    deserialize(buffer) {
        this.havenBagOwner = buffer.readVarUhLong();
        if (this.havenBagOwner < 0 || this.havenBagOwner > 9007199254740990) {
            throw new Error("Forbidden value (" + this.havenBagOwner + ") on element of EnterHavenBagRequestMessage.havenBagOwner.");
        }
    }
};
module.exports.EnterHavenBagRequestMessage = EnterHavenBagRequestMessage;
module.exports.messages[6636] = EnterHavenBagRequestMessage;

class ExitHavenBagRequestMessage extends ProtocolMessage {
    constructor() {
        super(6631);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExitHavenBagRequestMessage = ExitHavenBagRequestMessage;
module.exports.messages[6631] = ExitHavenBagRequestMessage;

class HavenBagDailyLoteryMessage extends ProtocolMessage {
    constructor(returnType, tokenId) {
        super(6644);
        this.returnType = returnType;
        this.tokenId = tokenId;
    }

    serialize() {
        this.buffer.writeByte(this.returnType);
        this.buffer.writeUTF(this.tokenId);
    }

    deserialize(buffer) {
        this.returnType = buffer.readByte();
        if (this.returnType < 0) {
            throw new Error("Forbidden value (" + this.returnType + ") on element of HavenBagDailyLoteryMessage.returnType.");
        }
        this.tokenId = buffer.readUTF();
    }
};
module.exports.HavenBagDailyLoteryMessage = HavenBagDailyLoteryMessage;
module.exports.messages[6644] = HavenBagDailyLoteryMessage;

class HavenBagFurnituresMessage extends ProtocolMessage {
    constructor(furnituresInfos) {
        super(6634);
        this.furnituresInfos = furnituresInfos;
    }

    serialize() {
        this.buffer.writeShort(this.furnituresInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.furnituresInfos.length) {
            (this.furnituresInfos[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new HavenBagFurnitureInformation();
            _loc4_.deserialize(buffer);
            this.furnituresInfos.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.HavenBagFurnituresMessage = HavenBagFurnituresMessage;
module.exports.messages[6634] = HavenBagFurnituresMessage;

class HavenBagFurnituresRequestMessage extends ProtocolMessage {
    constructor(cellIds, funitureIds, orientations) {
        super(6637);
        this.cellIds = cellIds;
        this.funitureIds = funitureIds;
        this.orientations = orientations;
    }

    serialize() {
        this.buffer.writeShort(this.cellIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cellIds.length) {
            if (this.cellIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.cellIds[_loc2_] + ") on element 1 (starting at 1) of cellIds.");
            }
            this.buffer.writeVarShort(this.cellIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.funitureIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.funitureIds.length) {
            this.buffer.writeInt(this.funitureIds[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.orientations.length);
        var _loc4_ = 0;
        while (_loc4_ < this.orientations.length) {
            if (this.orientations[_loc4_] < 0) {
                throw new Error("Forbidden value (" + this.orientations[_loc4_] + ") on element 3 (starting at 1) of orientations.");
            }
            this.buffer.writeByte(this.orientations[_loc4_]);
            _loc4_++;
        }
    }

    deserialize(buffer) {
        var _loc8_ = 0;
        var _loc9_ = 0;
        var _loc10_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readVarUhShort();
            if (_loc8_ < 0) {
                throw new Error("Forbidden value (" + _loc8_ + ") on elements of cellIds.");
            }
            this.cellIds.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = buffer.readInt();
            this.funitureIds.push(_loc9_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = buffer.readByte();
            if (_loc10_ < 0) {
                throw new Error("Forbidden value (" + _loc10_ + ") on elements of orientations.");
            }
            this.orientations.push(_loc10_);
            _loc7_++;
        }
    }
};
module.exports.HavenBagFurnituresRequestMessage = HavenBagFurnituresRequestMessage;
module.exports.messages[6637] = HavenBagFurnituresRequestMessage;

class HavenBagPackListMessage extends ProtocolMessage {
    constructor(packIds) {
        super(6620);
        this.packIds = packIds;
    }

    serialize() {
        this.buffer.writeShort(this.packIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.packIds.length) {
            this.buffer.writeByte(this.packIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.packIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.HavenBagPackListMessage = HavenBagPackListMessage;
module.exports.messages[6620] = HavenBagPackListMessage;

class KickHavenBagRequestMessage extends ProtocolMessage {
    constructor(guestId) {
        super(6652);
        this.guestId = guestId;
    }

    serialize() {
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
    }

    deserialize(buffer) {
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element of KickHavenBagRequestMessage.guestId.");
        }
    }
};
module.exports.KickHavenBagRequestMessage = KickHavenBagRequestMessage;
module.exports.messages[6652] = KickHavenBagRequestMessage;

class HavenBagPermissionsUpdateMessage extends ProtocolMessage {
    constructor(permissions) {
        super(6713);
        this.permissions = permissions;
    }

    serialize() {
        if (this.permissions < 0) {
            throw new Error("Forbidden value (" + this.permissions + ") on element permissions.");
        }
        this.buffer.writeInt(this.permissions);
    }

    deserialize(buffer) {
        this.permissions = buffer.readInt();
        if (this.permissions < 0) {
            throw new Error("Forbidden value (" + this.permissions + ") on element of HavenBagPermissionsUpdateMessage.permissions.");
        }
    }
};
module.exports.HavenBagPermissionsUpdateMessage = HavenBagPermissionsUpdateMessage;
module.exports.messages[6713] = HavenBagPermissionsUpdateMessage;

class HavenBagPermissionsUpdateRequestMessage extends ProtocolMessage {
    constructor(permissions) {
        super(6714);
        this.permissions = permissions;
    }

    serialize() {
        if (this.permissions < 0) {
            throw new Error("Forbidden value (" + this.permissions + ") on element permissions.");
        }
        this.buffer.writeInt(this.permissions);
    }

    deserialize(buffer) {
        this.permissions = buffer.readInt();
        if (this.permissions < 0) {
            throw new Error("Forbidden value (" + this.permissions + ") on element of HavenBagPermissionsUpdateRequestMessage.permissions.");
        }
    }
};
module.exports.HavenBagPermissionsUpdateRequestMessage = HavenBagPermissionsUpdateRequestMessage;
module.exports.messages[6714] = HavenBagPermissionsUpdateRequestMessage;

class InviteInHavenBagClosedMessage extends ProtocolMessage {
    constructor(hostInformations) {
        super(6645);
        this.hostInformations = hostInformations;
    }

    serialize() {
        this.hostInformations.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.hostInformations = new CharacterMinimalInformations();
        this.hostInformations.deserialize(buffer);
    }
};
module.exports.InviteInHavenBagClosedMessage = InviteInHavenBagClosedMessage;
module.exports.messages[6645] = InviteInHavenBagClosedMessage;

class InviteInHavenBagMessage extends ProtocolMessage {
    constructor(guestInformations, accept) {
        super(6642);
        this.guestInformations = guestInformations;
        this.accept = accept;
    }

    serialize() {
        this.guestInformations.serialize(this.buffer);
        this.buffer.writeBoolean(this.accept);
    }

    deserialize(buffer) {
        this.guestInformations = new CharacterMinimalInformations();
        this.guestInformations.deserialize(buffer);
        this.accept = buffer.readBoolean();
    }
};
module.exports.InviteInHavenBagMessage = InviteInHavenBagMessage;
module.exports.messages[6642] = InviteInHavenBagMessage;

class InviteInHavenBagOfferMessage extends ProtocolMessage {
    constructor(hostInformations, timeLeftBeforeCancel) {
        super(6643);
        this.hostInformations = hostInformations;
        this.timeLeftBeforeCancel = timeLeftBeforeCancel;
    }

    serialize() {
        this.hostInformations.serialize(this.buffer);
        this.buffer.writeVarInt(this.timeLeftBeforeCancel);
    }

    deserialize(buffer) {
        this.hostInformations = new CharacterMinimalInformations();
        this.hostInformations.deserialize(buffer);
        this.timeLeftBeforeCancel = buffer.readVarInt();
    }
};
module.exports.InviteInHavenBagOfferMessage = InviteInHavenBagOfferMessage;
module.exports.messages[6643] = InviteInHavenBagOfferMessage;

class TeleportHavenBagAnswerMessage extends ProtocolMessage {
    constructor(accept) {
        super(6646);
        this.accept = accept;
    }

    serialize() {
        this.buffer.writeBoolean(this.accept);
    }

    deserialize(buffer) {
        this.accept = buffer.readBoolean();
    }
};
module.exports.TeleportHavenBagAnswerMessage = TeleportHavenBagAnswerMessage;
module.exports.messages[6646] = TeleportHavenBagAnswerMessage;

class TeleportHavenBagRequestMessage extends ProtocolMessage {
    constructor(guestId) {
        super(6647);
        this.guestId = guestId;
    }

    serialize() {
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
    }

    deserialize(buffer) {
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element of TeleportHavenBagRequestMessage.guestId.");
        }
    }
};
module.exports.TeleportHavenBagRequestMessage = TeleportHavenBagRequestMessage;
module.exports.messages[6647] = TeleportHavenBagRequestMessage;

class OpenHavenBagFurnitureSequenceRequestMessage extends ProtocolMessage {
    constructor() {
        super(6635);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.OpenHavenBagFurnitureSequenceRequestMessage = OpenHavenBagFurnitureSequenceRequestMessage;
module.exports.messages[6635] = OpenHavenBagFurnitureSequenceRequestMessage;

class RoomAvailableUpdateMessage extends ProtocolMessage {
    constructor(nbRoom) {
        super(6630);
        this.nbRoom = nbRoom;
    }

    serialize() {
        if (this.nbRoom < 0 || this.nbRoom > 255) {
            throw new Error("Forbidden value (" + this.nbRoom + ") on element nbRoom.");
        }
        this.buffer.writeByte(this.nbRoom);
    }

    deserialize(buffer) {
        this.nbRoom = buffer.readUnsignedByte();
        if (this.nbRoom < 0 || this.nbRoom > 255) {
            throw new Error("Forbidden value (" + this.nbRoom + ") on element of RoomAvailableUpdateMessage.nbRoom.");
        }
    }
};
module.exports.RoomAvailableUpdateMessage = RoomAvailableUpdateMessage;
module.exports.messages[6630] = RoomAvailableUpdateMessage;

class AccountHouseMessage extends ProtocolMessage {
    constructor(houses) {
        super(6315);
        this.houses = houses;
    }

    serialize() {
        this.buffer.writeShort(this.houses.length);
        var _loc2_ = 0;
        while (_loc2_ < this.houses.length) {
            (this.houses[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new AccountHouseInformations();
            _loc4_.deserialize(buffer);
            this.houses.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.AccountHouseMessage = AccountHouseMessage;
module.exports.messages[6315] = AccountHouseMessage;

class HouseGuildNoneMessage extends ProtocolMessage {
    constructor(houseId, instanceId, secondHand) {
        super(5701);
        this.houseId = houseId;
        this.instanceId = instanceId;
        this.secondHand = secondHand;
    }

    serialize() {
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        this.buffer.writeBoolean(this.secondHand);
    }

    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildNoneMessage.houseId.");
        }
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildNoneMessage.instanceId.");
        };
        this.secondHand = buffer.readBoolean();
    }
};
module.exports.HouseGuildNoneMessage = HouseGuildNoneMessage;
module.exports.messages[5701] = HouseGuildNoneMessage;

class HouseGuildRightsMessage extends ProtocolMessage {
    constructor(houseId, instanceId, secondHand, guildInfo, rights) {
        super(5703);
        this.houseId = houseId;
        this.instanceId = instanceId;
        this.secondHand = secondHand;
        this.guildInfo = guildInfo;
        this.rights = rights;
    }

    serialize() {
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        this.buffer.writeBoolean(this.secondHand);
        this.guildInfo.serialize(this.buffer);
        if (this.rights < 0) {
            throw new Error("Forbidden value (" + this.rights + ") on element rights.");
        }
        this.buffer.writeVarInt(this.rights);
    }

    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildRightsMessage.houseId.");
        }
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildRightsMessage.instanceId.");
        };
        this.secondHand = buffer.readBoolean();
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
        this.rights = buffer.readVarUhInt();
        if (this.rights < 0) {
            throw new Error("Forbidden value (" + this.rights + ") on element of HouseGuildRightsMessage.rights.");
        };
    }
};
module.exports.HouseGuildRightsMessage = HouseGuildRightsMessage;
module.exports.messages[5703] = HouseGuildRightsMessage;

class HouseGuildRightsViewMessage extends ProtocolMessage {
    constructor(houseId, instanceId) {
        super(5700);
        this.houseId = houseId;
        this.instanceId = instanceId;
    }

    serialize() {
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
    }

    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildRightsViewMessage.houseId.");
        }
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildRightsViewMessage.instanceId.");
        };
    }
};
module.exports.HouseGuildRightsViewMessage = HouseGuildRightsViewMessage;
module.exports.messages[5700] = HouseGuildRightsViewMessage;

class HouseGuildShareRequestMessage extends ProtocolMessage {
    constructor(houseId, instanceId, enable, rights) {
        super(5704);
        this.houseId = houseId;
        this.instanceId = instanceId;
        this.enable = enable;
        this.rights = rights;
    }

    serialize() {
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        this.buffer.writeBoolean(this.enable);
        if (this.rights < 0) {
            throw new Error("Forbidden value (" + this.rights + ") on element rights.");
        }
        this.buffer.writeVarInt(this.rights);
    }

    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildShareRequestMessage.houseId.");
        }
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildShareRequestMessage.instanceId.");
        };
        this.enable = buffer.readBoolean();
        this.rights = buffer.readVarUhInt();
        if (this.rights < 0) {
            throw new Error("Forbidden value (" + this.rights + ") on element of HouseGuildShareRequestMessage.rights.");
        };
    }
};
module.exports.HouseGuildShareRequestMessage = HouseGuildShareRequestMessage;
module.exports.messages[5704] = HouseGuildShareRequestMessage;

class HouseBuyRequestMessage extends ProtocolMessage {
    constructor(proposedPrice) {
        super(5738);
        this.proposedPrice = proposedPrice;
    }

    serialize() {
        if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.proposedPrice + ") on element proposedPrice.");
        }
        this.buffer.writeVarLong(this.proposedPrice);
    }

    deserialize(buffer) {
        this.proposedPrice = buffer.readVarUhLong();
        if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.proposedPrice + ") on element of HouseBuyRequestMessage.proposedPrice.");
        }
    }
};
module.exports.HouseBuyRequestMessage = HouseBuyRequestMessage;
module.exports.messages[5738] = HouseBuyRequestMessage;

class HouseBuyResultMessage extends ProtocolMessage {
    constructor(houseId, instanceId, secondHand, bought, realPrice) {
        super(5735);
        this.houseId = houseId;
        this.instanceId = instanceId;
        this.secondHand = secondHand;
        this.bought = bought;
        this.realPrice = realPrice;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.secondHand);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.bought);
        this.buffer.writeByte(_loc2_);
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.realPrice + ") on element realPrice.");
        }
        this.buffer.writeVarLong(this.realPrice);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of HouseBuyResultMessage.houseId.");
        }
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseBuyResultMessage.instanceId.");
        };
        this.realPrice = buffer.readVarUhLong();
        if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.realPrice + ") on element of HouseBuyResultMessage.realPrice.");
        };
    }
};
module.exports.HouseBuyResultMessage = HouseBuyResultMessage;
module.exports.messages[5735] = HouseBuyResultMessage;

class HouseKickIndoorMerchantRequestMessage extends ProtocolMessage {
    constructor(cellId) {
        super(5661);
        this.cellId = cellId;
    }

    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }

    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of HouseKickIndoorMerchantRequestMessage.cellId.");
        }
    }
};
module.exports.HouseKickIndoorMerchantRequestMessage = HouseKickIndoorMerchantRequestMessage;
module.exports.messages[5661] = HouseKickIndoorMerchantRequestMessage;

class HouseKickRequestMessage extends ProtocolMessage {
    constructor(id) {
        super(5698);
        this.id = id;
    }

    serialize() {
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of HouseKickRequestMessage.id.");
        }
    }
};
module.exports.HouseKickRequestMessage = HouseKickRequestMessage;
module.exports.messages[5698] = HouseKickRequestMessage;

class LockableChangeCodeMessage extends ProtocolMessage {
    constructor(code) {
        super(5666);
        this.code = code;
    }

    serialize() {
        this.buffer.writeUTF(this.code);
    }

    deserialize(buffer) {
        this.code = buffer.readUTF();
    }
};
module.exports.LockableChangeCodeMessage = LockableChangeCodeMessage;
module.exports.messages[5666] = LockableChangeCodeMessage;

class HouseLockFromInsideRequestMessage extends LockableChangeCodeMessage {
    constructor(code) {
        super(code);
        this.messageId = 5885;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.HouseLockFromInsideRequestMessage = HouseLockFromInsideRequestMessage;
module.exports.messages[5885] = HouseLockFromInsideRequestMessage;

class HousePropertiesMessage extends ProtocolMessage {
    constructor(houseId, doorsOnMap, properties) {
        super(5734);
        this.houseId = houseId;
        this.doorsOnMap = doorsOnMap;
        this.properties = properties;
    }

    serialize() {
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        this.buffer.writeShort(this.doorsOnMap.length);
        var _loc2_ = 0;
        while (_loc2_ < this.doorsOnMap.length) {
            if (this.doorsOnMap[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.doorsOnMap[_loc2_] + ") on element 2 (starting at 1) of doorsOnMap.");
            }
            this.buffer.writeInt(this.doorsOnMap[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.properties.getTypeId());
        this.properties.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc5_ = 0;
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of HousePropertiesMessage.houseId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc5_ = buffer.readInt();
            if (_loc5_ < 0) {
                throw new Error("Forbidden value (" + _loc5_ + ") on elements of doorsOnMap.");
            }
            this.doorsOnMap.push(_loc5_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        this.properties = ProtocolTypeManager.getInstance(HouseInstanceInformations, _loc4_);
        this.properties.deserialize(buffer);
    }
};
module.exports.HousePropertiesMessage = HousePropertiesMessage;
module.exports.messages[5734] = HousePropertiesMessage;

class HouseSellRequestMessage extends ProtocolMessage {
    constructor(instanceId, amount, forSale) {
        super(5697);
        this.instanceId = instanceId;
        this.amount = amount;
        this.forSale = forSale;
    }

    serialize() {
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        if (this.amount < 0 || this.amount > 9007199254740990) {
            throw new Error("Forbidden value (" + this.amount + ") on element amount.");
        }
        this.buffer.writeVarLong(this.amount);
        this.buffer.writeBoolean(this.forSale);
    }

    deserialize(buffer) {
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseSellRequestMessage.instanceId.");
        }
        this.amount = buffer.readVarUhLong();
        if (this.amount < 0 || this.amount > 9007199254740990) {
            throw new Error("Forbidden value (" + this.amount + ") on element of HouseSellRequestMessage.amount.");
        };
        this.forSale = buffer.readBoolean();
    }
};
module.exports.HouseSellRequestMessage = HouseSellRequestMessage;
module.exports.messages[5697] = HouseSellRequestMessage;

class HouseSellFromInsideRequestMessage extends HouseSellRequestMessage {
    constructor(instanceId, amount, forSale) {
        super(instanceId, amount, forSale);
        this.messageId = 5884;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.HouseSellFromInsideRequestMessage = HouseSellFromInsideRequestMessage;
module.exports.messages[5884] = HouseSellFromInsideRequestMessage;

class HouseSellingUpdateMessage extends ProtocolMessage {
    constructor(houseId, instanceId, secondHand, realPrice, buyerName) {
        super(6727);
        this.houseId = houseId;
        this.instanceId = instanceId;
        this.secondHand = secondHand;
        this.realPrice = realPrice;
        this.buyerName = buyerName;
    }

    serialize() {
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        this.buffer.writeBoolean(this.secondHand);
        if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.realPrice + ") on element realPrice.");
        }
        this.buffer.writeVarLong(this.realPrice);
        this.buffer.writeUTF(this.buyerName);
    }

    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of HouseSellingUpdateMessage.houseId.");
        }
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseSellingUpdateMessage.instanceId.");
        };
        this.secondHand = buffer.readBoolean();
        this.realPrice = buffer.readVarUhLong();
        if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.realPrice + ") on element of HouseSellingUpdateMessage.realPrice.");
        };
        this.buyerName = buffer.readUTF();;
    }
};
module.exports.HouseSellingUpdateMessage = HouseSellingUpdateMessage;
module.exports.messages[6727] = HouseSellingUpdateMessage;

class HouseToSellFilterMessage extends ProtocolMessage {
    constructor(areaId, atLeastNbRoom, atLeastNbChest, skillRequested, maxPrice) {
        super(6137);
        this.areaId = areaId;
        this.atLeastNbRoom = atLeastNbRoom;
        this.atLeastNbChest = atLeastNbChest;
        this.skillRequested = skillRequested;
        this.maxPrice = maxPrice;
    }

    serialize() {
        this.buffer.writeInt(this.areaId);
        if (this.atLeastNbRoom < 0) {
            throw new Error("Forbidden value (" + this.atLeastNbRoom + ") on element atLeastNbRoom.");
        }
        this.buffer.writeByte(this.atLeastNbRoom);
        if (this.atLeastNbChest < 0) {
            throw new Error("Forbidden value (" + this.atLeastNbChest + ") on element atLeastNbChest.");
        }
        this.buffer.writeByte(this.atLeastNbChest);
        if (this.skillRequested < 0) {
            throw new Error("Forbidden value (" + this.skillRequested + ") on element skillRequested.");
        }
        this.buffer.writeVarShort(this.skillRequested);
        if (this.maxPrice < 0 || this.maxPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.maxPrice + ") on element maxPrice.");
        }
        this.buffer.writeVarLong(this.maxPrice);
    }

    deserialize(buffer) {
        this.areaId = buffer.readInt();
        this.atLeastNbRoom = buffer.readByte();
        if (this.atLeastNbRoom < 0) {
            throw new Error("Forbidden value (" + this.atLeastNbRoom + ") on element of HouseToSellFilterMessage.atLeastNbRoom.");
        }
        this.atLeastNbChest = buffer.readByte();
        if (this.atLeastNbChest < 0) {
            throw new Error("Forbidden value (" + this.atLeastNbChest + ") on element of HouseToSellFilterMessage.atLeastNbChest.");
        };
        this.skillRequested = buffer.readVarUhShort();
        if (this.skillRequested < 0) {
            throw new Error("Forbidden value (" + this.skillRequested + ") on element of HouseToSellFilterMessage.skillRequested.");
        };
        this.maxPrice = buffer.readVarUhLong();
        if (this.maxPrice < 0 || this.maxPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.maxPrice + ") on element of HouseToSellFilterMessage.maxPrice.");
        };
    }
};
module.exports.HouseToSellFilterMessage = HouseToSellFilterMessage;
module.exports.messages[6137] = HouseToSellFilterMessage;

class HouseToSellListMessage extends ProtocolMessage {
    constructor(pageIndex, totalPage, houseList) {
        super(6140);
        this.pageIndex = pageIndex;
        this.totalPage = totalPage;
        this.houseList = houseList;
    }

    serialize() {
        if (this.pageIndex < 0) {
            throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
        }
        this.buffer.writeVarShort(this.pageIndex);
        if (this.totalPage < 0) {
            throw new Error("Forbidden value (" + this.totalPage + ") on element totalPage.");
        }
        this.buffer.writeVarShort(this.totalPage);
        this.buffer.writeShort(this.houseList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.houseList.length) {
            (this.houseList[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.pageIndex = buffer.readVarUhShort();
        if (this.pageIndex < 0) {
            throw new Error("Forbidden value (" + this.pageIndex + ") on element of HouseToSellListMessage.pageIndex.");
        }
        this.totalPage = buffer.readVarUhShort();
        if (this.totalPage < 0) {
            throw new Error("Forbidden value (" + this.totalPage + ") on element of HouseToSellListMessage.totalPage.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new HouseInformationsForSell();
            _loc4_.deserialize(buffer);
            this.houseList.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.HouseToSellListMessage = HouseToSellListMessage;
module.exports.messages[6140] = HouseToSellListMessage;

class HouseToSellListRequestMessage extends ProtocolMessage {
    constructor(pageIndex) {
        super(6139);
        this.pageIndex = pageIndex;
    }

    serialize() {
        if (this.pageIndex < 0) {
            throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
        }
        this.buffer.writeVarShort(this.pageIndex);
    }

    deserialize(buffer) {
        this.pageIndex = buffer.readVarUhShort();
        if (this.pageIndex < 0) {
            throw new Error("Forbidden value (" + this.pageIndex + ") on element of HouseToSellListRequestMessage.pageIndex.");
        }
    }
};
module.exports.HouseToSellListRequestMessage = HouseToSellListRequestMessage;
module.exports.messages[6139] = HouseToSellListRequestMessage;

class JobAllowMultiCraftRequestMessage extends ProtocolMessage {
    constructor(enabled) {
        super(5748);
        this.enabled = enabled;
    }

    serialize() {
        this.buffer.writeBoolean(this.enabled);
    }

    deserialize(buffer) {
        this.enabled = buffer.readBoolean();
    }
};
module.exports.JobAllowMultiCraftRequestMessage = JobAllowMultiCraftRequestMessage;
module.exports.messages[5748] = JobAllowMultiCraftRequestMessage;

class JobBookSubscriptionMessage extends ProtocolMessage {
    constructor(subscriptions) {
        super(6593);
        this.subscriptions = subscriptions;
    }

    serialize() {
        this.buffer.writeShort(this.subscriptions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.subscriptions.length) {
            (this.subscriptions[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobBookSubscription();
            _loc4_.deserialize(buffer);
            this.subscriptions.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.JobBookSubscriptionMessage = JobBookSubscriptionMessage;
module.exports.messages[6593] = JobBookSubscriptionMessage;

class JobCrafterDirectoryAddMessage extends ProtocolMessage {
    constructor(listEntry) {
        super(5651);
        this.listEntry = listEntry;
    }

    serialize() {
        this.listEntry.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.listEntry = new JobCrafterDirectoryListEntry();
        this.listEntry.deserialize(buffer);
    }
};
module.exports.JobCrafterDirectoryAddMessage = JobCrafterDirectoryAddMessage;
module.exports.messages[5651] = JobCrafterDirectoryAddMessage;

class JobCrafterDirectoryDefineSettingsMessage extends ProtocolMessage {
    constructor(settings) {
        super(5649);
        this.settings = settings;
    }

    serialize() {
        this.settings.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.settings = new JobCrafterDirectorySettings();
        this.settings.deserialize(buffer);
    }
};
module.exports.JobCrafterDirectoryDefineSettingsMessage = JobCrafterDirectoryDefineSettingsMessage;
module.exports.messages[5649] = JobCrafterDirectoryDefineSettingsMessage;

class JobCrafterDirectoryEntryMessage extends ProtocolMessage {
    constructor(playerInfo, jobInfoList, playerLook) {
        super(6044);
        this.playerInfo = playerInfo;
        this.jobInfoList = jobInfoList;
        this.playerLook = playerLook;
    }

    serialize() {
        this.playerInfo.serialize(this.buffer);
        this.buffer.writeShort(this.jobInfoList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.jobInfoList.length) {
            (this.jobInfoList[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.playerLook.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
        this.playerInfo.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobCrafterDirectoryEntryJobInfo();
            _loc4_.deserialize(buffer);
            this.jobInfoList.push(_loc4_);
            _loc3_++;
        }
        this.playerLook = new EntityLook();
        this.playerLook.deserialize(buffer);
    }
};
module.exports.JobCrafterDirectoryEntryMessage = JobCrafterDirectoryEntryMessage;
module.exports.messages[6044] = JobCrafterDirectoryEntryMessage;

class JobCrafterDirectoryEntryRequestMessage extends ProtocolMessage {
    constructor(playerId) {
        super(6043);
        this.playerId = playerId;
    }

    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryEntryRequestMessage.playerId.");
        }
    }
};
module.exports.JobCrafterDirectoryEntryRequestMessage = JobCrafterDirectoryEntryRequestMessage;
module.exports.messages[6043] = JobCrafterDirectoryEntryRequestMessage;

class JobCrafterDirectoryListMessage extends ProtocolMessage {
    constructor(listEntries) {
        super(6046);
        this.listEntries = listEntries;
    }

    serialize() {
        this.buffer.writeShort(this.listEntries.length);
        var _loc2_ = 0;
        while (_loc2_ < this.listEntries.length) {
            (this.listEntries[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobCrafterDirectoryListEntry();
            _loc4_.deserialize(buffer);
            this.listEntries.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.JobCrafterDirectoryListMessage = JobCrafterDirectoryListMessage;
module.exports.messages[6046] = JobCrafterDirectoryListMessage;

class JobCrafterDirectoryListRequestMessage extends ProtocolMessage {
    constructor(jobId) {
        super(6047);
        this.jobId = jobId;
    }

    serialize() {
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
    }

    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryListRequestMessage.jobId.");
        }
    }
};
module.exports.JobCrafterDirectoryListRequestMessage = JobCrafterDirectoryListRequestMessage;
module.exports.messages[6047] = JobCrafterDirectoryListRequestMessage;

class JobCrafterDirectoryRemoveMessage extends ProtocolMessage {
    constructor(jobId, playerId) {
        super(5653);
        this.jobId = jobId;
        this.playerId = playerId;
    }

    serialize() {
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryRemoveMessage.jobId.");
        }
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryRemoveMessage.playerId.");
        };
    }
};
module.exports.JobCrafterDirectoryRemoveMessage = JobCrafterDirectoryRemoveMessage;
module.exports.messages[5653] = JobCrafterDirectoryRemoveMessage;

class JobCrafterDirectorySettingsMessage extends ProtocolMessage {
    constructor(craftersSettings) {
        super(5652);
        this.craftersSettings = craftersSettings;
    }

    serialize() {
        this.buffer.writeShort(this.craftersSettings.length);
        var _loc2_ = 0;
        while (_loc2_ < this.craftersSettings.length) {
            (this.craftersSettings[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobCrafterDirectorySettings();
            _loc4_.deserialize(buffer);
            this.craftersSettings.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.JobCrafterDirectorySettingsMessage = JobCrafterDirectorySettingsMessage;
module.exports.messages[5652] = JobCrafterDirectorySettingsMessage;

class JobDescriptionMessage extends ProtocolMessage {
    constructor(jobsDescription) {
        super(5655);
        this.jobsDescription = jobsDescription;
    }

    serialize() {
        this.buffer.writeShort(this.jobsDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.jobsDescription.length) {
            (this.jobsDescription[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobDescription();
            _loc4_.deserialize(buffer);
            this.jobsDescription.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.JobDescriptionMessage = JobDescriptionMessage;
module.exports.messages[5655] = JobDescriptionMessage;

class JobExperienceMultiUpdateMessage extends ProtocolMessage {
    constructor(experiencesUpdate) {
        super(5809);
        this.experiencesUpdate = experiencesUpdate;
    }

    serialize() {
        this.buffer.writeShort(this.experiencesUpdate.length);
        var _loc2_ = 0;
        while (_loc2_ < this.experiencesUpdate.length) {
            (this.experiencesUpdate[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobExperience();
            _loc4_.deserialize(buffer);
            this.experiencesUpdate.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.JobExperienceMultiUpdateMessage = JobExperienceMultiUpdateMessage;
module.exports.messages[5809] = JobExperienceMultiUpdateMessage;

class JobExperienceUpdateMessage extends ProtocolMessage {
    constructor(experiencesUpdate) {
        super(5654);
        this.experiencesUpdate = experiencesUpdate;
    }

    serialize() {
        this.experiencesUpdate.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.experiencesUpdate = new JobExperience();
        this.experiencesUpdate.deserialize(buffer);
    }
};
module.exports.JobExperienceUpdateMessage = JobExperienceUpdateMessage;
module.exports.messages[5654] = JobExperienceUpdateMessage;

class JobExperienceOtherPlayerUpdateMessage extends JobExperienceUpdateMessage {
    constructor(experiencesUpdate, playerId) {
        super(experiencesUpdate);
        this.playerId = playerId;
        this.messageId = 6599;
    }

    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of JobExperienceOtherPlayerUpdateMessage.playerId.");
        }
    }
};
module.exports.JobExperienceOtherPlayerUpdateMessage = JobExperienceOtherPlayerUpdateMessage;
module.exports.messages[6599] = JobExperienceOtherPlayerUpdateMessage;

class JobLevelUpMessage extends ProtocolMessage {
    constructor(newLevel, jobsDescription) {
        super(5656);
        this.newLevel = newLevel;
        this.jobsDescription = jobsDescription;
    }

    serialize() {
        if (this.newLevel < 0 || this.newLevel > 255) {
            throw new Error("Forbidden value (" + this.newLevel + ") on element newLevel.");
        }
        this.buffer.writeByte(this.newLevel);
        this.jobsDescription.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.newLevel = buffer.readUnsignedByte();
        if (this.newLevel < 0 || this.newLevel > 255) {
            throw new Error("Forbidden value (" + this.newLevel + ") on element of JobLevelUpMessage.newLevel.");
        }
        this.jobsDescription = new JobDescription();
        this.jobsDescription.deserialize(buffer);
    }
};
module.exports.JobLevelUpMessage = JobLevelUpMessage;
module.exports.messages[5656] = JobLevelUpMessage;

class JobMultiCraftAvailableSkillsMessage extends JobAllowMultiCraftRequestMessage {
    constructor(enabled, playerId, skills) {
        super(enabled);
        this.playerId = playerId;
        this.skills = skills;
        this.messageId = 5747;
    }

    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeShort(this.skills.length);
        var _loc2_ = 0;
        while (_loc2_ < this.skills.length) {
            if (this.skills[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.skills[_loc2_] + ") on element 2 (starting at 1) of skills.");
            }
            this.buffer.writeVarShort(this.skills[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of JobMultiCraftAvailableSkillsMessage.playerId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of skills.");
            }
            this.skills.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.JobMultiCraftAvailableSkillsMessage = JobMultiCraftAvailableSkillsMessage;
module.exports.messages[5747] = JobMultiCraftAvailableSkillsMessage;

class LockableCodeResultMessage extends ProtocolMessage {
    constructor(result) {
        super(5672);
        this.result = result;
    }

    serialize() {
        this.buffer.writeByte(this.result);
    }

    deserialize(buffer) {
        this.result = buffer.readByte();
        if (this.result < 0) {
            throw new Error("Forbidden value (" + this.result + ") on element of LockableCodeResultMessage.result.");
        }
    }
};
module.exports.LockableCodeResultMessage = LockableCodeResultMessage;
module.exports.messages[5672] = LockableCodeResultMessage;

class LockableShowCodeDialogMessage extends ProtocolMessage {
    constructor(changeOrUse, codeSize) {
        super(5740);
        this.changeOrUse = changeOrUse;
        this.codeSize = codeSize;
    }

    serialize() {
        this.buffer.writeBoolean(this.changeOrUse);
        if (this.codeSize < 0) {
            throw new Error("Forbidden value (" + this.codeSize + ") on element codeSize.");
        }
        this.buffer.writeByte(this.codeSize);
    }

    deserialize(buffer) {
        this.changeOrUse = buffer.readBoolean();
        this.codeSize = buffer.readByte();
        if (this.codeSize < 0) {
            throw new Error("Forbidden value (" + this.codeSize + ") on element of LockableShowCodeDialogMessage.codeSize.");
        }
    }
};
module.exports.LockableShowCodeDialogMessage = LockableShowCodeDialogMessage;
module.exports.messages[5740] = LockableShowCodeDialogMessage;

class LockableStateUpdateAbstractMessage extends ProtocolMessage {
    constructor(locked) {
        super(5671);
        this.locked = locked;
    }

    serialize() {
        this.buffer.writeBoolean(this.locked);
    }

    deserialize(buffer) {
        this.locked = buffer.readBoolean();
    }
};
module.exports.LockableStateUpdateAbstractMessage = LockableStateUpdateAbstractMessage;
module.exports.messages[5671] = LockableStateUpdateAbstractMessage;

class LockableStateUpdateHouseDoorMessage extends LockableStateUpdateAbstractMessage {
    constructor(locked, houseId, instanceId, secondHand) {
        super(locked);
        this.houseId = houseId;
        this.instanceId = instanceId;
        this.secondHand = secondHand;
        this.messageId = 5668;
    }

    serialize() {
        super.serialize();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        this.buffer.writeBoolean(this.secondHand);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of LockableStateUpdateHouseDoorMessage.houseId.");
        }
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of LockableStateUpdateHouseDoorMessage.instanceId.");
        };
        this.secondHand = buffer.readBoolean();
    }
};
module.exports.LockableStateUpdateHouseDoorMessage = LockableStateUpdateHouseDoorMessage;
module.exports.messages[5668] = LockableStateUpdateHouseDoorMessage;

class LockableStateUpdateStorageMessage extends LockableStateUpdateAbstractMessage {
    constructor(locked, mapId, elementId) {
        super(locked);
        this.mapId = mapId;
        this.elementId = elementId;
        this.messageId = 5669;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.mapId);
        if (this.elementId < 0) {
            throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
        }
        this.buffer.writeVarInt(this.elementId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.mapId = buffer.readInt();
        this.elementId = buffer.readVarUhInt();
        if (this.elementId < 0) {
            throw new Error("Forbidden value (" + this.elementId + ") on element of LockableStateUpdateStorageMessage.elementId.");
        }
    }
};
module.exports.LockableStateUpdateStorageMessage = LockableStateUpdateStorageMessage;
module.exports.messages[5669] = LockableStateUpdateStorageMessage;

class LockableUseCodeMessage extends ProtocolMessage {
    constructor(code) {
        super(5667);
        this.code = code;
    }

    serialize() {
        this.buffer.writeUTF(this.code);
    }

    deserialize(buffer) {
        this.code = buffer.readUTF();
    }
};
module.exports.LockableUseCodeMessage = LockableUseCodeMessage;
module.exports.messages[5667] = LockableUseCodeMessage;

class MapComplementaryInformationsDataMessage extends ProtocolMessage {
    constructor(subAreaId, mapId, houses, actors, interactiveElements, statedElements, obstacles, fights, hasAggressiveMonsters, fightStartPositions) {
        super(226);
        this.subAreaId = subAreaId;
        this.mapId = mapId;
        this.houses = houses;
        this.actors = actors;
        this.interactiveElements = interactiveElements;
        this.statedElements = statedElements;
        this.obstacles = obstacles;
        this.fights = fights;
        this.hasAggressiveMonsters = hasAggressiveMonsters;
        this.fightStartPositions = fightStartPositions;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
        this.buffer.writeShort(this.houses.length);
        var _loc2_ = 0;
        while (_loc2_ < this.houses.length) {
            this.buffer.writeShort((this.houses[_loc2_]).getTypeId());
            (this.houses[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.actors.length);
        var _loc3_ = 0;
        while (_loc3_ < this.actors.length) {
            this.buffer.writeShort((this.actors[_loc3_]).getTypeId());
            (this.actors[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
        this.buffer.writeShort(this.interactiveElements.length);
        var _loc4_ = 0;
        while (_loc4_ < this.interactiveElements.length) {
            this.buffer.writeShort((this.interactiveElements[_loc4_]).getTypeId());
            (this.interactiveElements[_loc4_]).serialize(this.buffer);
            _loc4_++;
        }
        this.buffer.writeShort(this.statedElements.length);
        var _loc5_ = 0;
        while (_loc5_ < this.statedElements.length) {
            (this.statedElements[_loc5_]).serialize(this.buffer);
            _loc5_++;
        }
        this.buffer.writeShort(this.obstacles.length);
        var _loc6_ = 0;
        while (_loc6_ < this.obstacles.length) {
            (this.obstacles[_loc6_]).serialize(this.buffer);
            _loc6_++;
        }
        this.buffer.writeShort(this.fights.length);
        var _loc7_ = 0;
        while (_loc7_ < this.fights.length) {
            (this.fights[_loc7_]).serialize(this.buffer);
            _loc7_++;
        }
        this.buffer.writeBoolean(this.hasAggressiveMonsters);
        this.fightStartPositions.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc14_ = 0;
        var _loc15_ = null;
        var _loc16_ = 0;
        var _loc17_ = null;
        var _loc18_ = 0;
        var _loc19_ = null;
        var _loc20_ = null;
        var _loc21_ = null;
        var _loc22_ = null;
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of MapComplementaryInformationsDataMessage.subAreaId.");
        }
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element of MapComplementaryInformationsDataMessage.mapId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc14_ = buffer.readUnsignedShort();
            _loc15_ = ProtocolTypeManager.getInstance(HouseInformations, _loc14_);
            _loc15_.deserialize(buffer);
            this.houses.push(_loc15_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc16_ = buffer.readUnsignedShort();
            _loc17_ = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _loc16_);
            _loc17_.deserialize(buffer);
            this.actors.push(_loc17_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc18_ = buffer.readUnsignedShort();
            _loc19_ = ProtocolTypeManager.getInstance(InteractiveElement, _loc18_);
            _loc19_.deserialize(buffer);
            this.interactiveElements.push(_loc19_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc20_ = new StatedElement();
            _loc20_.deserialize(buffer);
            this.statedElements.push(_loc20_);
            _loc9_++;
        }
        var _loc10_ = buffer.readUnsignedShort();
        var _loc11_ = 0;
        while (_loc11_ < _loc10_) {
            _loc21_ = new MapObstacle();
            _loc21_.deserialize(buffer);
            this.obstacles.push(_loc21_);
            _loc11_++;
        }
        var _loc12_ = buffer.readUnsignedShort();
        var _loc13_ = 0;
        while (_loc13_ < _loc12_) {
            _loc22_ = new FightCommonInformations();
            _loc22_.deserialize(buffer);
            this.fights.push(_loc22_);
            _loc13_++;
        }
        this._hasAggressiveMonstersFunc(buffer);
        this.fightStartPositions = new FightStartingPositions();
        this.fightStartPositions.deserialize(buffer);
    }
};
module.exports.MapComplementaryInformationsDataMessage = MapComplementaryInformationsDataMessage;
module.exports.messages[226] = MapComplementaryInformationsDataMessage;

class MapComplementaryInformationsDataInHavenBagMessage extends MapComplementaryInformationsDataMessage {
    constructor(subAreaId, mapId, houses, actors, interactiveElements, statedElements, obstacles, fights, hasAggressiveMonsters, fightStartPositions, ownerInformations, theme, roomId, maxRoomId) {
        super(subAreaId, mapId, houses, actors, interactiveElements, statedElements, obstacles, fights, hasAggressiveMonsters, fightStartPositions);
        this.ownerInformations = ownerInformations;
        this.theme = theme;
        this.roomId = roomId;
        this.maxRoomId = maxRoomId;
        this.messageId = 6622;
    }

    serialize() {
        super.serialize();
        this.ownerInformations.serialize(this.buffer);
        this.buffer.writeByte(this.theme);
        if (this.roomId < 0) {
            throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
        }
        this.buffer.writeByte(this.roomId);
        if (this.maxRoomId < 0) {
            throw new Error("Forbidden value (" + this.maxRoomId + ") on element maxRoomId.");
        }
        this.buffer.writeByte(this.maxRoomId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.ownerInformations = new CharacterMinimalInformations();
        this.ownerInformations.deserialize(buffer);
        this.theme = buffer.readByte();
        this.roomId = buffer.readByte();
        if (this.roomId < 0) {
            throw new Error("Forbidden value (" + this.roomId + ") on element of MapComplementaryInformationsDataInHavenBagMessage.roomId.");
        }
        this.maxRoomId = buffer.readByte();
        if (this.maxRoomId < 0) {
            throw new Error("Forbidden value (" + this.maxRoomId + ") on element of MapComplementaryInformationsDataInHavenBagMessage.maxRoomId.");
        };
    }
};
module.exports.MapComplementaryInformationsDataInHavenBagMessage = MapComplementaryInformationsDataInHavenBagMessage;
module.exports.messages[6622] = MapComplementaryInformationsDataInHavenBagMessage;

class MapComplementaryInformationsDataInHouseMessage extends MapComplementaryInformationsDataMessage {
    constructor(subAreaId, mapId, houses, actors, interactiveElements, statedElements, obstacles, fights, hasAggressiveMonsters, fightStartPositions, currentHouse) {
        super(subAreaId, mapId, houses, actors, interactiveElements, statedElements, obstacles, fights, hasAggressiveMonsters, fightStartPositions);
        this.currentHouse = currentHouse;
        this.messageId = 6130;
    }

    serialize() {
        super.serialize();
        this.currentHouse.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.currentHouse = new HouseInformationsInside();
        this.currentHouse.deserialize(buffer);
    }
};
module.exports.MapComplementaryInformationsDataInHouseMessage = MapComplementaryInformationsDataInHouseMessage;
module.exports.messages[6130] = MapComplementaryInformationsDataInHouseMessage;

class MapComplementaryInformationsWithCoordsMessage extends MapComplementaryInformationsDataMessage {
    constructor(subAreaId, mapId, houses, actors, interactiveElements, statedElements, obstacles, fights, hasAggressiveMonsters, fightStartPositions, worldX, worldY) {
        super(subAreaId, mapId, houses, actors, interactiveElements, statedElements, obstacles, fights, hasAggressiveMonsters, fightStartPositions);
        this.worldX = worldX;
        this.worldY = worldY;
        this.messageId = 6268;
    }

    serialize() {
        super.serialize();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of MapComplementaryInformationsWithCoordsMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of MapComplementaryInformationsWithCoordsMessage.worldY.");
        };
    }
};
module.exports.MapComplementaryInformationsWithCoordsMessage = MapComplementaryInformationsWithCoordsMessage;
module.exports.messages[6268] = MapComplementaryInformationsWithCoordsMessage;

class MapFightCountMessage extends ProtocolMessage {
    constructor(fightCount) {
        super(210);
        this.fightCount = fightCount;
    }

    serialize() {
        if (this.fightCount < 0) {
            throw new Error("Forbidden value (" + this.fightCount + ") on element fightCount.");
        }
        this.buffer.writeVarShort(this.fightCount);
    }

    deserialize(buffer) {
        this.fightCount = buffer.readVarUhShort();
        if (this.fightCount < 0) {
            throw new Error("Forbidden value (" + this.fightCount + ") on element of MapFightCountMessage.fightCount.");
        }
    }
};
module.exports.MapFightCountMessage = MapFightCountMessage;
module.exports.messages[210] = MapFightCountMessage;

class MapFightStartPositionsUpdateMessage extends ProtocolMessage {
    constructor(mapId, fightStartPositions) {
        super(6716);
        this.mapId = mapId;
        this.fightStartPositions = fightStartPositions;
    }

    serialize() {
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
        this.fightStartPositions.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element of MapFightStartPositionsUpdateMessage.mapId.");
        }
        this.fightStartPositions = new FightStartingPositions();
        this.fightStartPositions.deserialize(buffer);
    }
};
module.exports.MapFightStartPositionsUpdateMessage = MapFightStartPositionsUpdateMessage;
module.exports.messages[6716] = MapFightStartPositionsUpdateMessage;

class MapInformationsRequestMessage extends ProtocolMessage {
    constructor(mapId) {
        super(225);
        this.mapId = mapId;
    }

    serialize() {
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }

    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element of MapInformationsRequestMessage.mapId.");
        }
    }
};
module.exports.MapInformationsRequestMessage = MapInformationsRequestMessage;
module.exports.messages[225] = MapInformationsRequestMessage;

class MapObstacleUpdateMessage extends ProtocolMessage {
    constructor(obstacles) {
        super(6051);
        this.obstacles = obstacles;
    }

    serialize() {
        this.buffer.writeShort(this.obstacles.length);
        var _loc2_ = 0;
        while (_loc2_ < this.obstacles.length) {
            (this.obstacles[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MapObstacle();
            _loc4_.deserialize(buffer);
            this.obstacles.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.MapObstacleUpdateMessage = MapObstacleUpdateMessage;
module.exports.messages[6051] = MapObstacleUpdateMessage;

class MapRunningFightDetailsMessage extends ProtocolMessage {
    constructor(fightId, attackers, defenders) {
        super(5751);
        this.fightId = fightId;
        this.attackers = attackers;
        this.defenders = defenders;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        this.buffer.writeShort(this.attackers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.attackers.length) {
            this.buffer.writeShort((this.attackers[_loc2_]).getTypeId());
            (this.attackers[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.defenders.length);
        var _loc3_ = 0;
        while (_loc3_ < this.defenders.length) {
            this.buffer.writeShort((this.defenders[_loc3_]).getTypeId());
            (this.defenders[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = 0;
        var _loc9_ = null;
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of MapRunningFightDetailsMessage.fightId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(GameFightFighterLightInformations, _loc6_);
            _loc7_.deserialize(buffer);
            this.attackers.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readUnsignedShort();
            _loc9_ = ProtocolTypeManager.getInstance(GameFightFighterLightInformations, _loc8_);
            _loc9_.deserialize(buffer);
            this.defenders.push(_loc9_);
            _loc5_++;
        }
    }
};
module.exports.MapRunningFightDetailsMessage = MapRunningFightDetailsMessage;
module.exports.messages[5751] = MapRunningFightDetailsMessage;

class MapRunningFightDetailsExtendedMessage extends MapRunningFightDetailsMessage {
    constructor(fightId, attackers, defenders, namedPartyTeams) {
        super(fightId, attackers, defenders);
        this.namedPartyTeams = namedPartyTeams;
        this.messageId = 6500;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.namedPartyTeams.length);
        var _loc2_ = 0;
        while (_loc2_ < this.namedPartyTeams.length) {
            (this.namedPartyTeams[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new NamedPartyTeam();
            _loc4_.deserialize(buffer);
            this.namedPartyTeams.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.MapRunningFightDetailsExtendedMessage = MapRunningFightDetailsExtendedMessage;
module.exports.messages[6500] = MapRunningFightDetailsExtendedMessage;

class MapRunningFightDetailsRequestMessage extends ProtocolMessage {
    constructor(fightId) {
        super(5750);
        this.fightId = fightId;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of MapRunningFightDetailsRequestMessage.fightId.");
        }
    }
};
module.exports.MapRunningFightDetailsRequestMessage = MapRunningFightDetailsRequestMessage;
module.exports.messages[5750] = MapRunningFightDetailsRequestMessage;

class MapRunningFightListMessage extends ProtocolMessage {
    constructor(fights) {
        super(5743);
        this.fights = fights;
    }

    serialize() {
        this.buffer.writeShort(this.fights.length);
        var _loc2_ = 0;
        while (_loc2_ < this.fights.length) {
            (this.fights[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new FightExternalInformations();
            _loc4_.deserialize(buffer);
            this.fights.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.MapRunningFightListMessage = MapRunningFightListMessage;
module.exports.messages[5743] = MapRunningFightListMessage;

class MapRunningFightListRequestMessage extends ProtocolMessage {
    constructor() {
        super(5742);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.MapRunningFightListRequestMessage = MapRunningFightListRequestMessage;
module.exports.messages[5742] = MapRunningFightListRequestMessage;

class AlliancePrismDialogQuestionMessage extends ProtocolMessage {
    constructor() {
        super(6448);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.AlliancePrismDialogQuestionMessage = AlliancePrismDialogQuestionMessage;
module.exports.messages[6448] = AlliancePrismDialogQuestionMessage;

class TaxCollectorDialogQuestionBasicMessage extends ProtocolMessage {
    constructor(guildInfo) {
        super(5619);
        this.guildInfo = guildInfo;
    }

    serialize() {
        this.guildInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.guildInfo = new BasicGuildInformations();
        this.guildInfo.deserialize(buffer);
    }
};
module.exports.TaxCollectorDialogQuestionBasicMessage = TaxCollectorDialogQuestionBasicMessage;
module.exports.messages[5619] = TaxCollectorDialogQuestionBasicMessage;

class TaxCollectorDialogQuestionExtendedMessage extends TaxCollectorDialogQuestionBasicMessage {
    constructor(guildInfo, maxPods, prospecting, wisdom, taxCollectorsCount, taxCollectorAttack, kamas, experience, pods, itemsValue) {
        super(guildInfo);
        this.maxPods = maxPods;
        this.prospecting = prospecting;
        this.wisdom = wisdom;
        this.taxCollectorsCount = taxCollectorsCount;
        this.taxCollectorAttack = taxCollectorAttack;
        this.kamas = kamas;
        this.experience = experience;
        this.pods = pods;
        this.itemsValue = itemsValue;
        this.messageId = 5615;
    }

    serialize() {
        super.serialize();
        if (this.maxPods < 0) {
            throw new Error("Forbidden value (" + this.maxPods + ") on element maxPods.");
        }
        this.buffer.writeVarShort(this.maxPods);
        if (this.prospecting < 0) {
            throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
        }
        this.buffer.writeVarShort(this.prospecting);
        if (this.wisdom < 0) {
            throw new Error("Forbidden value (" + this.wisdom + ") on element wisdom.");
        }
        this.buffer.writeVarShort(this.wisdom);
        if (this.taxCollectorsCount < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorsCount + ") on element taxCollectorsCount.");
        }
        this.buffer.writeByte(this.taxCollectorsCount);
        this.buffer.writeInt(this.taxCollectorAttack);
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        this.buffer.writeVarLong(this.kamas);
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element experience.");
        }
        this.buffer.writeVarLong(this.experience);
        if (this.pods < 0) {
            throw new Error("Forbidden value (" + this.pods + ") on element pods.");
        }
        this.buffer.writeVarInt(this.pods);
        if (this.itemsValue < 0 || this.itemsValue > 9007199254740990) {
            throw new Error("Forbidden value (" + this.itemsValue + ") on element itemsValue.");
        }
        this.buffer.writeVarLong(this.itemsValue);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.maxPods = buffer.readVarUhShort();
        if (this.maxPods < 0) {
            throw new Error("Forbidden value (" + this.maxPods + ") on element of TaxCollectorDialogQuestionExtendedMessage.maxPods.");
        }
        this.prospecting = buffer.readVarUhShort();
        if (this.prospecting < 0) {
            throw new Error("Forbidden value (" + this.prospecting + ") on element of TaxCollectorDialogQuestionExtendedMessage.prospecting.");
        };
        this.wisdom = buffer.readVarUhShort();
        if (this.wisdom < 0) {
            throw new Error("Forbidden value (" + this.wisdom + ") on element of TaxCollectorDialogQuestionExtendedMessage.wisdom.");
        };
        this.taxCollectorsCount = buffer.readByte();
        if (this.taxCollectorsCount < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorsCount + ") on element of TaxCollectorDialogQuestionExtendedMessage.taxCollectorsCount.");
        };
        this.taxCollectorAttack = buffer.readInt();
        this.kamas = buffer.readVarUhLong();
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element of TaxCollectorDialogQuestionExtendedMessage.kamas.");
        };
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element of TaxCollectorDialogQuestionExtendedMessage.experience.");
        };
        this.pods = buffer.readVarUhInt();
        if (this.pods < 0) {
            throw new Error("Forbidden value (" + this.pods + ") on element of TaxCollectorDialogQuestionExtendedMessage.pods.");
        };
        this.itemsValue = buffer.readVarUhLong();
        if (this.itemsValue < 0 || this.itemsValue > 9007199254740990) {
            throw new Error("Forbidden value (" + this.itemsValue + ") on element of TaxCollectorDialogQuestionExtendedMessage.itemsValue.");
        };
    }
};
module.exports.TaxCollectorDialogQuestionExtendedMessage = TaxCollectorDialogQuestionExtendedMessage;
module.exports.messages[5615] = TaxCollectorDialogQuestionExtendedMessage;

class AllianceTaxCollectorDialogQuestionExtendedMessage extends TaxCollectorDialogQuestionExtendedMessage {
    constructor(guildInfo, maxPods, prospecting, wisdom, taxCollectorsCount, taxCollectorAttack, kamas, experience, pods, itemsValue, alliance) {
        super(guildInfo, maxPods, prospecting, wisdom, taxCollectorsCount, taxCollectorAttack, kamas, experience, pods, itemsValue);
        this.alliance = alliance;
        this.messageId = 6445;
    }

    serialize() {
        super.serialize();
        this.alliance.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.alliance = new BasicNamedAllianceInformations();
        this.alliance.deserialize(buffer);
    }
};
module.exports.AllianceTaxCollectorDialogQuestionExtendedMessage = AllianceTaxCollectorDialogQuestionExtendedMessage;
module.exports.messages[6445] = AllianceTaxCollectorDialogQuestionExtendedMessage;

class EntityTalkMessage extends ProtocolMessage {
    constructor(entityId, textId, parameters) {
        super(6110);
        this.entityId = entityId;
        this.textId = textId;
        this.parameters = parameters;
    }

    serialize() {
        if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.entityId + ") on element entityId.");
        }
        this.buffer.writeDouble(this.entityId);
        if (this.textId < 0) {
            throw new Error("Forbidden value (" + this.textId + ") on element textId.");
        }
        this.buffer.writeVarShort(this.textId);
        this.buffer.writeShort(this.parameters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parameters.length) {
            this.buffer.writeUTF(this.parameters[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.entityId = buffer.readDouble();
        if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.entityId + ") on element of EntityTalkMessage.entityId.");
        }
        this.textId = buffer.readVarUhShort();
        if (this.textId < 0) {
            throw new Error("Forbidden value (" + this.textId + ") on element of EntityTalkMessage.textId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.parameters.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.EntityTalkMessage = EntityTalkMessage;
module.exports.messages[6110] = EntityTalkMessage;

class MapNpcsQuestStatusUpdateMessage extends ProtocolMessage {
    constructor(mapId, npcsIdsWithQuest, questFlags, npcsIdsWithoutQuest) {
        super(5642);
        this.mapId = mapId;
        this.npcsIdsWithQuest = npcsIdsWithQuest;
        this.questFlags = questFlags;
        this.npcsIdsWithoutQuest = npcsIdsWithoutQuest;
    }

    serialize() {
        this.buffer.writeInt(this.mapId);
        this.buffer.writeShort(this.npcsIdsWithQuest.length);
        var _loc2_ = 0;
        while (_loc2_ < this.npcsIdsWithQuest.length) {
            this.buffer.writeInt(this.npcsIdsWithQuest[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.questFlags.length);
        var _loc3_ = 0;
        while (_loc3_ < this.questFlags.length) {
            (this.questFlags[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
        this.buffer.writeShort(this.npcsIdsWithoutQuest.length);
        var _loc4_ = 0;
        while (_loc4_ < this.npcsIdsWithoutQuest.length) {
            this.buffer.writeInt(this.npcsIdsWithoutQuest[_loc4_]);
            _loc4_++;
        }
    }

    deserialize(buffer) {
        var _loc8_ = 0;
        var _loc9_ = null;
        var _loc10_ = 0;
        this.mapId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readInt();
            this.npcsIdsWithQuest.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = new GameRolePlayNpcQuestFlag();
            _loc9_.deserialize(buffer);
            this.questFlags.push(_loc9_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = buffer.readInt();
            this.npcsIdsWithoutQuest.push(_loc10_);
            _loc7_++;
        }
    }
};
module.exports.MapNpcsQuestStatusUpdateMessage = MapNpcsQuestStatusUpdateMessage;
module.exports.messages[5642] = MapNpcsQuestStatusUpdateMessage;

class NpcDialogCreationMessage extends ProtocolMessage {
    constructor(mapId, npcId) {
        super(5618);
        this.mapId = mapId;
        this.npcId = npcId;
    }

    serialize() {
        this.buffer.writeInt(this.mapId);
        this.buffer.writeInt(this.npcId);
    }

    deserialize(buffer) {
        this.mapId = buffer.readInt();
        this.npcId = buffer.readInt();;
    }
};
module.exports.NpcDialogCreationMessage = NpcDialogCreationMessage;
module.exports.messages[5618] = NpcDialogCreationMessage;

class NpcDialogQuestionMessage extends ProtocolMessage {
    constructor(messageId, dialogParams, visibleReplies) {
        super(5617);
        this.messageId = messageId;
        this.dialogParams = dialogParams;
        this.visibleReplies = visibleReplies;
    }

    serialize() {
        if (this.messageId < 0) {
            throw new Error("Forbidden value (" + this.messageId + ") on element messageId.");
        }
        this.buffer.writeVarInt(this.messageId);
        this.buffer.writeShort(this.dialogParams.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dialogParams.length) {
            this.buffer.writeUTF(this.dialogParams[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.visibleReplies.length);
        var _loc3_ = 0;
        while (_loc3_ < this.visibleReplies.length) {
            if (this.visibleReplies[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.visibleReplies[_loc3_] + ") on element 3 (starting at 1) of visibleReplies.");
            }
            this.buffer.writeVarInt(this.visibleReplies[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = 0;
        this.messageId = buffer.readVarUhInt();
        if (this.messageId < 0) {
            throw new Error("Forbidden value (" + this.messageId + ") on element of NpcDialogQuestionMessage.messageId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUTF();
            this.dialogParams.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhInt();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of visibleReplies.");
            }
            this.visibleReplies.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.NpcDialogQuestionMessage = NpcDialogQuestionMessage;
module.exports.messages[5617] = NpcDialogQuestionMessage;

class NpcDialogReplyMessage extends ProtocolMessage {
    constructor(replyId) {
        super(5616);
        this.replyId = replyId;
    }

    serialize() {
        if (this.replyId < 0) {
            throw new Error("Forbidden value (" + this.replyId + ") on element replyId.");
        }
        this.buffer.writeVarInt(this.replyId);
    }

    deserialize(buffer) {
        this.replyId = buffer.readVarUhInt();
        if (this.replyId < 0) {
            throw new Error("Forbidden value (" + this.replyId + ") on element of NpcDialogReplyMessage.replyId.");
        }
    }
};
module.exports.NpcDialogReplyMessage = NpcDialogReplyMessage;
module.exports.messages[5616] = NpcDialogReplyMessage;

class NpcGenericActionFailureMessage extends ProtocolMessage {
    constructor() {
        super(5900);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.NpcGenericActionFailureMessage = NpcGenericActionFailureMessage;
module.exports.messages[5900] = NpcGenericActionFailureMessage;

class NpcGenericActionRequestMessage extends ProtocolMessage {
    constructor(npcId, npcActionId, npcMapId) {
        super(5898);
        this.npcId = npcId;
        this.npcActionId = npcActionId;
        this.npcMapId = npcMapId;
    }

    serialize() {
        this.buffer.writeInt(this.npcId);
        if (this.npcActionId < 0) {
            throw new Error("Forbidden value (" + this.npcActionId + ") on element npcActionId.");
        }
        this.buffer.writeByte(this.npcActionId);
        this.buffer.writeInt(this.npcMapId);
    }

    deserialize(buffer) {
        this.npcId = buffer.readInt();
        this.npcActionId = buffer.readByte();
        if (this.npcActionId < 0) {
            throw new Error("Forbidden value (" + this.npcActionId + ") on element of NpcGenericActionRequestMessage.npcActionId.");
        }
        this.npcMapId = buffer.readInt();;
    }
};
module.exports.NpcGenericActionRequestMessage = NpcGenericActionRequestMessage;
module.exports.messages[5898] = NpcGenericActionRequestMessage;

class ObjectGroundAddedMessage extends ProtocolMessage {
    constructor(cellId, objectGID) {
        super(3017);
        this.cellId = cellId;
        this.objectGID = objectGID;
    }

    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
    }

    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of ObjectGroundAddedMessage.cellId.");
        }
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectGroundAddedMessage.objectGID.");
        };
    }
};
module.exports.ObjectGroundAddedMessage = ObjectGroundAddedMessage;
module.exports.messages[3017] = ObjectGroundAddedMessage;

class ObjectGroundListAddedMessage extends ProtocolMessage {
    constructor(cells, referenceIds) {
        super(5925);
        this.cells = cells;
        this.referenceIds = referenceIds;
    }

    serialize() {
        this.buffer.writeShort(this.cells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cells.length) {
            if (this.cells[_loc2_] < 0 || this.cells[_loc2_] > 559) {
                throw new Error("Forbidden value (" + this.cells[_loc2_] + ") on element 1 (starting at 1) of cells.");
            }
            this.buffer.writeVarShort(this.cells[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.referenceIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.referenceIds.length) {
            if (this.referenceIds[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.referenceIds[_loc3_] + ") on element 2 (starting at 1) of referenceIds.");
            }
            this.buffer.writeVarShort(this.referenceIds[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0 || _loc6_ > 559) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of cells.");
            }
            this.cells.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of referenceIds.");
            }
            this.referenceIds.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.ObjectGroundListAddedMessage = ObjectGroundListAddedMessage;
module.exports.messages[5925] = ObjectGroundListAddedMessage;

class ObjectGroundRemovedMessage extends ProtocolMessage {
    constructor(cell) {
        super(3014);
        this.cell = cell;
    }

    serialize() {
        if (this.cell < 0 || this.cell > 559) {
            throw new Error("Forbidden value (" + this.cell + ") on element cell.");
        }
        this.buffer.writeVarShort(this.cell);
    }

    deserialize(buffer) {
        this.cell = buffer.readVarUhShort();
        if (this.cell < 0 || this.cell > 559) {
            throw new Error("Forbidden value (" + this.cell + ") on element of ObjectGroundRemovedMessage.cell.");
        }
    }
};
module.exports.ObjectGroundRemovedMessage = ObjectGroundRemovedMessage;
module.exports.messages[3014] = ObjectGroundRemovedMessage;

class ObjectGroundRemovedMultipleMessage extends ProtocolMessage {
    constructor(cells) {
        super(5944);
        this.cells = cells;
    }

    serialize() {
        this.buffer.writeShort(this.cells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cells.length) {
            if (this.cells[_loc2_] < 0 || this.cells[_loc2_] > 559) {
                throw new Error("Forbidden value (" + this.cells[_loc2_] + ") on element 1 (starting at 1) of cells.");
            }
            this.buffer.writeVarShort(this.cells[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0 || _loc4_ > 559) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of cells.");
            }
            this.cells.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ObjectGroundRemovedMultipleMessage = ObjectGroundRemovedMultipleMessage;
module.exports.messages[5944] = ObjectGroundRemovedMultipleMessage;

class GameDataPlayFarmObjectAnimationMessage extends ProtocolMessage {
    constructor(cellId) {
        super(6026);
        this.cellId = cellId;
    }

    serialize() {
        this.buffer.writeShort(this.cellId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cellId.length) {
            if (this.cellId[_loc2_] < 0 || this.cellId[_loc2_] > 559) {
                throw new Error("Forbidden value (" + this.cellId[_loc2_] + ") on element 1 (starting at 1) of cellId.");
            }
            this.buffer.writeVarShort(this.cellId[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0 || _loc4_ > 559) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of cellId.");
            }
            this.cellId.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GameDataPlayFarmObjectAnimationMessage = GameDataPlayFarmObjectAnimationMessage;
module.exports.messages[6026] = GameDataPlayFarmObjectAnimationMessage;

class PaddockPropertiesMessage extends ProtocolMessage {
    constructor(properties) {
        super(5824);
        this.properties = properties;
    }

    serialize() {
        this.properties.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.properties = new PaddockInstancesInformations();
        this.properties.deserialize(buffer);
    }
};
module.exports.PaddockPropertiesMessage = PaddockPropertiesMessage;
module.exports.messages[5824] = PaddockPropertiesMessage;

class PaddockSellBuyDialogMessage extends ProtocolMessage {
    constructor(bsell, ownerId, price) {
        super(6018);
        this.bsell = bsell;
        this.ownerId = ownerId;
        this.price = price;
    }

    serialize() {
        this.buffer.writeBoolean(this.bsell);
        if (this.ownerId < 0) {
            throw new Error("Forbidden value (" + this.ownerId + ") on element ownerId.");
        }
        this.buffer.writeVarInt(this.ownerId);
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarLong(this.price);
    }

    deserialize(buffer) {
        this.bsell = buffer.readBoolean();
        this.ownerId = buffer.readVarUhInt();
        if (this.ownerId < 0) {
            throw new Error("Forbidden value (" + this.ownerId + ") on element of PaddockSellBuyDialogMessage.ownerId.");
        }
        this.price = buffer.readVarUhLong();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element of PaddockSellBuyDialogMessage.price.");
        };
    }
};
module.exports.PaddockSellBuyDialogMessage = PaddockSellBuyDialogMessage;
module.exports.messages[6018] = PaddockSellBuyDialogMessage;

class PaddockToSellFilterMessage extends ProtocolMessage {
    constructor(areaId, atLeastNbMount, atLeastNbMachine, maxPrice) {
        super(6161);
        this.areaId = areaId;
        this.atLeastNbMount = atLeastNbMount;
        this.atLeastNbMachine = atLeastNbMachine;
        this.maxPrice = maxPrice;
    }

    serialize() {
        this.buffer.writeInt(this.areaId);
        this.buffer.writeByte(this.atLeastNbMount);
        this.buffer.writeByte(this.atLeastNbMachine);
        if (this.maxPrice < 0 || this.maxPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.maxPrice + ") on element maxPrice.");
        }
        this.buffer.writeVarLong(this.maxPrice);
    }

    deserialize(buffer) {
        this.areaId = buffer.readInt();
        this.atLeastNbMount = buffer.readByte();;
        this.atLeastNbMachine = buffer.readByte();;
        this.maxPrice = buffer.readVarUhLong();
        if (this.maxPrice < 0 || this.maxPrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.maxPrice + ") on element of PaddockToSellFilterMessage.maxPrice.");
        }
    }
};
module.exports.PaddockToSellFilterMessage = PaddockToSellFilterMessage;
module.exports.messages[6161] = PaddockToSellFilterMessage;

class PaddockToSellListMessage extends ProtocolMessage {
    constructor(pageIndex, totalPage, paddockList) {
        super(6138);
        this.pageIndex = pageIndex;
        this.totalPage = totalPage;
        this.paddockList = paddockList;
    }

    serialize() {
        if (this.pageIndex < 0) {
            throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
        }
        this.buffer.writeVarShort(this.pageIndex);
        if (this.totalPage < 0) {
            throw new Error("Forbidden value (" + this.totalPage + ") on element totalPage.");
        }
        this.buffer.writeVarShort(this.totalPage);
        this.buffer.writeShort(this.paddockList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.paddockList.length) {
            (this.paddockList[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.pageIndex = buffer.readVarUhShort();
        if (this.pageIndex < 0) {
            throw new Error("Forbidden value (" + this.pageIndex + ") on element of PaddockToSellListMessage.pageIndex.");
        }
        this.totalPage = buffer.readVarUhShort();
        if (this.totalPage < 0) {
            throw new Error("Forbidden value (" + this.totalPage + ") on element of PaddockToSellListMessage.totalPage.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PaddockInformationsForSell();
            _loc4_.deserialize(buffer);
            this.paddockList.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.PaddockToSellListMessage = PaddockToSellListMessage;
module.exports.messages[6138] = PaddockToSellListMessage;

class PaddockToSellListRequestMessage extends ProtocolMessage {
    constructor(pageIndex) {
        super(6141);
        this.pageIndex = pageIndex;
    }

    serialize() {
        if (this.pageIndex < 0) {
            throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
        }
        this.buffer.writeVarShort(this.pageIndex);
    }

    deserialize(buffer) {
        this.pageIndex = buffer.readVarUhShort();
        if (this.pageIndex < 0) {
            throw new Error("Forbidden value (" + this.pageIndex + ") on element of PaddockToSellListRequestMessage.pageIndex.");
        }
    }
};
module.exports.PaddockToSellListRequestMessage = PaddockToSellListRequestMessage;
module.exports.messages[6141] = PaddockToSellListRequestMessage;

class AbstractPartyMessage extends ProtocolMessage {
    constructor(partyId) {
        super(6274);
        this.partyId = partyId;
    }

    serialize() {
        if (this.partyId < 0) {
            throw new Error("Forbidden value (" + this.partyId + ") on element partyId.");
        }
        this.buffer.writeVarInt(this.partyId);
    }

    deserialize(buffer) {
        this.partyId = buffer.readVarUhInt();
        if (this.partyId < 0) {
            throw new Error("Forbidden value (" + this.partyId + ") on element of AbstractPartyMessage.partyId.");
        }
    }
};
module.exports.AbstractPartyMessage = AbstractPartyMessage;
module.exports.messages[6274] = AbstractPartyMessage;

class AbstractPartyEventMessage extends AbstractPartyMessage {
    constructor(partyId) {
        super(partyId);
        this.messageId = 6273;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.AbstractPartyEventMessage = AbstractPartyEventMessage;
module.exports.messages[6273] = AbstractPartyEventMessage;

class PartyUpdateLightMessage extends AbstractPartyEventMessage {
    constructor(partyId, id, lifePoints, maxLifePoints, prospecting, regenRate) {
        super(partyId);
        this.id = id;
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
        this.prospecting = prospecting;
        this.regenRate = regenRate;
        this.messageId = 6054;
    }

    serialize() {
        super.serialize();
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        this.buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        this.buffer.writeVarInt(this.maxLifePoints);
        if (this.prospecting < 0) {
            throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
        }
        this.buffer.writeVarShort(this.prospecting);
        if (this.regenRate < 0 || this.regenRate > 255) {
            throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
        }
        this.buffer.writeByte(this.regenRate);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of PartyUpdateLightMessage.id.");
        }
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            throw new Error("Forbidden value (" + this.lifePoints + ") on element of PartyUpdateLightMessage.lifePoints.");
        };
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of PartyUpdateLightMessage.maxLifePoints.");
        };
        this.prospecting = buffer.readVarUhShort();
        if (this.prospecting < 0) {
            throw new Error("Forbidden value (" + this.prospecting + ") on element of PartyUpdateLightMessage.prospecting.");
        };
        this.regenRate = buffer.readUnsignedByte();
        if (this.regenRate < 0 || this.regenRate > 255) {
            throw new Error("Forbidden value (" + this.regenRate + ") on element of PartyUpdateLightMessage.regenRate.");
        };
    }
};
module.exports.PartyUpdateLightMessage = PartyUpdateLightMessage;
module.exports.messages[6054] = PartyUpdateLightMessage;

class PartyCompanionUpdateLightMessage extends PartyUpdateLightMessage {
    constructor(param1, id, lifePoints, maxLifePoints, prospecting, regenRate, indexId) {
        super(partyId, id, lifePoints, maxLifePoints, prospecting, regenRate);
        this.indexId = indexId;
        this.messageId = 6472;
    }

    serialize() {
        super.serialize();
        if (this.indexId < 0) {
            throw new Error("Forbidden value (" + this.indexId + ") on element indexId.");
        }
        this.buffer.writeByte(this.indexId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.indexId = buffer.readByte();
        if (this.indexId < 0) {
            throw new Error("Forbidden value (" + this.indexId + ") on element of PartyCompanionUpdateLightMessage.indexId.");
        }
    }
};
module.exports.PartyCompanionUpdateLightMessage = PartyCompanionUpdateLightMessage;
module.exports.messages[6472] = PartyCompanionUpdateLightMessage;

class DungeonPartyFinderAvailableDungeonsMessage extends ProtocolMessage {
    constructor(dungeonIds) {
        super(6242);
        this.dungeonIds = dungeonIds;
    }

    serialize() {
        this.buffer.writeShort(this.dungeonIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dungeonIds.length) {
            if (this.dungeonIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.dungeonIds[_loc2_] + ") on element 1 (starting at 1) of dungeonIds.");
            }
            this.buffer.writeVarShort(this.dungeonIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of dungeonIds.");
            }
            this.dungeonIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DungeonPartyFinderAvailableDungeonsMessage = DungeonPartyFinderAvailableDungeonsMessage;
module.exports.messages[6242] = DungeonPartyFinderAvailableDungeonsMessage;

class DungeonPartyFinderAvailableDungeonsRequestMessage extends ProtocolMessage {
    constructor() {
        super(6240);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.DungeonPartyFinderAvailableDungeonsRequestMessage = DungeonPartyFinderAvailableDungeonsRequestMessage;
module.exports.messages[6240] = DungeonPartyFinderAvailableDungeonsRequestMessage;

class DungeonPartyFinderListenErrorMessage extends ProtocolMessage {
    constructor(dungeonId) {
        super(6248);
        this.dungeonId = dungeonId;
    }

    serialize() {
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
    }

    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderListenErrorMessage.dungeonId.");
        }
    }
};
module.exports.DungeonPartyFinderListenErrorMessage = DungeonPartyFinderListenErrorMessage;
module.exports.messages[6248] = DungeonPartyFinderListenErrorMessage;

class DungeonPartyFinderListenRequestMessage extends ProtocolMessage {
    constructor(dungeonId) {
        super(6246);
        this.dungeonId = dungeonId;
    }

    serialize() {
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
    }

    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderListenRequestMessage.dungeonId.");
        }
    }
};
module.exports.DungeonPartyFinderListenRequestMessage = DungeonPartyFinderListenRequestMessage;
module.exports.messages[6246] = DungeonPartyFinderListenRequestMessage;

class DungeonPartyFinderRegisterErrorMessage extends ProtocolMessage {
    constructor() {
        super(6243);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.DungeonPartyFinderRegisterErrorMessage = DungeonPartyFinderRegisterErrorMessage;
module.exports.messages[6243] = DungeonPartyFinderRegisterErrorMessage;

class DungeonPartyFinderRegisterRequestMessage extends ProtocolMessage {
    constructor(dungeonIds) {
        super(6249);
        this.dungeonIds = dungeonIds;
    }

    serialize() {
        this.buffer.writeShort(this.dungeonIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dungeonIds.length) {
            if (this.dungeonIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.dungeonIds[_loc2_] + ") on element 1 (starting at 1) of dungeonIds.");
            }
            this.buffer.writeVarShort(this.dungeonIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of dungeonIds.");
            }
            this.dungeonIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DungeonPartyFinderRegisterRequestMessage = DungeonPartyFinderRegisterRequestMessage;
module.exports.messages[6249] = DungeonPartyFinderRegisterRequestMessage;

class DungeonPartyFinderRegisterSuccessMessage extends ProtocolMessage {
    constructor(dungeonIds) {
        super(6241);
        this.dungeonIds = dungeonIds;
    }

    serialize() {
        this.buffer.writeShort(this.dungeonIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dungeonIds.length) {
            if (this.dungeonIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.dungeonIds[_loc2_] + ") on element 1 (starting at 1) of dungeonIds.");
            }
            this.buffer.writeVarShort(this.dungeonIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of dungeonIds.");
            }
            this.dungeonIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DungeonPartyFinderRegisterSuccessMessage = DungeonPartyFinderRegisterSuccessMessage;
module.exports.messages[6241] = DungeonPartyFinderRegisterSuccessMessage;

class DungeonPartyFinderRoomContentMessage extends ProtocolMessage {
    constructor(dungeonId, players) {
        super(6247);
        this.dungeonId = dungeonId;
        this.players = players;
    }

    serialize() {
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        this.buffer.writeShort(this.players.length);
        var _loc2_ = 0;
        while (_loc2_ < this.players.length) {
            (this.players[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderRoomContentMessage.dungeonId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DungeonPartyFinderPlayer();
            _loc4_.deserialize(buffer);
            this.players.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DungeonPartyFinderRoomContentMessage = DungeonPartyFinderRoomContentMessage;
module.exports.messages[6247] = DungeonPartyFinderRoomContentMessage;

class DungeonPartyFinderRoomContentUpdateMessage extends ProtocolMessage {
    constructor(dungeonId, addedPlayers, removedPlayersIds) {
        super(6250);
        this.dungeonId = dungeonId;
        this.addedPlayers = addedPlayers;
        this.removedPlayersIds = removedPlayersIds;
    }

    serialize() {
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        this.buffer.writeShort(this.addedPlayers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.addedPlayers.length) {
            (this.addedPlayers[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.removedPlayersIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.removedPlayersIds.length) {
            if (this.removedPlayersIds[_loc3_] < 0 || this.removedPlayersIds[_loc3_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.removedPlayersIds[_loc3_] + ") on element 3 (starting at 1) of removedPlayersIds.");
            }
            this.buffer.writeVarLong(this.removedPlayersIds[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = NaN;
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderRoomContentUpdateMessage.dungeonId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new DungeonPartyFinderPlayer();
            _loc6_.deserialize(buffer);
            this.addedPlayers.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhLong();
            if (_loc7_ < 0 || _loc7_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of removedPlayersIds.");
            }
            this.removedPlayersIds.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.DungeonPartyFinderRoomContentUpdateMessage = DungeonPartyFinderRoomContentUpdateMessage;
module.exports.messages[6250] = DungeonPartyFinderRoomContentUpdateMessage;

class PartyAbdicateThroneMessage extends AbstractPartyMessage {
    constructor(partyId, playerId) {
        super(partyId);
        this.playerId = playerId;
        this.messageId = 6080;
    }

    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of PartyAbdicateThroneMessage.playerId.");
        }
    }
};
module.exports.PartyAbdicateThroneMessage = PartyAbdicateThroneMessage;
module.exports.messages[6080] = PartyAbdicateThroneMessage;

class PartyAcceptInvitationMessage extends AbstractPartyMessage {
    constructor(partyId) {
        super(partyId);
        this.messageId = 5580;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.PartyAcceptInvitationMessage = PartyAcceptInvitationMessage;
module.exports.messages[5580] = PartyAcceptInvitationMessage;

class PartyCancelInvitationMessage extends AbstractPartyMessage {
    constructor(partyId, guestId) {
        super(partyId);
        this.guestId = guestId;
        this.messageId = 6254;
    }

    serialize() {
        super.serialize();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element of PartyCancelInvitationMessage.guestId.");
        }
    }
};
module.exports.PartyCancelInvitationMessage = PartyCancelInvitationMessage;
module.exports.messages[6254] = PartyCancelInvitationMessage;

class PartyCancelInvitationNotificationMessage extends AbstractPartyEventMessage {
    constructor(partyId, cancelerId, guestId) {
        super(partyId);
        this.cancelerId = cancelerId;
        this.guestId = guestId;
        this.messageId = 6251;
    }

    serialize() {
        super.serialize();
        if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.cancelerId + ") on element cancelerId.");
        }
        this.buffer.writeVarLong(this.cancelerId);
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.cancelerId = buffer.readVarUhLong();
        if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.cancelerId + ") on element of PartyCancelInvitationNotificationMessage.cancelerId.");
        }
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element of PartyCancelInvitationNotificationMessage.guestId.");
        };
    }
};
module.exports.PartyCancelInvitationNotificationMessage = PartyCancelInvitationNotificationMessage;
module.exports.messages[6251] = PartyCancelInvitationNotificationMessage;

class PartyCannotJoinErrorMessage extends AbstractPartyMessage {
    constructor(partyId, reason) {
        super(partyId);
        this.reason = reason;
        this.messageId = 5583;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of PartyCannotJoinErrorMessage.reason.");
        }
    }
};
module.exports.PartyCannotJoinErrorMessage = PartyCannotJoinErrorMessage;
module.exports.messages[5583] = PartyCannotJoinErrorMessage;

class PartyDeletedMessage extends AbstractPartyMessage {
    constructor(partyId) {
        super(partyId);
        this.messageId = 6261;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.PartyDeletedMessage = PartyDeletedMessage;
module.exports.messages[6261] = PartyDeletedMessage;

class PartyFollowMemberRequestMessage extends AbstractPartyMessage {
    constructor(partyId, playerId) {
        super(partyId);
        this.playerId = playerId;
        this.messageId = 5577;
    }

    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of PartyFollowMemberRequestMessage.playerId.");
        }
    }
};
module.exports.PartyFollowMemberRequestMessage = PartyFollowMemberRequestMessage;
module.exports.messages[5577] = PartyFollowMemberRequestMessage;

class PartyFollowStatusUpdateMessage extends AbstractPartyMessage {
    constructor(partyId, success, isFollowed, followedId) {
        super(partyId);
        this.success = success;
        this.isFollowed = isFollowed;
        this.followedId = followedId;
        this.messageId = 5581;
    }

    serialize() {
        super.serialize();
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.success);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.isFollowed);
        this.buffer.writeByte(_loc2_);
        if (this.followedId < 0 || this.followedId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.followedId + ") on element followedId.");
        }
        this.buffer.writeVarLong(this.followedId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.deserializeByteBoxes(buffer);
        this.followedId = buffer.readVarUhLong();
        if (this.followedId < 0 || this.followedId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.followedId + ") on element of PartyFollowStatusUpdateMessage.followedId.");
        }
    }
};
module.exports.PartyFollowStatusUpdateMessage = PartyFollowStatusUpdateMessage;
module.exports.messages[5581] = PartyFollowStatusUpdateMessage;

class PartyFollowThisMemberRequestMessage extends PartyFollowMemberRequestMessage {
    constructor(partyId, playerId, enabled) {
        super(partyId, playerId);
        this.enabled = enabled;
        this.messageId = 5588;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.enabled);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.enabled = buffer.readBoolean();
    }
};
module.exports.PartyFollowThisMemberRequestMessage = PartyFollowThisMemberRequestMessage;
module.exports.messages[5588] = PartyFollowThisMemberRequestMessage;

class PartyInvitationRequestMessage extends ProtocolMessage {
    constructor(name) {
        super(5585);
        this.name = name;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
    }

    deserialize(buffer) {
        this.name = buffer.readUTF();
    }
};
module.exports.PartyInvitationRequestMessage = PartyInvitationRequestMessage;
module.exports.messages[5585] = PartyInvitationRequestMessage;

class PartyInvitationArenaRequestMessage extends PartyInvitationRequestMessage {
    constructor(name) {
        super(name);
        this.messageId = 6283;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.PartyInvitationArenaRequestMessage = PartyInvitationArenaRequestMessage;
module.exports.messages[6283] = PartyInvitationArenaRequestMessage;

class PartyInvitationCancelledForGuestMessage extends AbstractPartyMessage {
    constructor(partyId, cancelerId) {
        super(partyId);
        this.cancelerId = cancelerId;
        this.messageId = 6256;
    }

    serialize() {
        super.serialize();
        if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.cancelerId + ") on element cancelerId.");
        }
        this.buffer.writeVarLong(this.cancelerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.cancelerId = buffer.readVarUhLong();
        if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.cancelerId + ") on element of PartyInvitationCancelledForGuestMessage.cancelerId.");
        }
    }
};
module.exports.PartyInvitationCancelledForGuestMessage = PartyInvitationCancelledForGuestMessage;
module.exports.messages[6256] = PartyInvitationCancelledForGuestMessage;

class PartyInvitationDetailsMessage extends AbstractPartyMessage {
    constructor(partyId, partyType, partyName, fromId, fromName, leaderId, members, guests) {
        super(partyId);
        this.partyType = partyType;
        this.partyName = partyName;
        this.fromId = fromId;
        this.fromName = fromName;
        this.leaderId = leaderId;
        this.members = members;
        this.guests = guests;
        this.messageId = 6263;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.partyType);
        this.buffer.writeUTF(this.partyName);
        if (this.fromId < 0 || this.fromId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fromId + ") on element fromId.");
        }
        this.buffer.writeVarLong(this.fromId);
        this.buffer.writeUTF(this.fromName);
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
        }
        this.buffer.writeVarLong(this.leaderId);
        this.buffer.writeShort(this.members.length);
        var _loc2_ = 0;
        while (_loc2_ < this.members.length) {
            (this.members[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.guests.length);
        var _loc3_ = 0;
        while (_loc3_ < this.guests.length) {
            (this.guests[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        super.deserialize(buffer);
        this.partyType = buffer.readByte();
        if (this.partyType < 0) {
            throw new Error("Forbidden value (" + this.partyType + ") on element of PartyInvitationDetailsMessage.partyType.");
        }
        this.partyName = buffer.readUTF();
        this.fromId = buffer.readVarUhLong();
        if (this.fromId < 0 || this.fromId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fromId + ") on element of PartyInvitationDetailsMessage.fromId.");
        };
        this.fromName = buffer.readUTF();;
        this.leaderId = buffer.readVarUhLong();
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leaderId + ") on element of PartyInvitationDetailsMessage.leaderId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new PartyInvitationMemberInformations();
            _loc6_.deserialize(buffer);
            this.members.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new PartyGuestInformations();
            _loc7_.deserialize(buffer);
            this.guests.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.PartyInvitationDetailsMessage = PartyInvitationDetailsMessage;
module.exports.messages[6263] = PartyInvitationDetailsMessage;

class PartyInvitationDetailsRequestMessage extends AbstractPartyMessage {
    constructor(partyId) {
        super(partyId);
        this.messageId = 6264;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.PartyInvitationDetailsRequestMessage = PartyInvitationDetailsRequestMessage;
module.exports.messages[6264] = PartyInvitationDetailsRequestMessage;

class PartyInvitationDungeonDetailsMessage extends PartyInvitationDetailsMessage {
    constructor(partyId, partyType, partyName, fromId, fromName, leaderId, members, guests, dungeonId, playersDungeonReady) {
        super(partyId, partyType, partyName, fromId, fromName, leaderId, members, guests);
        this.dungeonId = dungeonId;
        this.playersDungeonReady = playersDungeonReady;
        this.messageId = 6262;
    }

    serialize() {
        super.serialize();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        this.buffer.writeShort(this.playersDungeonReady.length);
        var _loc2_ = 0;
        while (_loc2_ < this.playersDungeonReady.length) {
            this.buffer.writeBoolean(this.playersDungeonReady[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = false;
        super.deserialize(buffer);
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonDetailsMessage.dungeonId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readBoolean();
            this.playersDungeonReady.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.PartyInvitationDungeonDetailsMessage = PartyInvitationDungeonDetailsMessage;
module.exports.messages[6262] = PartyInvitationDungeonDetailsMessage;

class PartyInvitationMessage extends AbstractPartyMessage {
    constructor(partyId, partyType, partyName, maxParticipants, fromId, fromName, toId) {
        super(partyId);
        this.partyType = partyType;
        this.partyName = partyName;
        this.maxParticipants = maxParticipants;
        this.fromId = fromId;
        this.fromName = fromName;
        this.toId = toId;
        this.messageId = 5586;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.partyType);
        this.buffer.writeUTF(this.partyName);
        if (this.maxParticipants < 0) {
            throw new Error("Forbidden value (" + this.maxParticipants + ") on element maxParticipants.");
        }
        this.buffer.writeByte(this.maxParticipants);
        if (this.fromId < 0 || this.fromId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fromId + ") on element fromId.");
        }
        this.buffer.writeVarLong(this.fromId);
        this.buffer.writeUTF(this.fromName);
        if (this.toId < 0 || this.toId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.toId + ") on element toId.");
        }
        this.buffer.writeVarLong(this.toId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.partyType = buffer.readByte();
        if (this.partyType < 0) {
            throw new Error("Forbidden value (" + this.partyType + ") on element of PartyInvitationMessage.partyType.");
        }
        this.partyName = buffer.readUTF();
        this.maxParticipants = buffer.readByte();
        if (this.maxParticipants < 0) {
            throw new Error("Forbidden value (" + this.maxParticipants + ") on element of PartyInvitationMessage.maxParticipants.");
        };
        this.fromId = buffer.readVarUhLong();
        if (this.fromId < 0 || this.fromId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fromId + ") on element of PartyInvitationMessage.fromId.");
        };
        this.fromName = buffer.readUTF();;
        this.toId = buffer.readVarUhLong();
        if (this.toId < 0 || this.toId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.toId + ") on element of PartyInvitationMessage.toId.");
        };
    }
};
module.exports.PartyInvitationMessage = PartyInvitationMessage;
module.exports.messages[5586] = PartyInvitationMessage;

class PartyInvitationDungeonMessage extends PartyInvitationMessage {
    constructor(partyId, partyType, partyName, maxParticipants, fromId, fromName, toId, dungeonId) {
        super(partyId, partyType, partyName, maxParticipants, fromId, fromName, toId);
        this.dungeonId = dungeonId;
        this.messageId = 6244;
    }

    serialize() {
        super.serialize();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonMessage.dungeonId.");
        }
    }
};
module.exports.PartyInvitationDungeonMessage = PartyInvitationDungeonMessage;
module.exports.messages[6244] = PartyInvitationDungeonMessage;

class PartyInvitationDungeonRequestMessage extends PartyInvitationRequestMessage {
    constructor(name, dungeonId) {
        super(name);
        this.dungeonId = dungeonId;
        this.messageId = 6245;
    }

    serialize() {
        super.serialize();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonRequestMessage.dungeonId.");
        }
    }
};
module.exports.PartyInvitationDungeonRequestMessage = PartyInvitationDungeonRequestMessage;
module.exports.messages[6245] = PartyInvitationDungeonRequestMessage;

class PartyJoinMessage extends AbstractPartyMessage {
    constructor(partyId, partyType, partyLeaderId, maxParticipants, members, guests, restricted, partyName) {
        super(partyId);
        this.partyType = partyType;
        this.partyLeaderId = partyLeaderId;
        this.maxParticipants = maxParticipants;
        this.members = members;
        this.guests = guests;
        this.restricted = restricted;
        this.partyName = partyName;
        this.messageId = 5576;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.partyType);
        if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.partyLeaderId + ") on element partyLeaderId.");
        }
        this.buffer.writeVarLong(this.partyLeaderId);
        if (this.maxParticipants < 0) {
            throw new Error("Forbidden value (" + this.maxParticipants + ") on element maxParticipants.");
        }
        this.buffer.writeByte(this.maxParticipants);
        this.buffer.writeShort(this.members.length);
        var _loc2_ = 0;
        while (_loc2_ < this.members.length) {
            this.buffer.writeShort((this.members[_loc2_]).getTypeId());
            (this.members[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.guests.length);
        var _loc3_ = 0;
        while (_loc3_ < this.guests.length) {
            (this.guests[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
        this.buffer.writeBoolean(this.restricted);
        this.buffer.writeUTF(this.partyName);
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = null;
        super.deserialize(buffer);
        this.partyType = buffer.readByte();
        if (this.partyType < 0) {
            throw new Error("Forbidden value (" + this.partyType + ") on element of PartyJoinMessage.partyType.");
        }
        this.partyLeaderId = buffer.readVarUhLong();
        if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.partyLeaderId + ") on element of PartyJoinMessage.partyLeaderId.");
        };
        this.maxParticipants = buffer.readByte();
        if (this.maxParticipants < 0) {
            throw new Error("Forbidden value (" + this.maxParticipants + ") on element of PartyJoinMessage.maxParticipants.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(PartyMemberInformations, _loc6_);
            _loc7_.deserialize(buffer);
            this.members.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = new PartyGuestInformations();
            _loc8_.deserialize(buffer);
            this.guests.push(_loc8_);
            _loc5_++;
        }
        this._restrictedFunc(buffer);
        this.partyName = buffer.readUTF();
    }
};
module.exports.PartyJoinMessage = PartyJoinMessage;
module.exports.messages[5576] = PartyJoinMessage;

class PartyKickedByMessage extends AbstractPartyMessage {
    constructor(partyId, kickerId) {
        super(partyId);
        this.kickerId = kickerId;
        this.messageId = 5590;
    }

    serialize() {
        super.serialize();
        if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kickerId + ") on element kickerId.");
        }
        this.buffer.writeVarLong(this.kickerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.kickerId = buffer.readVarUhLong();
        if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kickerId + ") on element of PartyKickedByMessage.kickerId.");
        }
    }
};
module.exports.PartyKickedByMessage = PartyKickedByMessage;
module.exports.messages[5590] = PartyKickedByMessage;

class PartyKickRequestMessage extends AbstractPartyMessage {
    constructor(partyId, playerId) {
        super(partyId);
        this.playerId = playerId;
        this.messageId = 5592;
    }

    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of PartyKickRequestMessage.playerId.");
        }
    }
};
module.exports.PartyKickRequestMessage = PartyKickRequestMessage;
module.exports.messages[5592] = PartyKickRequestMessage;

class PartyLeaderUpdateMessage extends AbstractPartyEventMessage {
    constructor(partyId, partyLeaderId) {
        super(partyId);
        this.partyLeaderId = partyLeaderId;
        this.messageId = 5578;
    }

    serialize() {
        super.serialize();
        if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.partyLeaderId + ") on element partyLeaderId.");
        }
        this.buffer.writeVarLong(this.partyLeaderId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.partyLeaderId = buffer.readVarUhLong();
        if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.partyLeaderId + ") on element of PartyLeaderUpdateMessage.partyLeaderId.");
        }
    }
};
module.exports.PartyLeaderUpdateMessage = PartyLeaderUpdateMessage;
module.exports.messages[5578] = PartyLeaderUpdateMessage;

class PartyLeaveMessage extends AbstractPartyMessage {
    constructor(partyId) {
        super(partyId);
        this.messageId = 5594;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.PartyLeaveMessage = PartyLeaveMessage;
module.exports.messages[5594] = PartyLeaveMessage;

class PartyLeaveRequestMessage extends AbstractPartyMessage {
    constructor(partyId) {
        super(partyId);
        this.messageId = 5593;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.PartyLeaveRequestMessage = PartyLeaveRequestMessage;
module.exports.messages[5593] = PartyLeaveRequestMessage;

class PartyLocateMembersMessage extends AbstractPartyMessage {
    constructor(partyId, geopositions) {
        super(partyId);
        this.geopositions = geopositions;
        this.messageId = 5595;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.geopositions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.geopositions.length) {
            (this.geopositions[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PartyMemberGeoPosition();
            _loc4_.deserialize(buffer);
            this.geopositions.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.PartyLocateMembersMessage = PartyLocateMembersMessage;
module.exports.messages[5595] = PartyLocateMembersMessage;

class PartyLocateMembersRequestMessage extends AbstractPartyMessage {
    constructor(partyId) {
        super(partyId);
        this.messageId = 5587;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.PartyLocateMembersRequestMessage = PartyLocateMembersRequestMessage;
module.exports.messages[5587] = PartyLocateMembersRequestMessage;

class PartyLoyaltyStatusMessage extends AbstractPartyMessage {
    constructor(partyId, loyal) {
        super(partyId);
        this.loyal = loyal;
        this.messageId = 6270;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.loyal);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.loyal = buffer.readBoolean();
    }
};
module.exports.PartyLoyaltyStatusMessage = PartyLoyaltyStatusMessage;
module.exports.messages[6270] = PartyLoyaltyStatusMessage;

class PartyMemberRemoveMessage extends AbstractPartyEventMessage {
    constructor(partyId, leavingPlayerId) {
        super(partyId);
        this.leavingPlayerId = leavingPlayerId;
        this.messageId = 5579;
    }

    serialize() {
        super.serialize();
        if (this.leavingPlayerId < 0 || this.leavingPlayerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leavingPlayerId + ") on element leavingPlayerId.");
        }
        this.buffer.writeVarLong(this.leavingPlayerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.leavingPlayerId = buffer.readVarUhLong();
        if (this.leavingPlayerId < 0 || this.leavingPlayerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.leavingPlayerId + ") on element of PartyMemberRemoveMessage.leavingPlayerId.");
        }
    }
};
module.exports.PartyMemberRemoveMessage = PartyMemberRemoveMessage;
module.exports.messages[5579] = PartyMemberRemoveMessage;

class PartyMemberEjectedMessage extends PartyMemberRemoveMessage {
    constructor(param1, leavingPlayerId, kickerId) {
        super(partyId, leavingPlayerId);
        this.kickerId = kickerId;
        this.messageId = 6252;
    }

    serialize() {
        super.serialize();
        if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kickerId + ") on element kickerId.");
        }
        this.buffer.writeVarLong(this.kickerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.kickerId = buffer.readVarUhLong();
        if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kickerId + ") on element of PartyMemberEjectedMessage.kickerId.");
        }
    }
};
module.exports.PartyMemberEjectedMessage = PartyMemberEjectedMessage;
module.exports.messages[6252] = PartyMemberEjectedMessage;

class PartyMemberInFightMessage extends AbstractPartyMessage {
    constructor(partyId, reason, memberId, memberAccountId, memberName, fightId, fightMap, timeBeforeFightStart) {
        super(partyId);
        this.reason = reason;
        this.memberId = memberId;
        this.memberAccountId = memberAccountId;
        this.memberName = memberName;
        this.fightId = fightId;
        this.fightMap = fightMap;
        this.timeBeforeFightStart = timeBeforeFightStart;
        this.messageId = 6342;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.reason);
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        if (this.memberAccountId < 0) {
            throw new Error("Forbidden value (" + this.memberAccountId + ") on element memberAccountId.");
        }
        this.buffer.writeInt(this.memberAccountId);
        this.buffer.writeUTF(this.memberName);
        this.buffer.writeInt(this.fightId);
        this.fightMap.serialize(this.buffer);
        this.buffer.writeVarShort(this.timeBeforeFightStart);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of PartyMemberInFightMessage.reason.");
        }
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element of PartyMemberInFightMessage.memberId.");
        };
        this.memberAccountId = buffer.readInt();
        if (this.memberAccountId < 0) {
            throw new Error("Forbidden value (" + this.memberAccountId + ") on element of PartyMemberInFightMessage.memberAccountId.");
        };
        this.memberName = buffer.readUTF();
        this.fightId = buffer.readInt();;
        this.fightMap = new MapCoordinatesExtended();
        this.fightMap.deserialize(buffer);
        this.timeBeforeFightStart = buffer.readVarShort();;
    }
};
module.exports.PartyMemberInFightMessage = PartyMemberInFightMessage;
module.exports.messages[6342] = PartyMemberInFightMessage;

class PartyModifiableStatusMessage extends AbstractPartyMessage {
    constructor(partyId, enabled) {
        super(partyId);
        this.enabled = enabled;
        this.messageId = 6277;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.enabled);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.enabled = buffer.readBoolean();
    }
};
module.exports.PartyModifiableStatusMessage = PartyModifiableStatusMessage;
module.exports.messages[6277] = PartyModifiableStatusMessage;

class PartyNameSetErrorMessage extends AbstractPartyMessage {
    constructor(partyId, result) {
        super(partyId);
        this.result = result;
        this.messageId = 6501;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.result);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.result = buffer.readByte();
        if (this.result < 0) {
            throw new Error("Forbidden value (" + this.result + ") on element of PartyNameSetErrorMessage.result.");
        }
    }
};
module.exports.PartyNameSetErrorMessage = PartyNameSetErrorMessage;
module.exports.messages[6501] = PartyNameSetErrorMessage;

class PartyNameSetRequestMessage extends AbstractPartyMessage {
    constructor(partyId, partyName) {
        super(partyId);
        this.partyName = partyName;
        this.messageId = 6503;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.partyName);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.partyName = buffer.readUTF();
    }
};
module.exports.PartyNameSetRequestMessage = PartyNameSetRequestMessage;
module.exports.messages[6503] = PartyNameSetRequestMessage;

class PartyNameUpdateMessage extends AbstractPartyMessage {
    constructor(partyId, partyName) {
        super(partyId);
        this.partyName = partyName;
        this.messageId = 6502;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.partyName);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.partyName = buffer.readUTF();
    }
};
module.exports.PartyNameUpdateMessage = PartyNameUpdateMessage;
module.exports.messages[6502] = PartyNameUpdateMessage;

class PartyNewGuestMessage extends AbstractPartyEventMessage {
    constructor(partyId, guest) {
        super(partyId);
        this.guest = guest;
        this.messageId = 6260;
    }

    serialize() {
        super.serialize();
        this.guest.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.guest = new PartyGuestInformations();
        this.guest.deserialize(buffer);
    }
};
module.exports.PartyNewGuestMessage = PartyNewGuestMessage;
module.exports.messages[6260] = PartyNewGuestMessage;

class PartyUpdateMessage extends AbstractPartyEventMessage {
    constructor(partyId, memberInformations) {
        super(partyId);
        this.memberInformations = memberInformations;
        this.messageId = 5575;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.memberInformations.getTypeId());
        this.memberInformations.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.memberInformations = ProtocolTypeManager.getInstance(PartyMemberInformations, _loc2_);
        this.memberInformations.deserialize(buffer);
    }
};
module.exports.PartyUpdateMessage = PartyUpdateMessage;
module.exports.messages[5575] = PartyUpdateMessage;

class PartyNewMemberMessage extends PartyUpdateMessage {
    constructor(param1, memberInformations) {
        super(partyId, memberInformations);
        this.messageId = 6306;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.PartyNewMemberMessage = PartyNewMemberMessage;
module.exports.messages[6306] = PartyNewMemberMessage;

class PartyPledgeLoyaltyRequestMessage extends AbstractPartyMessage {
    constructor(partyId, loyal) {
        super(partyId);
        this.loyal = loyal;
        this.messageId = 6269;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.loyal);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.loyal = buffer.readBoolean();
    }
};
module.exports.PartyPledgeLoyaltyRequestMessage = PartyPledgeLoyaltyRequestMessage;
module.exports.messages[6269] = PartyPledgeLoyaltyRequestMessage;

class PartyRefuseInvitationMessage extends AbstractPartyMessage {
    constructor(partyId) {
        super(partyId);
        this.messageId = 5582;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.PartyRefuseInvitationMessage = PartyRefuseInvitationMessage;
module.exports.messages[5582] = PartyRefuseInvitationMessage;

class PartyRefuseInvitationNotificationMessage extends AbstractPartyEventMessage {
    constructor(partyId, guestId) {
        super(partyId);
        this.guestId = guestId;
        this.messageId = 5596;
    }

    serialize() {
        super.serialize();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.guestId + ") on element of PartyRefuseInvitationNotificationMessage.guestId.");
        }
    }
};
module.exports.PartyRefuseInvitationNotificationMessage = PartyRefuseInvitationNotificationMessage;
module.exports.messages[5596] = PartyRefuseInvitationNotificationMessage;

class PartyRestrictedMessage extends AbstractPartyMessage {
    constructor(partyId, restricted) {
        super(partyId);
        this.restricted = restricted;
        this.messageId = 6175;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.restricted);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.restricted = buffer.readBoolean();
    }
};
module.exports.PartyRestrictedMessage = PartyRestrictedMessage;
module.exports.messages[6175] = PartyRestrictedMessage;

class PartyStopFollowRequestMessage extends AbstractPartyMessage {
    constructor(partyId, playerId) {
        super(partyId);
        this.playerId = playerId;
        this.messageId = 5574;
    }

    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of PartyStopFollowRequestMessage.playerId.");
        }
    }
};
module.exports.PartyStopFollowRequestMessage = PartyStopFollowRequestMessage;
module.exports.messages[5574] = PartyStopFollowRequestMessage;

class PurchasableDialogMessage extends ProtocolMessage {
    constructor(buyOrSell, purchasableId, purchasableInstanceId, secondHand, price) {
        super(5739);
        this.buyOrSell = buyOrSell;
        this.purchasableId = purchasableId;
        this.purchasableInstanceId = purchasableInstanceId;
        this.secondHand = secondHand;
        this.price = price;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.buyOrSell);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.secondHand);
        this.buffer.writeByte(_loc2_);
        if (this.purchasableId < 0) {
            throw new Error("Forbidden value (" + this.purchasableId + ") on element purchasableId.");
        }
        this.buffer.writeVarInt(this.purchasableId);
        if (this.purchasableInstanceId < 0) {
            throw new Error("Forbidden value (" + this.purchasableInstanceId + ") on element purchasableInstanceId.");
        }
        this.buffer.writeInt(this.purchasableInstanceId);
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarLong(this.price);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.purchasableId = buffer.readVarUhInt();
        if (this.purchasableId < 0) {
            throw new Error("Forbidden value (" + this.purchasableId + ") on element of PurchasableDialogMessage.purchasableId.");
        }
        this.purchasableInstanceId = buffer.readInt();
        if (this.purchasableInstanceId < 0) {
            throw new Error("Forbidden value (" + this.purchasableInstanceId + ") on element of PurchasableDialogMessage.purchasableInstanceId.");
        };
        this.price = buffer.readVarUhLong();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element of PurchasableDialogMessage.price.");
        };
    }
};
module.exports.PurchasableDialogMessage = PurchasableDialogMessage;
module.exports.messages[5739] = PurchasableDialogMessage;

class FollowedQuestsMessage extends ProtocolMessage {
    constructor(quests) {
        super(6717);
        this.quests = quests;
    }

    serialize() {
        this.buffer.writeShort(this.quests.length);
        var _loc2_ = 0;
        while (_loc2_ < this.quests.length) {
            (this.quests[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new QuestActiveDetailedInformations();
            _loc4_.deserialize(buffer);
            this.quests.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.FollowedQuestsMessage = FollowedQuestsMessage;
module.exports.messages[6717] = FollowedQuestsMessage;

class FollowQuestObjectiveRequestMessage extends ProtocolMessage {
    constructor(questId, objectiveId) {
        super(6724);
        this.questId = questId;
        this.objectiveId = objectiveId;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
        this.buffer.writeShort(this.objectiveId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of FollowQuestObjectiveRequestMessage.questId.");
        }
        this.objectiveId = buffer.readShort();
    }
};
module.exports.FollowQuestObjectiveRequestMessage = FollowQuestObjectiveRequestMessage;
module.exports.messages[6724] = FollowQuestObjectiveRequestMessage;

class GuidedModeQuitRequestMessage extends ProtocolMessage {
    constructor() {
        super(6092);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GuidedModeQuitRequestMessage = GuidedModeQuitRequestMessage;
module.exports.messages[6092] = GuidedModeQuitRequestMessage;

class GuidedModeReturnRequestMessage extends ProtocolMessage {
    constructor() {
        super(6088);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GuidedModeReturnRequestMessage = GuidedModeReturnRequestMessage;
module.exports.messages[6088] = GuidedModeReturnRequestMessage;

class QuestListMessage extends ProtocolMessage {
    constructor(finishedQuestsIds, finishedQuestsCounts, activeQuests, reinitDoneQuestsIds) {
        super(5626);
        this.finishedQuestsIds = finishedQuestsIds;
        this.finishedQuestsCounts = finishedQuestsCounts;
        this.activeQuests = activeQuests;
        this.reinitDoneQuestsIds = reinitDoneQuestsIds;
    }

    serialize() {
        this.buffer.writeShort(this.finishedQuestsIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.finishedQuestsIds.length) {
            if (this.finishedQuestsIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.finishedQuestsIds[_loc2_] + ") on element 1 (starting at 1) of finishedQuestsIds.");
            }
            this.buffer.writeVarShort(this.finishedQuestsIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.finishedQuestsCounts.length);
        var _loc3_ = 0;
        while (_loc3_ < this.finishedQuestsCounts.length) {
            if (this.finishedQuestsCounts[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.finishedQuestsCounts[_loc3_] + ") on element 2 (starting at 1) of finishedQuestsCounts.");
            }
            this.buffer.writeVarShort(this.finishedQuestsCounts[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.activeQuests.length);
        var _loc4_ = 0;
        while (_loc4_ < this.activeQuests.length) {
            this.buffer.writeShort((this.activeQuests[_loc4_]).getTypeId());
            (this.activeQuests[_loc4_]).serialize(this.buffer);
            _loc4_++;
        }
        this.buffer.writeShort(this.reinitDoneQuestsIds.length);
        var _loc5_ = 0;
        while (_loc5_ < this.reinitDoneQuestsIds.length) {
            if (this.reinitDoneQuestsIds[_loc5_] < 0) {
                throw new Error("Forbidden value (" + this.reinitDoneQuestsIds[_loc5_] + ") on element 4 (starting at 1) of reinitDoneQuestsIds.");
            }
            this.buffer.writeVarShort(this.reinitDoneQuestsIds[_loc5_]);
            _loc5_++;
        }
    }

    deserialize(buffer) {
        var _loc10_ = 0;
        var _loc11_ = 0;
        var _loc12_ = 0;
        var _loc13_ = null;
        var _loc14_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc10_ = buffer.readVarUhShort();
            if (_loc10_ < 0) {
                throw new Error("Forbidden value (" + _loc10_ + ") on elements of finishedQuestsIds.");
            }
            this.finishedQuestsIds.push(_loc10_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc11_ = buffer.readVarUhShort();
            if (_loc11_ < 0) {
                throw new Error("Forbidden value (" + _loc11_ + ") on elements of finishedQuestsCounts.");
            }
            this.finishedQuestsCounts.push(_loc11_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc12_ = buffer.readUnsignedShort();
            _loc13_ = ProtocolTypeManager.getInstance(QuestActiveInformations, _loc12_);
            _loc13_.deserialize(buffer);
            this.activeQuests.push(_loc13_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc14_ = buffer.readVarUhShort();
            if (_loc14_ < 0) {
                throw new Error("Forbidden value (" + _loc14_ + ") on elements of reinitDoneQuestsIds.");
            }
            this.reinitDoneQuestsIds.push(_loc14_);
            _loc9_++;
        }
    }
};
module.exports.QuestListMessage = QuestListMessage;
module.exports.messages[5626] = QuestListMessage;

class QuestListRequestMessage extends ProtocolMessage {
    constructor() {
        super(5623);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.QuestListRequestMessage = QuestListRequestMessage;
module.exports.messages[5623] = QuestListRequestMessage;

class QuestObjectiveValidatedMessage extends ProtocolMessage {
    constructor(questId, objectiveId) {
        super(6098);
        this.questId = questId;
        this.objectiveId = objectiveId;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
        if (this.objectiveId < 0) {
            throw new Error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
        }
        this.buffer.writeVarShort(this.objectiveId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of QuestObjectiveValidatedMessage.questId.");
        }
        this.objectiveId = buffer.readVarUhShort();
        if (this.objectiveId < 0) {
            throw new Error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveValidatedMessage.objectiveId.");
        };
    }
};
module.exports.QuestObjectiveValidatedMessage = QuestObjectiveValidatedMessage;
module.exports.messages[6098] = QuestObjectiveValidatedMessage;

class QuestObjectiveValidationMessage extends ProtocolMessage {
    constructor(questId, objectiveId) {
        super(6085);
        this.questId = questId;
        this.objectiveId = objectiveId;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
        if (this.objectiveId < 0) {
            throw new Error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
        }
        this.buffer.writeVarShort(this.objectiveId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of QuestObjectiveValidationMessage.questId.");
        }
        this.objectiveId = buffer.readVarUhShort();
        if (this.objectiveId < 0) {
            throw new Error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveValidationMessage.objectiveId.");
        };
    }
};
module.exports.QuestObjectiveValidationMessage = QuestObjectiveValidationMessage;
module.exports.messages[6085] = QuestObjectiveValidationMessage;

class QuestStartedMessage extends ProtocolMessage {
    constructor(questId) {
        super(6091);
        this.questId = questId;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of QuestStartedMessage.questId.");
        }
    }
};
module.exports.QuestStartedMessage = QuestStartedMessage;
module.exports.messages[6091] = QuestStartedMessage;

class QuestStartRequestMessage extends ProtocolMessage {
    constructor(questId) {
        super(5643);
        this.questId = questId;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of QuestStartRequestMessage.questId.");
        }
    }
};
module.exports.QuestStartRequestMessage = QuestStartRequestMessage;
module.exports.messages[5643] = QuestStartRequestMessage;

class QuestStepInfoMessage extends ProtocolMessage {
    constructor(infos) {
        super(5625);
        this.infos = infos;
    }

    serialize() {
        this.buffer.writeShort(this.infos.getTypeId());
        this.infos.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.infos = ProtocolTypeManager.getInstance(QuestActiveInformations, _loc2_);
        this.infos.deserialize(buffer);
    }
};
module.exports.QuestStepInfoMessage = QuestStepInfoMessage;
module.exports.messages[5625] = QuestStepInfoMessage;

class QuestStepInfoRequestMessage extends ProtocolMessage {
    constructor(questId) {
        super(5622);
        this.questId = questId;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of QuestStepInfoRequestMessage.questId.");
        }
    }
};
module.exports.QuestStepInfoRequestMessage = QuestStepInfoRequestMessage;
module.exports.messages[5622] = QuestStepInfoRequestMessage;

class QuestStepStartedMessage extends ProtocolMessage {
    constructor(questId, stepId) {
        super(6096);
        this.questId = questId;
        this.stepId = stepId;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
        if (this.stepId < 0) {
            throw new Error("Forbidden value (" + this.stepId + ") on element stepId.");
        }
        this.buffer.writeVarShort(this.stepId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of QuestStepStartedMessage.questId.");
        }
        this.stepId = buffer.readVarUhShort();
        if (this.stepId < 0) {
            throw new Error("Forbidden value (" + this.stepId + ") on element of QuestStepStartedMessage.stepId.");
        };
    }
};
module.exports.QuestStepStartedMessage = QuestStepStartedMessage;
module.exports.messages[6096] = QuestStepStartedMessage;

class QuestStepValidatedMessage extends ProtocolMessage {
    constructor(questId, stepId) {
        super(6099);
        this.questId = questId;
        this.stepId = stepId;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
        if (this.stepId < 0) {
            throw new Error("Forbidden value (" + this.stepId + ") on element stepId.");
        }
        this.buffer.writeVarShort(this.stepId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of QuestStepValidatedMessage.questId.");
        }
        this.stepId = buffer.readVarUhShort();
        if (this.stepId < 0) {
            throw new Error("Forbidden value (" + this.stepId + ") on element of QuestStepValidatedMessage.stepId.");
        };
    }
};
module.exports.QuestStepValidatedMessage = QuestStepValidatedMessage;
module.exports.messages[6099] = QuestStepValidatedMessage;

class QuestValidatedMessage extends ProtocolMessage {
    constructor(questId) {
        super(6097);
        this.questId = questId;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of QuestValidatedMessage.questId.");
        }
    }
};
module.exports.QuestValidatedMessage = QuestValidatedMessage;
module.exports.messages[6097] = QuestValidatedMessage;

class RefreshFollowedQuestsOrderRequestMessage extends ProtocolMessage {
    constructor(quests) {
        super(6722);
        this.quests = quests;
    }

    serialize() {
        this.buffer.writeShort(this.quests.length);
        var _loc2_ = 0;
        while (_loc2_ < this.quests.length) {
            if (this.quests[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.quests[_loc2_] + ") on element 1 (starting at 1) of quests.");
            }
            this.buffer.writeVarShort(this.quests[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of quests.");
            }
            this.quests.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.RefreshFollowedQuestsOrderRequestMessage = RefreshFollowedQuestsOrderRequestMessage;
module.exports.messages[6722] = RefreshFollowedQuestsOrderRequestMessage;

class UnfollowQuestObjectiveRequestMessage extends ProtocolMessage {
    constructor(questId, objectiveId) {
        super(6723);
        this.questId = questId;
        this.objectiveId = objectiveId;
    }

    serialize() {
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
        this.buffer.writeShort(this.objectiveId);
    }

    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            throw new Error("Forbidden value (" + this.questId + ") on element of UnfollowQuestObjectiveRequestMessage.questId.");
        }
        this.objectiveId = buffer.readShort();
    }
};
module.exports.UnfollowQuestObjectiveRequestMessage = UnfollowQuestObjectiveRequestMessage;
module.exports.messages[6723] = UnfollowQuestObjectiveRequestMessage;

class SpellItemBoostMessage extends ProtocolMessage {
    constructor(statId, spellId, value) {
        super(6011);
        this.statId = statId;
        this.spellId = spellId;
        this.value = value;
    }

    serialize() {
        if (this.statId < 0) {
            throw new Error("Forbidden value (" + this.statId + ") on element statId.");
        }
        this.buffer.writeVarInt(this.statId);
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        this.buffer.writeVarShort(this.value);
    }

    deserialize(buffer) {
        this.statId = buffer.readVarUhInt();
        if (this.statId < 0) {
            throw new Error("Forbidden value (" + this.statId + ") on element of SpellItemBoostMessage.statId.");
        }
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of SpellItemBoostMessage.spellId.");
        };
        this.value = buffer.readVarShort();
    }
};
module.exports.SpellItemBoostMessage = SpellItemBoostMessage;
module.exports.messages[6011] = SpellItemBoostMessage;

class SpellModifyFailureMessage extends ProtocolMessage {
    constructor() {
        super(6653);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.SpellModifyFailureMessage = SpellModifyFailureMessage;
module.exports.messages[6653] = SpellModifyFailureMessage;

class SpellModifyRequestMessage extends ProtocolMessage {
    constructor(spellId, spellLevel) {
        super(6655);
        this.spellId = spellId;
        this.spellLevel = spellLevel;
    }

    serialize() {
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
        }
        this.buffer.writeShort(this.spellLevel);
    }

    deserialize(buffer) {
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of SpellModifyRequestMessage.spellId.");
        }
        this.spellLevel = buffer.readShort();
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            throw new Error("Forbidden value (" + this.spellLevel + ") on element of SpellModifyRequestMessage.spellLevel.");
        };
    }
};
module.exports.SpellModifyRequestMessage = SpellModifyRequestMessage;
module.exports.messages[6655] = SpellModifyRequestMessage;

class SpellModifySuccessMessage extends ProtocolMessage {
    constructor(spellId, spellLevel) {
        super(6654);
        this.spellId = spellId;
        this.spellLevel = spellLevel;
    }

    serialize() {
        this.buffer.writeInt(this.spellId);
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
        }
        this.buffer.writeShort(this.spellLevel);
    }

    deserialize(buffer) {
        this.spellId = buffer.readInt();
        this.spellLevel = buffer.readShort();
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            throw new Error("Forbidden value (" + this.spellLevel + ") on element of SpellModifySuccessMessage.spellLevel.");
        }
    }
};
module.exports.SpellModifySuccessMessage = SpellModifySuccessMessage;
module.exports.messages[6654] = SpellModifySuccessMessage;

class SpellVariantActivationMessage extends ProtocolMessage {
    constructor(result, activatedSpellId, deactivatedSpellId) {
        super(6705);
        this.result = result;
        this.activatedSpellId = activatedSpellId;
        this.deactivatedSpellId = deactivatedSpellId;
    }

    serialize() {
        this.buffer.writeBoolean(this.result);
        if (this.activatedSpellId < 0) {
            throw new Error("Forbidden value (" + this.activatedSpellId + ") on element activatedSpellId.");
        }
        this.buffer.writeVarShort(this.activatedSpellId);
        if (this.deactivatedSpellId < 0) {
            throw new Error("Forbidden value (" + this.deactivatedSpellId + ") on element deactivatedSpellId.");
        }
        this.buffer.writeVarShort(this.deactivatedSpellId);
    }

    deserialize(buffer) {
        this.result = buffer.readBoolean();
        this.activatedSpellId = buffer.readVarUhShort();
        if (this.activatedSpellId < 0) {
            throw new Error("Forbidden value (" + this.activatedSpellId + ") on element of SpellVariantActivationMessage.activatedSpellId.");
        }
        this.deactivatedSpellId = buffer.readVarUhShort();
        if (this.deactivatedSpellId < 0) {
            throw new Error("Forbidden value (" + this.deactivatedSpellId + ") on element of SpellVariantActivationMessage.deactivatedSpellId.");
        };
    }
};
module.exports.SpellVariantActivationMessage = SpellVariantActivationMessage;
module.exports.messages[6705] = SpellVariantActivationMessage;

class SpellVariantActivationRequestMessage extends ProtocolMessage {
    constructor(spellId) {
        super(6707);
        this.spellId = spellId;
    }

    serialize() {
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
    }

    deserialize(buffer) {
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of SpellVariantActivationRequestMessage.spellId.");
        }
    }
};
module.exports.SpellVariantActivationRequestMessage = SpellVariantActivationRequestMessage;
module.exports.messages[6707] = SpellVariantActivationRequestMessage;

class StatsUpgradeRequestMessage extends ProtocolMessage {
    constructor(useAdditionnal, statId, boostPoint) {
        super(5610);
        this.useAdditionnal = useAdditionnal;
        this.statId = statId;
        this.boostPoint = boostPoint;
    }

    serialize() {
        this.buffer.writeBoolean(this.useAdditionnal);
        this.buffer.writeByte(this.statId);
        if (this.boostPoint < 0) {
            throw new Error("Forbidden value (" + this.boostPoint + ") on element boostPoint.");
        }
        this.buffer.writeVarShort(this.boostPoint);
    }

    deserialize(buffer) {
        this.useAdditionnal = buffer.readBoolean();
        this.statId = buffer.readByte();
        if (this.statId < 0) {
            throw new Error("Forbidden value (" + this.statId + ") on element of StatsUpgradeRequestMessage.statId.");
        }
        this.boostPoint = buffer.readVarUhShort();
        if (this.boostPoint < 0) {
            throw new Error("Forbidden value (" + this.boostPoint + ") on element of StatsUpgradeRequestMessage.boostPoint.");
        };
    }
};
module.exports.StatsUpgradeRequestMessage = StatsUpgradeRequestMessage;
module.exports.messages[5610] = StatsUpgradeRequestMessage;

class StatsUpgradeResultMessage extends ProtocolMessage {
    constructor(result, nbCharacBoost) {
        super(5609);
        this.result = result;
        this.nbCharacBoost = nbCharacBoost;
    }

    serialize() {
        this.buffer.writeByte(this.result);
        if (this.nbCharacBoost < 0) {
            throw new Error("Forbidden value (" + this.nbCharacBoost + ") on element nbCharacBoost.");
        }
        this.buffer.writeVarShort(this.nbCharacBoost);
    }

    deserialize(buffer) {
        this.result = buffer.readByte();
        this.nbCharacBoost = buffer.readVarUhShort();
        if (this.nbCharacBoost < 0) {
            throw new Error("Forbidden value (" + this.nbCharacBoost + ") on element of StatsUpgradeResultMessage.nbCharacBoost.");
        }
    }
};
module.exports.StatsUpgradeResultMessage = StatsUpgradeResultMessage;
module.exports.messages[5609] = StatsUpgradeResultMessage;

class StopToListenRunningFightRequestMessage extends ProtocolMessage {
    constructor() {
        super(6124);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.StopToListenRunningFightRequestMessage = StopToListenRunningFightRequestMessage;
module.exports.messages[6124] = StopToListenRunningFightRequestMessage;

class TeleportOnSameMapMessage extends ProtocolMessage {
    constructor(targetId, cellId) {
        super(6048);
        this.targetId = targetId;
        this.cellId = cellId;
    }

    serialize() {
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }

    deserialize(buffer) {
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of TeleportOnSameMapMessage.targetId.");
        }
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of TeleportOnSameMapMessage.cellId.");
        };
    }
};
module.exports.TeleportOnSameMapMessage = TeleportOnSameMapMessage;
module.exports.messages[6048] = TeleportOnSameMapMessage;

class PortalUseRequestMessage extends ProtocolMessage {
    constructor(portalId) {
        super(6492);
        this.portalId = portalId;
    }

    serialize() {
        if (this.portalId < 0) {
            throw new Error("Forbidden value (" + this.portalId + ") on element portalId.");
        }
        this.buffer.writeVarInt(this.portalId);
    }

    deserialize(buffer) {
        this.portalId = buffer.readVarUhInt();
        if (this.portalId < 0) {
            throw new Error("Forbidden value (" + this.portalId + ") on element of PortalUseRequestMessage.portalId.");
        }
    }
};
module.exports.PortalUseRequestMessage = PortalUseRequestMessage;
module.exports.messages[6492] = PortalUseRequestMessage;

class TreasureHuntAvailableRetryCountUpdateMessage extends ProtocolMessage {
    constructor(questType, availableRetryCount) {
        super(6491);
        this.questType = questType;
        this.availableRetryCount = availableRetryCount;
    }

    serialize() {
        this.buffer.writeByte(this.questType);
        this.buffer.writeInt(this.availableRetryCount);
    }

    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntAvailableRetryCountUpdateMessage.questType.");
        }
        this.availableRetryCount = buffer.readInt();
    }
};
module.exports.TreasureHuntAvailableRetryCountUpdateMessage = TreasureHuntAvailableRetryCountUpdateMessage;
module.exports.messages[6491] = TreasureHuntAvailableRetryCountUpdateMessage;

class TreasureHuntDigRequestAnswerMessage extends ProtocolMessage {
    constructor(questType, result) {
        super(6484);
        this.questType = questType;
        this.result = result;
    }

    serialize() {
        this.buffer.writeByte(this.questType);
        this.buffer.writeByte(this.result);
    }

    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntDigRequestAnswerMessage.questType.");
        }
        this.result = buffer.readByte();
        if (this.result < 0) {
            throw new Error("Forbidden value (" + this.result + ") on element of TreasureHuntDigRequestAnswerMessage.result.");
        };
    }
};
module.exports.TreasureHuntDigRequestAnswerMessage = TreasureHuntDigRequestAnswerMessage;
module.exports.messages[6484] = TreasureHuntDigRequestAnswerMessage;

class TreasureHuntDigRequestAnswerFailedMessage extends TreasureHuntDigRequestAnswerMessage {
    constructor(questType, result, wrongFlagCount) {
        super(questType, result);
        this.wrongFlagCount = wrongFlagCount;
        this.messageId = 6509;
    }

    serialize() {
        super.serialize();
        if (this.wrongFlagCount < 0) {
            throw new Error("Forbidden value (" + this.wrongFlagCount + ") on element wrongFlagCount.");
        }
        this.buffer.writeByte(this.wrongFlagCount);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.wrongFlagCount = buffer.readByte();
        if (this.wrongFlagCount < 0) {
            throw new Error("Forbidden value (" + this.wrongFlagCount + ") on element of TreasureHuntDigRequestAnswerFailedMessage.wrongFlagCount.");
        }
    }
};
module.exports.TreasureHuntDigRequestAnswerFailedMessage = TreasureHuntDigRequestAnswerFailedMessage;
module.exports.messages[6509] = TreasureHuntDigRequestAnswerFailedMessage;

class TreasureHuntDigRequestMessage extends ProtocolMessage {
    constructor(questType) {
        super(6485);
        this.questType = questType;
    }

    serialize() {
        this.buffer.writeByte(this.questType);
    }

    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntDigRequestMessage.questType.");
        }
    }
};
module.exports.TreasureHuntDigRequestMessage = TreasureHuntDigRequestMessage;
module.exports.messages[6485] = TreasureHuntDigRequestMessage;

class TreasureHuntFinishedMessage extends ProtocolMessage {
    constructor(questType) {
        super(6483);
        this.questType = questType;
    }

    serialize() {
        this.buffer.writeByte(this.questType);
    }

    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFinishedMessage.questType.");
        }
    }
};
module.exports.TreasureHuntFinishedMessage = TreasureHuntFinishedMessage;
module.exports.messages[6483] = TreasureHuntFinishedMessage;

class TreasureHuntFlagRemoveRequestMessage extends ProtocolMessage {
    constructor(questType, index) {
        super(6510);
        this.questType = questType;
        this.index = index;
    }

    serialize() {
        this.buffer.writeByte(this.questType);
        if (this.index < 0) {
            throw new Error("Forbidden value (" + this.index + ") on element index.");
        }
        this.buffer.writeByte(this.index);
    }

    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRemoveRequestMessage.questType.");
        }
        this.index = buffer.readByte();
        if (this.index < 0) {
            throw new Error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRemoveRequestMessage.index.");
        };
    }
};
module.exports.TreasureHuntFlagRemoveRequestMessage = TreasureHuntFlagRemoveRequestMessage;
module.exports.messages[6510] = TreasureHuntFlagRemoveRequestMessage;

class TreasureHuntFlagRequestAnswerMessage extends ProtocolMessage {
    constructor(questType, result, index) {
        super(6507);
        this.questType = questType;
        this.result = result;
        this.index = index;
    }

    serialize() {
        this.buffer.writeByte(this.questType);
        this.buffer.writeByte(this.result);
        if (this.index < 0) {
            throw new Error("Forbidden value (" + this.index + ") on element index.");
        }
        this.buffer.writeByte(this.index);
    }

    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRequestAnswerMessage.questType.");
        }
        this.result = buffer.readByte();
        if (this.result < 0) {
            throw new Error("Forbidden value (" + this.result + ") on element of TreasureHuntFlagRequestAnswerMessage.result.");
        };
        this.index = buffer.readByte();
        if (this.index < 0) {
            throw new Error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRequestAnswerMessage.index.");
        };
    }
};
module.exports.TreasureHuntFlagRequestAnswerMessage = TreasureHuntFlagRequestAnswerMessage;
module.exports.messages[6507] = TreasureHuntFlagRequestAnswerMessage;

class TreasureHuntFlagRequestMessage extends ProtocolMessage {
    constructor(questType, index) {
        super(6508);
        this.questType = questType;
        this.index = index;
    }

    serialize() {
        this.buffer.writeByte(this.questType);
        if (this.index < 0) {
            throw new Error("Forbidden value (" + this.index + ") on element index.");
        }
        this.buffer.writeByte(this.index);
    }

    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRequestMessage.questType.");
        }
        this.index = buffer.readByte();
        if (this.index < 0) {
            throw new Error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRequestMessage.index.");
        };
    }
};
module.exports.TreasureHuntFlagRequestMessage = TreasureHuntFlagRequestMessage;
module.exports.messages[6508] = TreasureHuntFlagRequestMessage;

class TreasureHuntGiveUpRequestMessage extends ProtocolMessage {
    constructor(questType) {
        super(6487);
        this.questType = questType;
    }

    serialize() {
        this.buffer.writeByte(this.questType);
    }

    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntGiveUpRequestMessage.questType.");
        }
    }
};
module.exports.TreasureHuntGiveUpRequestMessage = TreasureHuntGiveUpRequestMessage;
module.exports.messages[6487] = TreasureHuntGiveUpRequestMessage;

class TreasureHuntLegendaryRequestMessage extends ProtocolMessage {
    constructor(legendaryId) {
        super(6499);
        this.legendaryId = legendaryId;
    }

    serialize() {
        if (this.legendaryId < 0) {
            throw new Error("Forbidden value (" + this.legendaryId + ") on element legendaryId.");
        }
        this.buffer.writeVarShort(this.legendaryId);
    }

    deserialize(buffer) {
        this.legendaryId = buffer.readVarUhShort();
        if (this.legendaryId < 0) {
            throw new Error("Forbidden value (" + this.legendaryId + ") on element of TreasureHuntLegendaryRequestMessage.legendaryId.");
        }
    }
};
module.exports.TreasureHuntLegendaryRequestMessage = TreasureHuntLegendaryRequestMessage;
module.exports.messages[6499] = TreasureHuntLegendaryRequestMessage;

class TreasureHuntMessage extends ProtocolMessage {
    constructor(questType, startMapId, knownStepsList, totalStepCount, checkPointCurrent, checkPointTotal, availableRetryCount, flags) {
        super(6486);
        this.questType = questType;
        this.startMapId = startMapId;
        this.knownStepsList = knownStepsList;
        this.totalStepCount = totalStepCount;
        this.checkPointCurrent = checkPointCurrent;
        this.checkPointTotal = checkPointTotal;
        this.availableRetryCount = availableRetryCount;
        this.flags = flags;
    }

    serialize() {
        this.buffer.writeByte(this.questType);
        this.buffer.writeInt(this.startMapId);
        this.buffer.writeShort(this.knownStepsList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.knownStepsList.length) {
            this.buffer.writeShort((this.knownStepsList[_loc2_]).getTypeId());
            (this.knownStepsList[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.totalStepCount < 0) {
            throw new Error("Forbidden value (" + this.totalStepCount + ") on element totalStepCount.");
        }
        this.buffer.writeByte(this.totalStepCount);
        if (this.checkPointCurrent < 0) {
            throw new Error("Forbidden value (" + this.checkPointCurrent + ") on element checkPointCurrent.");
        }
        this.buffer.writeVarInt(this.checkPointCurrent);
        if (this.checkPointTotal < 0) {
            throw new Error("Forbidden value (" + this.checkPointTotal + ") on element checkPointTotal.");
        }
        this.buffer.writeVarInt(this.checkPointTotal);
        this.buffer.writeInt(this.availableRetryCount);
        this.buffer.writeShort(this.flags.length);
        var _loc3_ = 0;
        while (_loc3_ < this.flags.length) {
            (this.flags[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = null;
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntMessage.questType.");
        }
        this.startMapId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(TreasureHuntStep, _loc6_);
            _loc7_.deserialize(buffer);
            this.knownStepsList.push(_loc7_);
            _loc3_++;
        }
        this._totalStepCountFunc(buffer);
        this.checkPointCurrent = buffer.readVarUhInt();
        if (this.checkPointCurrent < 0) {
            throw new Error("Forbidden value (" + this.checkPointCurrent + ") on element of TreasureHuntMessage.checkPointCurrent.");
        };
        this.checkPointTotal = buffer.readVarUhInt();
        if (this.checkPointTotal < 0) {
            throw new Error("Forbidden value (" + this.checkPointTotal + ") on element of TreasureHuntMessage.checkPointTotal.");
        };
        this.availableRetryCount = buffer.readInt();;
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = new TreasureHuntFlag();
            _loc8_.deserialize(buffer);
            this.flags.push(_loc8_);
            _loc5_++;
        }
    }
};
module.exports.TreasureHuntMessage = TreasureHuntMessage;
module.exports.messages[6486] = TreasureHuntMessage;

class TreasureHuntRequestAnswerMessage extends ProtocolMessage {
    constructor(questType, result) {
        super(6489);
        this.questType = questType;
        this.result = result;
    }

    serialize() {
        this.buffer.writeByte(this.questType);
        this.buffer.writeByte(this.result);
    }

    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntRequestAnswerMessage.questType.");
        }
        this.result = buffer.readByte();
        if (this.result < 0) {
            throw new Error("Forbidden value (" + this.result + ") on element of TreasureHuntRequestAnswerMessage.result.");
        };
    }
};
module.exports.TreasureHuntRequestAnswerMessage = TreasureHuntRequestAnswerMessage;
module.exports.messages[6489] = TreasureHuntRequestAnswerMessage;

class TreasureHuntRequestMessage extends ProtocolMessage {
    constructor(questLevel, questType) {
        super(6488);
        this.questLevel = questLevel;
        this.questType = questType;
    }

    serialize() {
        if (this.questLevel < 1 || this.questLevel > 206) {
            throw new Error("Forbidden value (" + this.questLevel + ") on element questLevel.");
        }
        this.buffer.writeByte(this.questLevel);
        this.buffer.writeByte(this.questType);
    }

    deserialize(buffer) {
        this.questLevel = buffer.readUnsignedByte();
        if (this.questLevel < 1 || this.questLevel > 206) {
            throw new Error("Forbidden value (" + this.questLevel + ") on element of TreasureHuntRequestMessage.questLevel.");
        }
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntRequestMessage.questType.");
        };
    }
};
module.exports.TreasureHuntRequestMessage = TreasureHuntRequestMessage;
module.exports.messages[6488] = TreasureHuntRequestMessage;

class TreasureHuntShowLegendaryUIMessage extends ProtocolMessage {
    constructor(availableLegendaryIds) {
        super(6498);
        this.availableLegendaryIds = availableLegendaryIds;
    }

    serialize() {
        this.buffer.writeShort(this.availableLegendaryIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.availableLegendaryIds.length) {
            if (this.availableLegendaryIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.availableLegendaryIds[_loc2_] + ") on element 1 (starting at 1) of availableLegendaryIds.");
            }
            this.buffer.writeVarShort(this.availableLegendaryIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of availableLegendaryIds.");
            }
            this.availableLegendaryIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.TreasureHuntShowLegendaryUIMessage = TreasureHuntShowLegendaryUIMessage;
module.exports.messages[6498] = TreasureHuntShowLegendaryUIMessage;

class GameRolePlaySpellAnimMessage extends ProtocolMessage {
    constructor(casterId, targetCellId, spellId, spellLevel) {
        super(6114);
        this.casterId = casterId;
        this.targetCellId = targetCellId;
        this.spellId = spellId;
        this.spellLevel = spellLevel;
    }

    serialize() {
        if (this.casterId < 0 || this.casterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.casterId + ") on element casterId.");
        }
        this.buffer.writeVarLong(this.casterId);
        if (this.targetCellId < 0 || this.targetCellId > 559) {
            throw new Error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
        }
        this.buffer.writeVarShort(this.targetCellId);
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
        }
        this.buffer.writeShort(this.spellLevel);
    }

    deserialize(buffer) {
        this.casterId = buffer.readVarUhLong();
        if (this.casterId < 0 || this.casterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.casterId + ") on element of GameRolePlaySpellAnimMessage.casterId.");
        }
        this.targetCellId = buffer.readVarUhShort();
        if (this.targetCellId < 0 || this.targetCellId > 559) {
            throw new Error("Forbidden value (" + this.targetCellId + ") on element of GameRolePlaySpellAnimMessage.targetCellId.");
        };
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of GameRolePlaySpellAnimMessage.spellId.");
        };
        this.spellLevel = buffer.readShort();
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            throw new Error("Forbidden value (" + this.spellLevel + ") on element of GameRolePlaySpellAnimMessage.spellLevel.");
        };
    }
};
module.exports.GameRolePlaySpellAnimMessage = GameRolePlaySpellAnimMessage;
module.exports.messages[6114] = GameRolePlaySpellAnimMessage;

class ShowCellMessage extends ProtocolMessage {
    constructor(sourceId, cellId) {
        super(5612);
        this.sourceId = sourceId;
        this.cellId = cellId;
    }

    serialize() {
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeDouble(this.sourceId);
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }

    deserialize(buffer) {
        this.sourceId = buffer.readDouble();
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sourceId + ") on element of ShowCellMessage.sourceId.");
        }
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of ShowCellMessage.cellId.");
        };
    }
};
module.exports.ShowCellMessage = ShowCellMessage;
module.exports.messages[5612] = ShowCellMessage;

class ShowCellRequestMessage extends ProtocolMessage {
    constructor(cellId) {
        super(5611);
        this.cellId = cellId;
    }

    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }

    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            throw new Error("Forbidden value (" + this.cellId + ") on element of ShowCellRequestMessage.cellId.");
        }
    }
};
module.exports.ShowCellRequestMessage = ShowCellRequestMessage;
module.exports.messages[5611] = ShowCellRequestMessage;

class ShowCellSpectatorMessage extends ShowCellMessage {
    constructor(sourceId, cellId, playerName) {
        super(sourceId, cellId);
        this.playerName = playerName;
        this.messageId = 6158;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.playerName);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerName = buffer.readUTF();
    }
};
module.exports.ShowCellSpectatorMessage = ShowCellSpectatorMessage;
module.exports.messages[6158] = ShowCellSpectatorMessage;

class DareCanceledMessage extends ProtocolMessage {
    constructor(dareId) {
        super(6679);
        this.dareId = dareId;
    }

    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
    }

    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareCanceledMessage.dareId.");
        }
    }
};
module.exports.DareCanceledMessage = DareCanceledMessage;
module.exports.messages[6679] = DareCanceledMessage;

class DareCancelRequestMessage extends ProtocolMessage {
    constructor(dareId) {
        super(6680);
        this.dareId = dareId;
    }

    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
    }

    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareCancelRequestMessage.dareId.");
        }
    }
};
module.exports.DareCancelRequestMessage = DareCancelRequestMessage;
module.exports.messages[6680] = DareCancelRequestMessage;

class DareCreatedListMessage extends ProtocolMessage {
    constructor(daresFixedInfos, daresVersatilesInfos) {
        super(6663);
        this.daresFixedInfos = daresFixedInfos;
        this.daresVersatilesInfos = daresVersatilesInfos;
    }

    serialize() {
        this.buffer.writeShort(this.daresFixedInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.daresFixedInfos.length) {
            (this.daresFixedInfos[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.daresVersatilesInfos.length);
        var _loc3_ = 0;
        while (_loc3_ < this.daresVersatilesInfos.length) {
            (this.daresVersatilesInfos[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new DareInformations();
            _loc6_.deserialize(buffer);
            this.daresFixedInfos.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new DareVersatileInformations();
            _loc7_.deserialize(buffer);
            this.daresVersatilesInfos.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.DareCreatedListMessage = DareCreatedListMessage;
module.exports.messages[6663] = DareCreatedListMessage;

class DareCreatedMessage extends ProtocolMessage {
    constructor(dareInfos, needNotifications) {
        super(6668);
        this.dareInfos = dareInfos;
        this.needNotifications = needNotifications;
    }

    serialize() {
        this.dareInfos.serialize(this.buffer);
        this.buffer.writeBoolean(this.needNotifications);
    }

    deserialize(buffer) {
        this.dareInfos = new DareInformations();
        this.dareInfos.deserialize(buffer);
        this.needNotifications = buffer.readBoolean();
    }
};
module.exports.DareCreatedMessage = DareCreatedMessage;
module.exports.messages[6668] = DareCreatedMessage;

class DareCreationRequestMessage extends ProtocolMessage {
    constructor(subscriptionFee, jackpot, maxCountWinners, delayBeforeStart, duration, isPrivate, isForGuild, isForAlliance, needNotifications, criterions) {
        super(6665);
        this.subscriptionFee = subscriptionFee;
        this.jackpot = jackpot;
        this.maxCountWinners = maxCountWinners;
        this.delayBeforeStart = delayBeforeStart;
        this.duration = duration;
        this.isPrivate = isPrivate;
        this.isForGuild = isForGuild;
        this.isForAlliance = isForAlliance;
        this.needNotifications = needNotifications;
        this.criterions = criterions;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.isPrivate);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.isForGuild);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.isForAlliance);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.needNotifications);
        this.buffer.writeByte(_loc2_);
        if (this.subscriptionFee < 0 || this.subscriptionFee > 9007199254740990) {
            throw new Error("Forbidden value (" + this.subscriptionFee + ") on element subscriptionFee.");
        }
        this.buffer.writeVarLong(this.subscriptionFee);
        if (this.jackpot < 0 || this.jackpot > 9007199254740990) {
            throw new Error("Forbidden value (" + this.jackpot + ") on element jackpot.");
        }
        this.buffer.writeVarLong(this.jackpot);
        if (this.maxCountWinners < 0 || this.maxCountWinners > 65535) {
            throw new Error("Forbidden value (" + this.maxCountWinners + ") on element maxCountWinners.");
        }
        this.buffer.writeShort(this.maxCountWinners);
        if (this.delayBeforeStart < 0 || this.delayBeforeStart > 4294967295) {
            throw new Error("Forbidden value (" + this.delayBeforeStart + ") on element delayBeforeStart.");
        }
        this.buffer.writeUnsignedInt(this.delayBeforeStart);
        if (this.duration < 0 || this.duration > 4294967295) {
            throw new Error("Forbidden value (" + this.duration + ") on element duration.");
        }
        this.buffer.writeUnsignedInt(this.duration);
        this.buffer.writeShort(this.criterions.length);
        var _loc3_ = 0;
        while (_loc3_ < this.criterions.length) {
            (this.criterions[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.deserializeByteBoxes(buffer);
        this.subscriptionFee = buffer.readVarUhLong();
        if (this.subscriptionFee < 0 || this.subscriptionFee > 9007199254740990) {
            throw new Error("Forbidden value (" + this.subscriptionFee + ") on element of DareCreationRequestMessage.subscriptionFee.");
        }
        this.jackpot = buffer.readVarUhLong();
        if (this.jackpot < 0 || this.jackpot > 9007199254740990) {
            throw new Error("Forbidden value (" + this.jackpot + ") on element of DareCreationRequestMessage.jackpot.");
        };
        this.maxCountWinners = buffer.readUnsignedShort();
        if (this.maxCountWinners < 0 || this.maxCountWinners > 65535) {
            throw new Error("Forbidden value (" + this.maxCountWinners + ") on element of DareCreationRequestMessage.maxCountWinners.");
        };
        this.delayBeforeStart = buffer.readUnsignedInt();
        if (this.delayBeforeStart < 0 || this.delayBeforeStart > 4294967295) {
            throw new Error("Forbidden value (" + this.delayBeforeStart + ") on element of DareCreationRequestMessage.delayBeforeStart.");
        };
        this.duration = buffer.readUnsignedInt();
        if (this.duration < 0 || this.duration > 4294967295) {
            throw new Error("Forbidden value (" + this.duration + ") on element of DareCreationRequestMessage.duration.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DareCriteria();
            _loc4_.deserialize(buffer);
            this.criterions.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DareCreationRequestMessage = DareCreationRequestMessage;
module.exports.messages[6665] = DareCreationRequestMessage;

class DareErrorMessage extends ProtocolMessage {
    constructor(error) {
        super(6667);
        this.error = error;
    }

    serialize() {
        this.buffer.writeByte(this.error);
    }

    deserialize(buffer) {
        this.error = buffer.readByte();
        if (this.error < 0) {
            throw new Error("Forbidden value (" + this.error + ") on element of DareErrorMessage.error.");
        }
    }
};
module.exports.DareErrorMessage = DareErrorMessage;
module.exports.messages[6667] = DareErrorMessage;

class DareInformationsMessage extends ProtocolMessage {
    constructor(dareFixedInfos, dareVersatilesInfos) {
        super(6656);
        this.dareFixedInfos = dareFixedInfos;
        this.dareVersatilesInfos = dareVersatilesInfos;
    }

    serialize() {
        this.dareFixedInfos.serialize(this.buffer);
        this.dareVersatilesInfos.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.dareFixedInfos = new DareInformations();
        this.dareFixedInfos.deserialize(buffer);
        this.dareVersatilesInfos = new DareVersatileInformations();
        this.dareVersatilesInfos.deserialize(buffer);
    }
};
module.exports.DareInformationsMessage = DareInformationsMessage;
module.exports.messages[6656] = DareInformationsMessage;

class DareInformationsRequestMessage extends ProtocolMessage {
    constructor(dareId) {
        super(6659);
        this.dareId = dareId;
    }

    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
    }

    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareInformationsRequestMessage.dareId.");
        }
    }
};
module.exports.DareInformationsRequestMessage = DareInformationsRequestMessage;
module.exports.messages[6659] = DareInformationsRequestMessage;

class DareListMessage extends ProtocolMessage {
    constructor(dares) {
        super(6661);
        this.dares = dares;
    }

    serialize() {
        this.buffer.writeShort(this.dares.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dares.length) {
            (this.dares[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DareInformations();
            _loc4_.deserialize(buffer);
            this.dares.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DareListMessage = DareListMessage;
module.exports.messages[6661] = DareListMessage;

class DareRewardConsumeRequestMessage extends ProtocolMessage {
    constructor(dareId, type) {
        super(6676);
        this.dareId = dareId;
        this.type = type;
    }

    serialize() {
        if (this.dareId < -9007199254740990 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
        this.buffer.writeByte(this.type);
    }

    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < -9007199254740990 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareRewardConsumeRequestMessage.dareId.");
        }
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of DareRewardConsumeRequestMessage.type.");
        };
    }
};
module.exports.DareRewardConsumeRequestMessage = DareRewardConsumeRequestMessage;
module.exports.messages[6676] = DareRewardConsumeRequestMessage;

class DareRewardConsumeValidationMessage extends ProtocolMessage {
    constructor(dareId, type) {
        super(6675);
        this.dareId = dareId;
        this.type = type;
    }

    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
        this.buffer.writeByte(this.type);
    }

    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareRewardConsumeValidationMessage.dareId.");
        }
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of DareRewardConsumeValidationMessage.type.");
        };
    }
};
module.exports.DareRewardConsumeValidationMessage = DareRewardConsumeValidationMessage;
module.exports.messages[6675] = DareRewardConsumeValidationMessage;

class DareRewardsListMessage extends ProtocolMessage {
    constructor(rewards) {
        super(6677);
        this.rewards = rewards;
    }

    serialize() {
        this.buffer.writeShort(this.rewards.length);
        var _loc2_ = 0;
        while (_loc2_ < this.rewards.length) {
            (this.rewards[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DareReward();
            _loc4_.deserialize(buffer);
            this.rewards.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DareRewardsListMessage = DareRewardsListMessage;
module.exports.messages[6677] = DareRewardsListMessage;

class DareRewardWonMessage extends ProtocolMessage {
    constructor(reward) {
        super(6678);
        this.reward = reward;
    }

    serialize() {
        this.reward.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.reward = new DareReward();
        this.reward.deserialize(buffer);
    }
};
module.exports.DareRewardWonMessage = DareRewardWonMessage;
module.exports.messages[6678] = DareRewardWonMessage;

class DareSubscribedListMessage extends ProtocolMessage {
    constructor(daresFixedInfos, daresVersatilesInfos) {
        super(6658);
        this.daresFixedInfos = daresFixedInfos;
        this.daresVersatilesInfos = daresVersatilesInfos;
    }

    serialize() {
        this.buffer.writeShort(this.daresFixedInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.daresFixedInfos.length) {
            (this.daresFixedInfos[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.daresVersatilesInfos.length);
        var _loc3_ = 0;
        while (_loc3_ < this.daresVersatilesInfos.length) {
            (this.daresVersatilesInfos[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new DareInformations();
            _loc6_.deserialize(buffer);
            this.daresFixedInfos.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new DareVersatileInformations();
            _loc7_.deserialize(buffer);
            this.daresVersatilesInfos.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.DareSubscribedListMessage = DareSubscribedListMessage;
module.exports.messages[6658] = DareSubscribedListMessage;

class DareSubscribedMessage extends ProtocolMessage {
    constructor(dareId, success, subscribe, dareVersatilesInfos) {
        super(6660);
        this.dareId = dareId;
        this.success = success;
        this.subscribe = subscribe;
        this.dareVersatilesInfos = dareVersatilesInfos;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.success);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.subscribe);
        this.buffer.writeByte(_loc2_);
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
        this.dareVersatilesInfos.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareSubscribedMessage.dareId.");
        }
        this.dareVersatilesInfos = new DareVersatileInformations();
        this.dareVersatilesInfos.deserialize(buffer);
    }
};
module.exports.DareSubscribedMessage = DareSubscribedMessage;
module.exports.messages[6660] = DareSubscribedMessage;

class DareSubscribeRequestMessage extends ProtocolMessage {
    constructor(dareId, subscribe) {
        super(6666);
        this.dareId = dareId;
        this.subscribe = subscribe;
    }

    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
        this.buffer.writeBoolean(this.subscribe);
    }

    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareSubscribeRequestMessage.dareId.");
        }
        this.subscribe = buffer.readBoolean();
    }
};
module.exports.DareSubscribeRequestMessage = DareSubscribeRequestMessage;
module.exports.messages[6666] = DareSubscribeRequestMessage;

class DareVersatileListMessage extends ProtocolMessage {
    constructor(dares) {
        super(6657);
        this.dares = dares;
    }

    serialize() {
        this.buffer.writeShort(this.dares.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dares.length) {
            (this.dares[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DareVersatileInformations();
            _loc4_.deserialize(buffer);
            this.dares.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DareVersatileListMessage = DareVersatileListMessage;
module.exports.messages[6657] = DareVersatileListMessage;

class DareWonListMessage extends ProtocolMessage {
    constructor(dareId) {
        super(6682);
        this.dareId = dareId;
    }

    serialize() {
        this.buffer.writeShort(this.dareId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dareId.length) {
            if (this.dareId[_loc2_] < 0 || this.dareId[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.dareId[_loc2_] + ") on element 1 (starting at 1) of dareId.");
            }
            this.buffer.writeDouble(this.dareId[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = NaN;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readDouble();
            if (_loc4_ < 0 || _loc4_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of dareId.");
            }
            this.dareId.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DareWonListMessage = DareWonListMessage;
module.exports.messages[6682] = DareWonListMessage;

class DareWonMessage extends ProtocolMessage {
    constructor(dareId) {
        super(6681);
        this.dareId = dareId;
    }

    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
    }

    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.dareId + ") on element of DareWonMessage.dareId.");
        }
    }
};
module.exports.DareWonMessage = DareWonMessage;
module.exports.messages[6681] = DareWonMessage;

class LeaveDialogMessage extends ProtocolMessage {
    constructor(dialogType) {
        super(5502);
        this.dialogType = dialogType;
    }

    serialize() {
        this.buffer.writeByte(this.dialogType);
    }

    deserialize(buffer) {
        this.dialogType = buffer.readByte();
        if (this.dialogType < 0) {
            throw new Error("Forbidden value (" + this.dialogType + ") on element of LeaveDialogMessage.dialogType.");
        }
    }
};
module.exports.LeaveDialogMessage = LeaveDialogMessage;
module.exports.messages[5502] = LeaveDialogMessage;

class LeaveDialogRequestMessage extends ProtocolMessage {
    constructor() {
        super(5501);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.LeaveDialogRequestMessage = LeaveDialogRequestMessage;
module.exports.messages[5501] = LeaveDialogRequestMessage;

class PauseDialogMessage extends ProtocolMessage {
    constructor(dialogType) {
        super(6012);
        this.dialogType = dialogType;
    }

    serialize() {
        this.buffer.writeByte(this.dialogType);
    }

    deserialize(buffer) {
        this.dialogType = buffer.readByte();
        if (this.dialogType < 0) {
            throw new Error("Forbidden value (" + this.dialogType + ") on element of PauseDialogMessage.dialogType.");
        }
    }
};
module.exports.PauseDialogMessage = PauseDialogMessage;
module.exports.messages[6012] = PauseDialogMessage;

class FinishMoveListMessage extends ProtocolMessage {
    constructor(finishMoves) {
        super(6704);
        this.finishMoves = finishMoves;
    }

    serialize() {
        this.buffer.writeShort(this.finishMoves.length);
        var _loc2_ = 0;
        while (_loc2_ < this.finishMoves.length) {
            (this.finishMoves[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new FinishMoveInformations();
            _loc4_.deserialize(buffer);
            this.finishMoves.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.FinishMoveListMessage = FinishMoveListMessage;
module.exports.messages[6704] = FinishMoveListMessage;

class FinishMoveListRequestMessage extends ProtocolMessage {
    constructor() {
        super(6702);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.FinishMoveListRequestMessage = FinishMoveListRequestMessage;
module.exports.messages[6702] = FinishMoveListRequestMessage;

class FinishMoveSetRequestMessage extends ProtocolMessage {
    constructor(finishMoveId, finishMoveState) {
        super(6703);
        this.finishMoveId = finishMoveId;
        this.finishMoveState = finishMoveState;
    }

    serialize() {
        if (this.finishMoveId < 0) {
            throw new Error("Forbidden value (" + this.finishMoveId + ") on element finishMoveId.");
        }
        this.buffer.writeInt(this.finishMoveId);
        this.buffer.writeBoolean(this.finishMoveState);
    }

    deserialize(buffer) {
        this.finishMoveId = buffer.readInt();
        if (this.finishMoveId < 0) {
            throw new Error("Forbidden value (" + this.finishMoveId + ") on element of FinishMoveSetRequestMessage.finishMoveId.");
        }
        this.finishMoveState = buffer.readBoolean();
    }
};
module.exports.FinishMoveSetRequestMessage = FinishMoveSetRequestMessage;
module.exports.messages[6703] = FinishMoveSetRequestMessage;

class FriendAddedMessage extends ProtocolMessage {
    constructor(friendAdded) {
        super(5599);
        this.friendAdded = friendAdded;
    }

    serialize() {
        this.buffer.writeShort(this.friendAdded.getTypeId());
        this.friendAdded.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.friendAdded = ProtocolTypeManager.getInstance(FriendInformations, _loc2_);
        this.friendAdded.deserialize(buffer);
    }
};
module.exports.FriendAddedMessage = FriendAddedMessage;
module.exports.messages[5599] = FriendAddedMessage;

class FriendAddFailureMessage extends ProtocolMessage {
    constructor(reason) {
        super(5600);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of FriendAddFailureMessage.reason.");
        }
    }
};
module.exports.FriendAddFailureMessage = FriendAddFailureMessage;
module.exports.messages[5600] = FriendAddFailureMessage;

class FriendAddRequestMessage extends ProtocolMessage {
    constructor(name) {
        super(4004);
        this.name = name;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
    }

    deserialize(buffer) {
        this.name = buffer.readUTF();
    }
};
module.exports.FriendAddRequestMessage = FriendAddRequestMessage;
module.exports.messages[4004] = FriendAddRequestMessage;

class FriendDeleteRequestMessage extends ProtocolMessage {
    constructor(accountId) {
        super(5603);
        this.accountId = accountId;
    }

    serialize() {
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
    }

    deserialize(buffer) {
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of FriendDeleteRequestMessage.accountId.");
        }
    }
};
module.exports.FriendDeleteRequestMessage = FriendDeleteRequestMessage;
module.exports.messages[5603] = FriendDeleteRequestMessage;

class FriendDeleteResultMessage extends ProtocolMessage {
    constructor(success, name) {
        super(5601);
        this.success = success;
        this.name = name;
    }

    serialize() {
        this.buffer.writeBoolean(this.success);
        this.buffer.writeUTF(this.name);
    }

    deserialize(buffer) {
        this.success = buffer.readBoolean();
        this.name = buffer.readUTF();;
    }
};
module.exports.FriendDeleteResultMessage = FriendDeleteResultMessage;
module.exports.messages[5601] = FriendDeleteResultMessage;

class FriendJoinRequestMessage extends ProtocolMessage {
    constructor(name) {
        super(5605);
        this.name = name;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
    }

    deserialize(buffer) {
        this.name = buffer.readUTF();
    }
};
module.exports.FriendJoinRequestMessage = FriendJoinRequestMessage;
module.exports.messages[5605] = FriendJoinRequestMessage;

class FriendSetWarnOnConnectionMessage extends ProtocolMessage {
    constructor(enable) {
        super(5602);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.FriendSetWarnOnConnectionMessage = FriendSetWarnOnConnectionMessage;
module.exports.messages[5602] = FriendSetWarnOnConnectionMessage;

class FriendSetWarnOnLevelGainMessage extends ProtocolMessage {
    constructor(enable) {
        super(6077);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.FriendSetWarnOnLevelGainMessage = FriendSetWarnOnLevelGainMessage;
module.exports.messages[6077] = FriendSetWarnOnLevelGainMessage;

class FriendsGetListMessage extends ProtocolMessage {
    constructor() {
        super(4001);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.FriendsGetListMessage = FriendsGetListMessage;
module.exports.messages[4001] = FriendsGetListMessage;

class FriendsListMessage extends ProtocolMessage {
    constructor(friendsList) {
        super(4002);
        this.friendsList = friendsList;
    }

    serialize() {
        this.buffer.writeShort(this.friendsList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.friendsList.length) {
            this.buffer.writeShort((this.friendsList[_loc2_]).getTypeId());
            (this.friendsList[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(FriendInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.friendsList.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.FriendsListMessage = FriendsListMessage;
module.exports.messages[4002] = FriendsListMessage;

class FriendSpouseFollowWithCompassRequestMessage extends ProtocolMessage {
    constructor(enable) {
        super(5606);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.FriendSpouseFollowWithCompassRequestMessage = FriendSpouseFollowWithCompassRequestMessage;
module.exports.messages[5606] = FriendSpouseFollowWithCompassRequestMessage;

class FriendSpouseJoinRequestMessage extends ProtocolMessage {
    constructor() {
        super(5604);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.FriendSpouseJoinRequestMessage = FriendSpouseJoinRequestMessage;
module.exports.messages[5604] = FriendSpouseJoinRequestMessage;

class FriendUpdateMessage extends ProtocolMessage {
    constructor(friendUpdated) {
        super(5924);
        this.friendUpdated = friendUpdated;
    }

    serialize() {
        this.buffer.writeShort(this.friendUpdated.getTypeId());
        this.friendUpdated.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.friendUpdated = ProtocolTypeManager.getInstance(FriendInformations, _loc2_);
        this.friendUpdated.deserialize(buffer);
    }
};
module.exports.FriendUpdateMessage = FriendUpdateMessage;
module.exports.messages[5924] = FriendUpdateMessage;

class FriendWarnOnConnectionStateMessage extends ProtocolMessage {
    constructor(enable) {
        super(5630);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.FriendWarnOnConnectionStateMessage = FriendWarnOnConnectionStateMessage;
module.exports.messages[5630] = FriendWarnOnConnectionStateMessage;

class FriendWarnOnLevelGainStateMessage extends ProtocolMessage {
    constructor(enable) {
        super(6078);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.FriendWarnOnLevelGainStateMessage = FriendWarnOnLevelGainStateMessage;
module.exports.messages[6078] = FriendWarnOnLevelGainStateMessage;

class GuildMemberSetWarnOnConnectionMessage extends ProtocolMessage {
    constructor(enable) {
        super(6159);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.GuildMemberSetWarnOnConnectionMessage = GuildMemberSetWarnOnConnectionMessage;
module.exports.messages[6159] = GuildMemberSetWarnOnConnectionMessage;

class GuildMemberWarnOnConnectionStateMessage extends ProtocolMessage {
    constructor(enable) {
        super(6160);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.GuildMemberWarnOnConnectionStateMessage = GuildMemberWarnOnConnectionStateMessage;
module.exports.messages[6160] = GuildMemberWarnOnConnectionStateMessage;

class IgnoredAddedMessage extends ProtocolMessage {
    constructor(ignoreAdded, session) {
        super(5678);
        this.ignoreAdded = ignoreAdded;
        this.session = session;
    }

    serialize() {
        this.buffer.writeShort(this.ignoreAdded.getTypeId());
        this.ignoreAdded.serialize(this.buffer);
        this.buffer.writeBoolean(this.session);
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.ignoreAdded = ProtocolTypeManager.getInstance(IgnoredInformations, _loc2_);
        this.ignoreAdded.deserialize(buffer);
        this.session = buffer.readBoolean();
    }
};
module.exports.IgnoredAddedMessage = IgnoredAddedMessage;
module.exports.messages[5678] = IgnoredAddedMessage;

class IgnoredAddFailureMessage extends ProtocolMessage {
    constructor(reason) {
        super(5679);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of IgnoredAddFailureMessage.reason.");
        }
    }
};
module.exports.IgnoredAddFailureMessage = IgnoredAddFailureMessage;
module.exports.messages[5679] = IgnoredAddFailureMessage;

class IgnoredAddRequestMessage extends ProtocolMessage {
    constructor(name, session) {
        super(5673);
        this.name = name;
        this.session = session;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
        this.buffer.writeBoolean(this.session);
    }

    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.session = buffer.readBoolean();;
    }
};
module.exports.IgnoredAddRequestMessage = IgnoredAddRequestMessage;
module.exports.messages[5673] = IgnoredAddRequestMessage;

class IgnoredDeleteRequestMessage extends ProtocolMessage {
    constructor(accountId, session) {
        super(5680);
        this.accountId = accountId;
        this.session = session;
    }

    serialize() {
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        this.buffer.writeBoolean(this.session);
    }

    deserialize(buffer) {
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            throw new Error("Forbidden value (" + this.accountId + ") on element of IgnoredDeleteRequestMessage.accountId.");
        }
        this.session = buffer.readBoolean();
    }
};
module.exports.IgnoredDeleteRequestMessage = IgnoredDeleteRequestMessage;
module.exports.messages[5680] = IgnoredDeleteRequestMessage;

class IgnoredDeleteResultMessage extends ProtocolMessage {
    constructor(success, name, session) {
        super(5677);
        this.success = success;
        this.name = name;
        this.session = session;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.success);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.session);
        this.buffer.writeByte(_loc2_);
        this.buffer.writeUTF(this.name);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.name = buffer.readUTF();
    }
};
module.exports.IgnoredDeleteResultMessage = IgnoredDeleteResultMessage;
module.exports.messages[5677] = IgnoredDeleteResultMessage;

class IgnoredGetListMessage extends ProtocolMessage {
    constructor() {
        super(5676);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.IgnoredGetListMessage = IgnoredGetListMessage;
module.exports.messages[5676] = IgnoredGetListMessage;

class IgnoredListMessage extends ProtocolMessage {
    constructor(ignoredList) {
        super(5674);
        this.ignoredList = ignoredList;
    }

    serialize() {
        this.buffer.writeShort(this.ignoredList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ignoredList.length) {
            this.buffer.writeShort((this.ignoredList[_loc2_]).getTypeId());
            (this.ignoredList[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(IgnoredInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.ignoredList.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.IgnoredListMessage = IgnoredListMessage;
module.exports.messages[5674] = IgnoredListMessage;

class SpouseGetInformationsMessage extends ProtocolMessage {
    constructor() {
        super(6355);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.SpouseGetInformationsMessage = SpouseGetInformationsMessage;
module.exports.messages[6355] = SpouseGetInformationsMessage;

class SpouseInformationsMessage extends ProtocolMessage {
    constructor(spouse) {
        super(6356);
        this.spouse = spouse;
    }

    serialize() {
        this.buffer.writeShort(this.spouse.getTypeId());
        this.spouse.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.spouse = ProtocolTypeManager.getInstance(FriendSpouseInformations, _loc2_);
        this.spouse.deserialize(buffer);
    }
};
module.exports.SpouseInformationsMessage = SpouseInformationsMessage;
module.exports.messages[6356] = SpouseInformationsMessage;

class SpouseStatusMessage extends ProtocolMessage {
    constructor(hasSpouse) {
        super(6265);
        this.hasSpouse = hasSpouse;
    }

    serialize() {
        this.buffer.writeBoolean(this.hasSpouse);
    }

    deserialize(buffer) {
        this.hasSpouse = buffer.readBoolean();
    }
};
module.exports.SpouseStatusMessage = SpouseStatusMessage;
module.exports.messages[6265] = SpouseStatusMessage;

class WarnOnPermaDeathStateMessage extends ProtocolMessage {
    constructor(enable) {
        super(6513);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.WarnOnPermaDeathStateMessage = WarnOnPermaDeathStateMessage;
module.exports.messages[6513] = WarnOnPermaDeathStateMessage;

class GuestLimitationMessage extends ProtocolMessage {
    constructor(reason) {
        super(6506);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of GuestLimitationMessage.reason.");
        }
    }
};
module.exports.GuestLimitationMessage = GuestLimitationMessage;
module.exports.messages[6506] = GuestLimitationMessage;

class GuestModeMessage extends ProtocolMessage {
    constructor(active) {
        super(6505);
        this.active = active;
    }

    serialize() {
        this.buffer.writeBoolean(this.active);
    }

    deserialize(buffer) {
        this.active = buffer.readBoolean();
    }
};
module.exports.GuestModeMessage = GuestModeMessage;
module.exports.messages[6505] = GuestModeMessage;

class ChallengeFightJoinRefusedMessage extends ProtocolMessage {
    constructor(playerId, reason) {
        super(5908);
        this.playerId = playerId;
        this.reason = reason;
    }

    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of ChallengeFightJoinRefusedMessage.playerId.");
        }
        this.reason = buffer.readByte();
    }
};
module.exports.ChallengeFightJoinRefusedMessage = ChallengeFightJoinRefusedMessage;
module.exports.messages[5908] = ChallengeFightJoinRefusedMessage;

class GuildBulletinMessage extends BulletinMessage {
    constructor(content, timestamp, memberId, memberName, lastNotifiedTimestamp) {
        super(content, timestamp, memberId, memberName, lastNotifiedTimestamp);
        this.messageId = 6689;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GuildBulletinMessage = GuildBulletinMessage;
module.exports.messages[6689] = GuildBulletinMessage;

class GuildBulletinSetErrorMessage extends SocialNoticeSetErrorMessage {
    constructor(reason) {
        super(reason);
        this.messageId = 6691;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GuildBulletinSetErrorMessage = GuildBulletinSetErrorMessage;
module.exports.messages[6691] = GuildBulletinSetErrorMessage;

class GuildBulletinSetRequestMessage extends SocialNoticeSetRequestMessage {
    constructor(content, notifyMembers) {
        super();
        this.content = content;
        this.notifyMembers = notifyMembers;
        this.messageId = 6694;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.content);
        this.buffer.writeBoolean(this.notifyMembers);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.content = buffer.readUTF();
        this.notifyMembers = buffer.readBoolean();;
    }
};
module.exports.GuildBulletinSetRequestMessage = GuildBulletinSetRequestMessage;
module.exports.messages[6694] = GuildBulletinSetRequestMessage;

class GuildChangeMemberParametersMessage extends ProtocolMessage {
    constructor(memberId, rank, experienceGivenPercent, rights) {
        super(5549);
        this.memberId = memberId;
        this.rank = rank;
        this.experienceGivenPercent = experienceGivenPercent;
        this.rights = rights;
    }

    serialize() {
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        if (this.rank < 0) {
            throw new Error("Forbidden value (" + this.rank + ") on element rank.");
        }
        this.buffer.writeVarShort(this.rank);
        if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
            throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element experienceGivenPercent.");
        }
        this.buffer.writeByte(this.experienceGivenPercent);
        if (this.rights < 0) {
            throw new Error("Forbidden value (" + this.rights + ") on element rights.");
        }
        this.buffer.writeVarInt(this.rights);
    }

    deserialize(buffer) {
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element of GuildChangeMemberParametersMessage.memberId.");
        }
        this.rank = buffer.readVarUhShort();
        if (this.rank < 0) {
            throw new Error("Forbidden value (" + this.rank + ") on element of GuildChangeMemberParametersMessage.rank.");
        };
        this.experienceGivenPercent = buffer.readByte();
        if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
            throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element of GuildChangeMemberParametersMessage.experienceGivenPercent.");
        };
        this.rights = buffer.readVarUhInt();
        if (this.rights < 0) {
            throw new Error("Forbidden value (" + this.rights + ") on element of GuildChangeMemberParametersMessage.rights.");
        };
    }
};
module.exports.GuildChangeMemberParametersMessage = GuildChangeMemberParametersMessage;
module.exports.messages[5549] = GuildChangeMemberParametersMessage;

class GuildCharacsUpgradeRequestMessage extends ProtocolMessage {
    constructor(charaTypeTarget) {
        super(5706);
        this.charaTypeTarget = charaTypeTarget;
    }

    serialize() {
        this.buffer.writeByte(this.charaTypeTarget);
    }

    deserialize(buffer) {
        this.charaTypeTarget = buffer.readByte();
        if (this.charaTypeTarget < 0) {
            throw new Error("Forbidden value (" + this.charaTypeTarget + ") on element of GuildCharacsUpgradeRequestMessage.charaTypeTarget.");
        }
    }
};
module.exports.GuildCharacsUpgradeRequestMessage = GuildCharacsUpgradeRequestMessage;
module.exports.messages[5706] = GuildCharacsUpgradeRequestMessage;

class GuildCreationResultMessage extends ProtocolMessage {
    constructor(result) {
        super(5554);
        this.result = result;
    }

    serialize() {
        this.buffer.writeByte(this.result);
    }

    deserialize(buffer) {
        this.result = buffer.readByte();
        if (this.result < 0) {
            throw new Error("Forbidden value (" + this.result + ") on element of GuildCreationResultMessage.result.");
        }
    }
};
module.exports.GuildCreationResultMessage = GuildCreationResultMessage;
module.exports.messages[5554] = GuildCreationResultMessage;

class GuildCreationStartedMessage extends ProtocolMessage {
    constructor() {
        super(5920);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GuildCreationStartedMessage = GuildCreationStartedMessage;
module.exports.messages[5920] = GuildCreationStartedMessage;

class GuildCreationValidMessage extends ProtocolMessage {
    constructor(guildName, guildEmblem) {
        super(5546);
        this.guildName = guildName;
        this.guildEmblem = guildEmblem;
    }

    serialize() {
        this.buffer.writeUTF(this.guildName);
        this.guildEmblem.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.guildName = buffer.readUTF();
        this.guildEmblem = new GuildEmblem();
        this.guildEmblem.deserialize(buffer);
    }
};
module.exports.GuildCreationValidMessage = GuildCreationValidMessage;
module.exports.messages[5546] = GuildCreationValidMessage;

class GuildFactsErrorMessage extends ProtocolMessage {
    constructor(guildId) {
        super(6424);
        this.guildId = guildId;
    }

    serialize() {
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
    }

    deserialize(buffer) {
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element of GuildFactsErrorMessage.guildId.");
        }
    }
};
module.exports.GuildFactsErrorMessage = GuildFactsErrorMessage;
module.exports.messages[6424] = GuildFactsErrorMessage;

class GuildFactsMessage extends ProtocolMessage {
    constructor(infos, creationDate, nbTaxCollectors, members) {
        super(6415);
        this.infos = infos;
        this.creationDate = creationDate;
        this.nbTaxCollectors = nbTaxCollectors;
        this.members = members;
    }

    serialize() {
        this.buffer.writeShort(this.infos.getTypeId());
        this.infos.serialize(this.buffer);
        if (this.creationDate < 0) {
            throw new Error("Forbidden value (" + this.creationDate + ") on element creationDate.");
        }
        this.buffer.writeInt(this.creationDate);
        if (this.nbTaxCollectors < 0) {
            throw new Error("Forbidden value (" + this.nbTaxCollectors + ") on element nbTaxCollectors.");
        }
        this.buffer.writeVarShort(this.nbTaxCollectors);
        this.buffer.writeShort(this.members.length);
        var _loc2_ = 0;
        while (_loc2_ < this.members.length) {
            (this.members[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        this.infos = ProtocolTypeManager.getInstance(GuildFactSheetInformations, _loc2_);
        this.infos.deserialize(buffer);
        this.creationDate = buffer.readInt();
        if (this.creationDate < 0) {
            throw new Error("Forbidden value (" + this.creationDate + ") on element of GuildFactsMessage.creationDate.");
        }
        this.nbTaxCollectors = buffer.readVarUhShort();
        if (this.nbTaxCollectors < 0) {
            throw new Error("Forbidden value (" + this.nbTaxCollectors + ") on element of GuildFactsMessage.nbTaxCollectors.");
        };
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = new CharacterMinimalInformations();
            _loc5_.deserialize(buffer);
            this.members.push(_loc5_);
            _loc4_++;
        }
    }
};
module.exports.GuildFactsMessage = GuildFactsMessage;
module.exports.messages[6415] = GuildFactsMessage;

class GuildFactsRequestMessage extends ProtocolMessage {
    constructor(guildId) {
        super(6404);
        this.guildId = guildId;
    }

    serialize() {
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
    }

    deserialize(buffer) {
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            throw new Error("Forbidden value (" + this.guildId + ") on element of GuildFactsRequestMessage.guildId.");
        }
    }
};
module.exports.GuildFactsRequestMessage = GuildFactsRequestMessage;
module.exports.messages[6404] = GuildFactsRequestMessage;

class GuildGetInformationsMessage extends ProtocolMessage {
    constructor(infoType) {
        super(5550);
        this.infoType = infoType;
    }

    serialize() {
        this.buffer.writeByte(this.infoType);
    }

    deserialize(buffer) {
        this.infoType = buffer.readByte();
        if (this.infoType < 0) {
            throw new Error("Forbidden value (" + this.infoType + ") on element of GuildGetInformationsMessage.infoType.");
        }
    }
};
module.exports.GuildGetInformationsMessage = GuildGetInformationsMessage;
module.exports.messages[5550] = GuildGetInformationsMessage;

class GuildHouseRemoveMessage extends ProtocolMessage {
    constructor(houseId, instanceId, secondHand) {
        super(6180);
        this.houseId = houseId;
        this.instanceId = instanceId;
        this.secondHand = secondHand;
    }

    serialize() {
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
        }
        this.buffer.writeInt(this.instanceId);
        this.buffer.writeBoolean(this.secondHand);
    }

    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of GuildHouseRemoveMessage.houseId.");
        }
        this.instanceId = buffer.readInt();
        if (this.instanceId < 0) {
            throw new Error("Forbidden value (" + this.instanceId + ") on element of GuildHouseRemoveMessage.instanceId.");
        };
        this.secondHand = buffer.readBoolean();
    }
};
module.exports.GuildHouseRemoveMessage = GuildHouseRemoveMessage;
module.exports.messages[6180] = GuildHouseRemoveMessage;

class GuildHousesInformationMessage extends ProtocolMessage {
    constructor(housesInformations) {
        super(5919);
        this.housesInformations = housesInformations;
    }

    serialize() {
        this.buffer.writeShort(this.housesInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.housesInformations.length) {
            (this.housesInformations[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new HouseInformationsForGuild();
            _loc4_.deserialize(buffer);
            this.housesInformations.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GuildHousesInformationMessage = GuildHousesInformationMessage;
module.exports.messages[5919] = GuildHousesInformationMessage;

class GuildHouseUpdateInformationMessage extends ProtocolMessage {
    constructor(housesInformations) {
        super(6181);
        this.housesInformations = housesInformations;
    }

    serialize() {
        this.housesInformations.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.housesInformations = new HouseInformationsForGuild();
        this.housesInformations.deserialize(buffer);
    }
};
module.exports.GuildHouseUpdateInformationMessage = GuildHouseUpdateInformationMessage;
module.exports.messages[6181] = GuildHouseUpdateInformationMessage;

class GuildInAllianceFactsMessage extends GuildFactsMessage {
    constructor(infos, creationDate, nbTaxCollectors, members, allianceInfos) {
        super(infos, creationDate, nbTaxCollectors, members);
        this.allianceInfos = allianceInfos;
        this.messageId = 6422;
    }

    serialize() {
        super.serialize();
        this.allianceInfos.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceInfos = new BasicNamedAllianceInformations();
        this.allianceInfos.deserialize(buffer);
    }
};
module.exports.GuildInAllianceFactsMessage = GuildInAllianceFactsMessage;
module.exports.messages[6422] = GuildInAllianceFactsMessage;

class GuildInformationsGeneralMessage extends ProtocolMessage {
    constructor(abandonnedPaddock, level, expLevelFloor, experience, expNextLevelFloor, creationDate, nbTotalMembers, nbConnectedMembers) {
        super(5557);
        this.abandonnedPaddock = abandonnedPaddock;
        this.level = level;
        this.expLevelFloor = expLevelFloor;
        this.experience = experience;
        this.expNextLevelFloor = expNextLevelFloor;
        this.creationDate = creationDate;
        this.nbTotalMembers = nbTotalMembers;
        this.nbConnectedMembers = nbConnectedMembers;
    }

    serialize() {
        this.buffer.writeBoolean(this.abandonnedPaddock);
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
        if (this.expLevelFloor < 0 || this.expLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.expLevelFloor + ") on element expLevelFloor.");
        }
        this.buffer.writeVarLong(this.expLevelFloor);
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element experience.");
        }
        this.buffer.writeVarLong(this.experience);
        if (this.expNextLevelFloor < 0 || this.expNextLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.expNextLevelFloor + ") on element expNextLevelFloor.");
        }
        this.buffer.writeVarLong(this.expNextLevelFloor);
        if (this.creationDate < 0) {
            throw new Error("Forbidden value (" + this.creationDate + ") on element creationDate.");
        }
        this.buffer.writeInt(this.creationDate);
        if (this.nbTotalMembers < 0) {
            throw new Error("Forbidden value (" + this.nbTotalMembers + ") on element nbTotalMembers.");
        }
        this.buffer.writeVarShort(this.nbTotalMembers);
        if (this.nbConnectedMembers < 0) {
            throw new Error("Forbidden value (" + this.nbConnectedMembers + ") on element nbConnectedMembers.");
        }
        this.buffer.writeVarShort(this.nbConnectedMembers);
    }

    deserialize(buffer) {
        this.abandonnedPaddock = buffer.readBoolean();
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            throw new Error("Forbidden value (" + this.level + ") on element of GuildInformationsGeneralMessage.level.");
        }
        this.expLevelFloor = buffer.readVarUhLong();
        if (this.expLevelFloor < 0 || this.expLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.expLevelFloor + ") on element of GuildInformationsGeneralMessage.expLevelFloor.");
        };
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element of GuildInformationsGeneralMessage.experience.");
        };
        this.expNextLevelFloor = buffer.readVarUhLong();
        if (this.expNextLevelFloor < 0 || this.expNextLevelFloor > 9007199254740990) {
            throw new Error("Forbidden value (" + this.expNextLevelFloor + ") on element of GuildInformationsGeneralMessage.expNextLevelFloor.");
        };
        this.creationDate = buffer.readInt();
        if (this.creationDate < 0) {
            throw new Error("Forbidden value (" + this.creationDate + ") on element of GuildInformationsGeneralMessage.creationDate.");
        };
        this.nbTotalMembers = buffer.readVarUhShort();
        if (this.nbTotalMembers < 0) {
            throw new Error("Forbidden value (" + this.nbTotalMembers + ") on element of GuildInformationsGeneralMessage.nbTotalMembers.");
        };
        this.nbConnectedMembers = buffer.readVarUhShort();
        if (this.nbConnectedMembers < 0) {
            throw new Error("Forbidden value (" + this.nbConnectedMembers + ") on element of GuildInformationsGeneralMessage.nbConnectedMembers.");
        };
    }
};
module.exports.GuildInformationsGeneralMessage = GuildInformationsGeneralMessage;
module.exports.messages[5557] = GuildInformationsGeneralMessage;

class GuildInformationsMembersMessage extends ProtocolMessage {
    constructor(members) {
        super(5558);
        this.members = members;
    }

    serialize() {
        this.buffer.writeShort(this.members.length);
        var _loc2_ = 0;
        while (_loc2_ < this.members.length) {
            (this.members[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GuildMember();
            _loc4_.deserialize(buffer);
            this.members.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GuildInformationsMembersMessage = GuildInformationsMembersMessage;
module.exports.messages[5558] = GuildInformationsMembersMessage;

class GuildInformationsMemberUpdateMessage extends ProtocolMessage {
    constructor(member) {
        super(5597);
        this.member = member;
    }

    serialize() {
        this.member.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.member = new GuildMember();
        this.member.deserialize(buffer);
    }
};
module.exports.GuildInformationsMemberUpdateMessage = GuildInformationsMemberUpdateMessage;
module.exports.messages[5597] = GuildInformationsMemberUpdateMessage;

class GuildInformationsPaddocksMessage extends ProtocolMessage {
    constructor(nbPaddockMax, paddocksInformations) {
        super(5959);
        this.nbPaddockMax = nbPaddockMax;
        this.paddocksInformations = paddocksInformations;
    }

    serialize() {
        if (this.nbPaddockMax < 0) {
            throw new Error("Forbidden value (" + this.nbPaddockMax + ") on element nbPaddockMax.");
        }
        this.buffer.writeByte(this.nbPaddockMax);
        this.buffer.writeShort(this.paddocksInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.paddocksInformations.length) {
            (this.paddocksInformations[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.nbPaddockMax = buffer.readByte();
        if (this.nbPaddockMax < 0) {
            throw new Error("Forbidden value (" + this.nbPaddockMax + ") on element of GuildInformationsPaddocksMessage.nbPaddockMax.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PaddockContentInformations();
            _loc4_.deserialize(buffer);
            this.paddocksInformations.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GuildInformationsPaddocksMessage = GuildInformationsPaddocksMessage;
module.exports.messages[5959] = GuildInformationsPaddocksMessage;

class GuildInfosUpgradeMessage extends ProtocolMessage {
    constructor(maxTaxCollectorsCount, taxCollectorsCount, taxCollectorLifePoints, taxCollectorDamagesBonuses, taxCollectorPods, taxCollectorProspecting, taxCollectorWisdom, boostPoints, spellId, spellLevel) {
        super(5636);
        this.maxTaxCollectorsCount = maxTaxCollectorsCount;
        this.taxCollectorsCount = taxCollectorsCount;
        this.taxCollectorLifePoints = taxCollectorLifePoints;
        this.taxCollectorDamagesBonuses = taxCollectorDamagesBonuses;
        this.taxCollectorPods = taxCollectorPods;
        this.taxCollectorProspecting = taxCollectorProspecting;
        this.taxCollectorWisdom = taxCollectorWisdom;
        this.boostPoints = boostPoints;
        this.spellId = spellId;
        this.spellLevel = spellLevel;
    }

    serialize() {
        if (this.maxTaxCollectorsCount < 0) {
            throw new Error("Forbidden value (" + this.maxTaxCollectorsCount + ") on element maxTaxCollectorsCount.");
        }
        this.buffer.writeByte(this.maxTaxCollectorsCount);
        if (this.taxCollectorsCount < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorsCount + ") on element taxCollectorsCount.");
        }
        this.buffer.writeByte(this.taxCollectorsCount);
        if (this.taxCollectorLifePoints < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorLifePoints + ") on element taxCollectorLifePoints.");
        }
        this.buffer.writeVarShort(this.taxCollectorLifePoints);
        if (this.taxCollectorDamagesBonuses < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorDamagesBonuses + ") on element taxCollectorDamagesBonuses.");
        }
        this.buffer.writeVarShort(this.taxCollectorDamagesBonuses);
        if (this.taxCollectorPods < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorPods + ") on element taxCollectorPods.");
        }
        this.buffer.writeVarShort(this.taxCollectorPods);
        if (this.taxCollectorProspecting < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorProspecting + ") on element taxCollectorProspecting.");
        }
        this.buffer.writeVarShort(this.taxCollectorProspecting);
        if (this.taxCollectorWisdom < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorWisdom + ") on element taxCollectorWisdom.");
        }
        this.buffer.writeVarShort(this.taxCollectorWisdom);
        if (this.boostPoints < 0) {
            throw new Error("Forbidden value (" + this.boostPoints + ") on element boostPoints.");
        }
        this.buffer.writeVarShort(this.boostPoints);
        this.buffer.writeShort(this.spellId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.spellId.length) {
            if (this.spellId[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.spellId[_loc2_] + ") on element 9 (starting at 1) of spellId.");
            }
            this.buffer.writeVarShort(this.spellId[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.spellLevel.length);
        var _loc3_ = 0;
        while (_loc3_ < this.spellLevel.length) {
            this.buffer.writeShort(this.spellLevel[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        this.maxTaxCollectorsCount = buffer.readByte();
        if (this.maxTaxCollectorsCount < 0) {
            throw new Error("Forbidden value (" + this.maxTaxCollectorsCount + ") on element of GuildInfosUpgradeMessage.maxTaxCollectorsCount.");
        }
        this.taxCollectorsCount = buffer.readByte();
        if (this.taxCollectorsCount < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorsCount + ") on element of GuildInfosUpgradeMessage.taxCollectorsCount.");
        };
        this.taxCollectorLifePoints = buffer.readVarUhShort();
        if (this.taxCollectorLifePoints < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorLifePoints + ") on element of GuildInfosUpgradeMessage.taxCollectorLifePoints.");
        };
        this.taxCollectorDamagesBonuses = buffer.readVarUhShort();
        if (this.taxCollectorDamagesBonuses < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorDamagesBonuses + ") on element of GuildInfosUpgradeMessage.taxCollectorDamagesBonuses.");
        };
        this.taxCollectorPods = buffer.readVarUhShort();
        if (this.taxCollectorPods < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorPods + ") on element of GuildInfosUpgradeMessage.taxCollectorPods.");
        };
        this.taxCollectorProspecting = buffer.readVarUhShort();
        if (this.taxCollectorProspecting < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorProspecting + ") on element of GuildInfosUpgradeMessage.taxCollectorProspecting.");
        };
        this.taxCollectorWisdom = buffer.readVarUhShort();
        if (this.taxCollectorWisdom < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorWisdom + ") on element of GuildInfosUpgradeMessage.taxCollectorWisdom.");
        };
        this.boostPoints = buffer.readVarUhShort();
        if (this.boostPoints < 0) {
            throw new Error("Forbidden value (" + this.boostPoints + ") on element of GuildInfosUpgradeMessage.boostPoints.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of spellId.");
            }
            this.spellId.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readShort();
            this.spellLevel.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.GuildInfosUpgradeMessage = GuildInfosUpgradeMessage;
module.exports.messages[5636] = GuildInfosUpgradeMessage;

class GuildInvitationAnswerMessage extends ProtocolMessage {
    constructor(accept) {
        super(5556);
        this.accept = accept;
    }

    serialize() {
        this.buffer.writeBoolean(this.accept);
    }

    deserialize(buffer) {
        this.accept = buffer.readBoolean();
    }
};
module.exports.GuildInvitationAnswerMessage = GuildInvitationAnswerMessage;
module.exports.messages[5556] = GuildInvitationAnswerMessage;

class GuildInvitationByNameMessage extends ProtocolMessage {
    constructor(name) {
        super(6115);
        this.name = name;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
    }

    deserialize(buffer) {
        this.name = buffer.readUTF();
    }
};
module.exports.GuildInvitationByNameMessage = GuildInvitationByNameMessage;
module.exports.messages[6115] = GuildInvitationByNameMessage;

class GuildInvitationMessage extends ProtocolMessage {
    constructor(targetId) {
        super(5551);
        this.targetId = targetId;
    }

    serialize() {
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
    }

    deserialize(buffer) {
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of GuildInvitationMessage.targetId.");
        }
    }
};
module.exports.GuildInvitationMessage = GuildInvitationMessage;
module.exports.messages[5551] = GuildInvitationMessage;

class GuildInvitationStateRecrutedMessage extends ProtocolMessage {
    constructor(invitationState) {
        super(5548);
        this.invitationState = invitationState;
    }

    serialize() {
        this.buffer.writeByte(this.invitationState);
    }

    deserialize(buffer) {
        this.invitationState = buffer.readByte();
        if (this.invitationState < 0) {
            throw new Error("Forbidden value (" + this.invitationState + ") on element of GuildInvitationStateRecrutedMessage.invitationState.");
        }
    }
};
module.exports.GuildInvitationStateRecrutedMessage = GuildInvitationStateRecrutedMessage;
module.exports.messages[5548] = GuildInvitationStateRecrutedMessage;

class GuildInvitationStateRecruterMessage extends ProtocolMessage {
    constructor(recrutedName, invitationState) {
        super(5563);
        this.recrutedName = recrutedName;
        this.invitationState = invitationState;
    }

    serialize() {
        this.buffer.writeUTF(this.recrutedName);
        this.buffer.writeByte(this.invitationState);
    }

    deserialize(buffer) {
        this.recrutedName = buffer.readUTF();
        this.invitationState = buffer.readByte();
        if (this.invitationState < 0) {
            throw new Error("Forbidden value (" + this.invitationState + ") on element of GuildInvitationStateRecruterMessage.invitationState.");
        }
    }
};
module.exports.GuildInvitationStateRecruterMessage = GuildInvitationStateRecruterMessage;
module.exports.messages[5563] = GuildInvitationStateRecruterMessage;

class GuildInvitedMessage extends ProtocolMessage {
    constructor(recruterId, recruterName, guildInfo) {
        super(5552);
        this.recruterId = recruterId;
        this.recruterName = recruterName;
        this.guildInfo = guildInfo;
    }

    serialize() {
        if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.recruterId + ") on element recruterId.");
        }
        this.buffer.writeVarLong(this.recruterId);
        this.buffer.writeUTF(this.recruterName);
        this.guildInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.recruterId = buffer.readVarUhLong();
        if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.recruterId + ") on element of GuildInvitedMessage.recruterId.");
        }
        this.recruterName = buffer.readUTF();
        this.guildInfo = new BasicGuildInformations();
        this.guildInfo.deserialize(buffer);
    }
};
module.exports.GuildInvitedMessage = GuildInvitedMessage;
module.exports.messages[5552] = GuildInvitedMessage;

class GuildJoinedMessage extends ProtocolMessage {
    constructor(guildInfo, memberRights) {
        super(5564);
        this.guildInfo = guildInfo;
        this.memberRights = memberRights;
    }

    serialize() {
        this.guildInfo.serialize(this.buffer);
        if (this.memberRights < 0) {
            throw new Error("Forbidden value (" + this.memberRights + ") on element memberRights.");
        }
        this.buffer.writeVarInt(this.memberRights);
    }

    deserialize(buffer) {
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
        this.memberRights = buffer.readVarUhInt();
        if (this.memberRights < 0) {
            throw new Error("Forbidden value (" + this.memberRights + ") on element of GuildJoinedMessage.memberRights.");
        }
    }
};
module.exports.GuildJoinedMessage = GuildJoinedMessage;
module.exports.messages[5564] = GuildJoinedMessage;

class GuildKickRequestMessage extends ProtocolMessage {
    constructor(kickedId) {
        super(5887);
        this.kickedId = kickedId;
    }

    serialize() {
        if (this.kickedId < 0 || this.kickedId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kickedId + ") on element kickedId.");
        }
        this.buffer.writeVarLong(this.kickedId);
    }

    deserialize(buffer) {
        this.kickedId = buffer.readVarUhLong();
        if (this.kickedId < 0 || this.kickedId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kickedId + ") on element of GuildKickRequestMessage.kickedId.");
        }
    }
};
module.exports.GuildKickRequestMessage = GuildKickRequestMessage;
module.exports.messages[5887] = GuildKickRequestMessage;

class GuildLeftMessage extends ProtocolMessage {
    constructor() {
        super(5562);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GuildLeftMessage = GuildLeftMessage;
module.exports.messages[5562] = GuildLeftMessage;

class GuildLevelUpMessage extends ProtocolMessage {
    constructor(newLevel) {
        super(6062);
        this.newLevel = newLevel;
    }

    serialize() {
        if (this.newLevel < 2 || this.newLevel > 200) {
            throw new Error("Forbidden value (" + this.newLevel + ") on element newLevel.");
        }
        this.buffer.writeByte(this.newLevel);
    }

    deserialize(buffer) {
        this.newLevel = buffer.readUnsignedByte();
        if (this.newLevel < 2 || this.newLevel > 200) {
            throw new Error("Forbidden value (" + this.newLevel + ") on element of GuildLevelUpMessage.newLevel.");
        }
    }
};
module.exports.GuildLevelUpMessage = GuildLevelUpMessage;
module.exports.messages[6062] = GuildLevelUpMessage;

class GuildListMessage extends ProtocolMessage {
    constructor(guilds) {
        super(6413);
        this.guilds = guilds;
    }

    serialize() {
        this.buffer.writeShort(this.guilds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.guilds.length) {
            (this.guilds[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GuildInformations();
            _loc4_.deserialize(buffer);
            this.guilds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GuildListMessage = GuildListMessage;
module.exports.messages[6413] = GuildListMessage;

class GuildMemberLeavingMessage extends ProtocolMessage {
    constructor(kicked, memberId) {
        super(5923);
        this.kicked = kicked;
        this.memberId = memberId;
    }

    serialize() {
        this.buffer.writeBoolean(this.kicked);
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
    }

    deserialize(buffer) {
        this.kicked = buffer.readBoolean();
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element of GuildMemberLeavingMessage.memberId.");
        }
    }
};
module.exports.GuildMemberLeavingMessage = GuildMemberLeavingMessage;
module.exports.messages[5923] = GuildMemberLeavingMessage;

class GuildMemberOnlineStatusMessage extends ProtocolMessage {
    constructor(memberId, online) {
        super(6061);
        this.memberId = memberId;
        this.online = online;
    }

    serialize() {
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        this.buffer.writeBoolean(this.online);
    }

    deserialize(buffer) {
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.memberId + ") on element of GuildMemberOnlineStatusMessage.memberId.");
        }
        this.online = buffer.readBoolean();
    }
};
module.exports.GuildMemberOnlineStatusMessage = GuildMemberOnlineStatusMessage;
module.exports.messages[6061] = GuildMemberOnlineStatusMessage;

class GuildMembershipMessage extends GuildJoinedMessage {
    constructor(guildInfo, memberRights) {
        super(guildInfo, memberRights);
        this.messageId = 5835;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GuildMembershipMessage = GuildMembershipMessage;
module.exports.messages[5835] = GuildMembershipMessage;

class GuildModificationEmblemValidMessage extends ProtocolMessage {
    constructor(guildEmblem) {
        super(6328);
        this.guildEmblem = guildEmblem;
    }

    serialize() {
        this.guildEmblem.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.guildEmblem = new GuildEmblem();
        this.guildEmblem.deserialize(buffer);
    }
};
module.exports.GuildModificationEmblemValidMessage = GuildModificationEmblemValidMessage;
module.exports.messages[6328] = GuildModificationEmblemValidMessage;

class GuildModificationNameValidMessage extends ProtocolMessage {
    constructor(guildName) {
        super(6327);
        this.guildName = guildName;
    }

    serialize() {
        this.buffer.writeUTF(this.guildName);
    }

    deserialize(buffer) {
        this.guildName = buffer.readUTF();
    }
};
module.exports.GuildModificationNameValidMessage = GuildModificationNameValidMessage;
module.exports.messages[6327] = GuildModificationNameValidMessage;

class GuildModificationStartedMessage extends ProtocolMessage {
    constructor(canChangeName, canChangeEmblem) {
        super(6324);
        this.canChangeName = canChangeName;
        this.canChangeEmblem = canChangeEmblem;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.canChangeName);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.canChangeEmblem);
        this.buffer.writeByte(_loc2_);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
    }
};
module.exports.GuildModificationStartedMessage = GuildModificationStartedMessage;
module.exports.messages[6324] = GuildModificationStartedMessage;

class GuildModificationValidMessage extends ProtocolMessage {
    constructor(guildName, guildEmblem) {
        super(6323);
        this.guildName = guildName;
        this.guildEmblem = guildEmblem;
    }

    serialize() {
        this.buffer.writeUTF(this.guildName);
        this.guildEmblem.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.guildName = buffer.readUTF();
        this.guildEmblem = new GuildEmblem();
        this.guildEmblem.deserialize(buffer);
    }
};
module.exports.GuildModificationValidMessage = GuildModificationValidMessage;
module.exports.messages[6323] = GuildModificationValidMessage;

class GuildMotdMessage extends SocialNoticeMessage {
    constructor(content, timestamp, memberId, memberName) {
        super(content, timestamp, memberId, memberName);
        this.messageId = 6590;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GuildMotdMessage = GuildMotdMessage;
module.exports.messages[6590] = GuildMotdMessage;

class GuildMotdSetErrorMessage extends SocialNoticeSetErrorMessage {
    constructor(reason) {
        super(reason);
        this.messageId = 6591;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.GuildMotdSetErrorMessage = GuildMotdSetErrorMessage;
module.exports.messages[6591] = GuildMotdSetErrorMessage;

class GuildMotdSetRequestMessage extends SocialNoticeSetRequestMessage {
    constructor(content) {
        super();
        this.content = content;
        this.messageId = 6588;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.content);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.content = buffer.readUTF();
    }
};
module.exports.GuildMotdSetRequestMessage = GuildMotdSetRequestMessage;
module.exports.messages[6588] = GuildMotdSetRequestMessage;

class GuildPaddockBoughtMessage extends ProtocolMessage {
    constructor(paddockInfo) {
        super(5952);
        this.paddockInfo = paddockInfo;
    }

    serialize() {
        this.paddockInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.paddockInfo = new PaddockContentInformations();
        this.paddockInfo.deserialize(buffer);
    }
};
module.exports.GuildPaddockBoughtMessage = GuildPaddockBoughtMessage;
module.exports.messages[5952] = GuildPaddockBoughtMessage;

class GuildPaddockRemovedMessage extends ProtocolMessage {
    constructor(paddockId) {
        super(5955);
        this.paddockId = paddockId;
    }

    serialize() {
        this.buffer.writeInt(this.paddockId);
    }

    deserialize(buffer) {
        this.paddockId = buffer.readInt();
    }
};
module.exports.GuildPaddockRemovedMessage = GuildPaddockRemovedMessage;
module.exports.messages[5955] = GuildPaddockRemovedMessage;

class GuildPaddockTeleportRequestMessage extends ProtocolMessage {
    constructor(paddockId) {
        super(5957);
        this.paddockId = paddockId;
    }

    serialize() {
        this.buffer.writeInt(this.paddockId);
    }

    deserialize(buffer) {
        this.paddockId = buffer.readInt();
    }
};
module.exports.GuildPaddockTeleportRequestMessage = GuildPaddockTeleportRequestMessage;
module.exports.messages[5957] = GuildPaddockTeleportRequestMessage;

class GuildSpellUpgradeRequestMessage extends ProtocolMessage {
    constructor(spellId) {
        super(5699);
        this.spellId = spellId;
    }

    serialize() {
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeInt(this.spellId);
    }

    deserialize(buffer) {
        this.spellId = buffer.readInt();
        if (this.spellId < 0) {
            throw new Error("Forbidden value (" + this.spellId + ") on element of GuildSpellUpgradeRequestMessage.spellId.");
        }
    }
};
module.exports.GuildSpellUpgradeRequestMessage = GuildSpellUpgradeRequestMessage;
module.exports.messages[5699] = GuildSpellUpgradeRequestMessage;

class GuildVersatileInfoListMessage extends ProtocolMessage {
    constructor(guilds) {
        super(6435);
        this.guilds = guilds;
    }

    serialize() {
        this.buffer.writeShort(this.guilds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.guilds.length) {
            this.buffer.writeShort((this.guilds[_loc2_]).getTypeId());
            (this.guilds[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(GuildVersatileInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.guilds.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.GuildVersatileInfoListMessage = GuildVersatileInfoListMessage;
module.exports.messages[6435] = GuildVersatileInfoListMessage;

class AbstractTaxCollectorListMessage extends ProtocolMessage {
    constructor(informations) {
        super(6568);
        this.informations = informations;
    }

    serialize() {
        this.buffer.writeShort(this.informations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.informations.length) {
            this.buffer.writeShort((this.informations[_loc2_]).getTypeId());
            (this.informations[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(TaxCollectorInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.informations.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.AbstractTaxCollectorListMessage = AbstractTaxCollectorListMessage;
module.exports.messages[6568] = AbstractTaxCollectorListMessage;

class GameRolePlayTaxCollectorFightRequestMessage extends ProtocolMessage {
    constructor(taxCollectorId) {
        super(5954);
        this.taxCollectorId = taxCollectorId;
    }

    serialize() {
        this.buffer.writeInt(this.taxCollectorId);
    }

    deserialize(buffer) {
        this.taxCollectorId = buffer.readInt();
    }
};
module.exports.GameRolePlayTaxCollectorFightRequestMessage = GameRolePlayTaxCollectorFightRequestMessage;
module.exports.messages[5954] = GameRolePlayTaxCollectorFightRequestMessage;

class GuildFightJoinRequestMessage extends ProtocolMessage {
    constructor(taxCollectorId) {
        super(5717);
        this.taxCollectorId = taxCollectorId;
    }

    serialize() {
        this.buffer.writeInt(this.taxCollectorId);
    }

    deserialize(buffer) {
        this.taxCollectorId = buffer.readInt();
    }
};
module.exports.GuildFightJoinRequestMessage = GuildFightJoinRequestMessage;
module.exports.messages[5717] = GuildFightJoinRequestMessage;

class GuildFightLeaveRequestMessage extends ProtocolMessage {
    constructor(taxCollectorId, characterId) {
        super(5715);
        this.taxCollectorId = taxCollectorId;
        this.characterId = characterId;
    }

    serialize() {
        if (this.taxCollectorId < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
        }
        this.buffer.writeInt(this.taxCollectorId);
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }

    deserialize(buffer) {
        this.taxCollectorId = buffer.readInt();
        if (this.taxCollectorId < 0) {
            throw new Error("Forbidden value (" + this.taxCollectorId + ") on element of GuildFightLeaveRequestMessage.taxCollectorId.");
        }
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element of GuildFightLeaveRequestMessage.characterId.");
        };
    }
};
module.exports.GuildFightLeaveRequestMessage = GuildFightLeaveRequestMessage;
module.exports.messages[5715] = GuildFightLeaveRequestMessage;

class GuildFightPlayersEnemiesListMessage extends ProtocolMessage {
    constructor(fightId, playerInfo) {
        super(5928);
        this.fightId = fightId;
        this.playerInfo = playerInfo;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        this.buffer.writeShort(this.playerInfo.length);
        var _loc2_ = 0;
        while (_loc2_ < this.playerInfo.length) {
            (this.playerInfo[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersEnemiesListMessage.fightId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new CharacterMinimalPlusLookInformations();
            _loc4_.deserialize(buffer);
            this.playerInfo.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.GuildFightPlayersEnemiesListMessage = GuildFightPlayersEnemiesListMessage;
module.exports.messages[5928] = GuildFightPlayersEnemiesListMessage;

class GuildFightPlayersEnemyRemoveMessage extends ProtocolMessage {
    constructor(fightId, playerId) {
        super(5929);
        this.fightId = fightId;
        this.playerId = playerId;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersEnemyRemoveMessage.fightId.");
        }
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of GuildFightPlayersEnemyRemoveMessage.playerId.");
        };
    }
};
module.exports.GuildFightPlayersEnemyRemoveMessage = GuildFightPlayersEnemyRemoveMessage;
module.exports.messages[5929] = GuildFightPlayersEnemyRemoveMessage;

class GuildFightPlayersHelpersJoinMessage extends ProtocolMessage {
    constructor(fightId, playerInfo) {
        super(5720);
        this.fightId = fightId;
        this.playerInfo = playerInfo;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        this.playerInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersHelpersJoinMessage.fightId.");
        }
        this.playerInfo = new CharacterMinimalPlusLookInformations();
        this.playerInfo.deserialize(buffer);
    }
};
module.exports.GuildFightPlayersHelpersJoinMessage = GuildFightPlayersHelpersJoinMessage;
module.exports.messages[5720] = GuildFightPlayersHelpersJoinMessage;

class GuildFightPlayersHelpersLeaveMessage extends ProtocolMessage {
    constructor(fightId, playerId) {
        super(5719);
        this.fightId = fightId;
        this.playerId = playerId;
    }

    serialize() {
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersHelpersLeaveMessage.fightId.");
        }
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of GuildFightPlayersHelpersLeaveMessage.playerId.");
        };
    }
};
module.exports.GuildFightPlayersHelpersLeaveMessage = GuildFightPlayersHelpersLeaveMessage;
module.exports.messages[5719] = GuildFightPlayersHelpersLeaveMessage;

class GuildFightTakePlaceRequestMessage extends GuildFightJoinRequestMessage {
    constructor(taxCollectorId, replacedCharacterId) {
        super(taxCollectorId);
        this.replacedCharacterId = replacedCharacterId;
        this.messageId = 6235;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.replacedCharacterId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.replacedCharacterId = buffer.readInt();
    }
};
module.exports.GuildFightTakePlaceRequestMessage = GuildFightTakePlaceRequestMessage;
module.exports.messages[6235] = GuildFightTakePlaceRequestMessage;

class TaxCollectorAttackedMessage extends ProtocolMessage {
    constructor(firstNameId, lastNameId, worldX, worldY, mapId, subAreaId, guild) {
        super(5918);
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.guild = guild;
    }

    serialize() {
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        this.buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        this.buffer.writeVarShort(this.lastNameId);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.guild.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            throw new Error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorAttackedMessage.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorAttackedMessage.lastNameId.");
        };
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of TaxCollectorAttackedMessage.worldX.");
        };
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of TaxCollectorAttackedMessage.worldY.");
        };
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorAttackedMessage.subAreaId.");
        };
        this.guild = new BasicGuildInformations();
        this.guild.deserialize(buffer);
    }
};
module.exports.TaxCollectorAttackedMessage = TaxCollectorAttackedMessage;
module.exports.messages[5918] = TaxCollectorAttackedMessage;

class TaxCollectorAttackedResultMessage extends ProtocolMessage {
    constructor(deadOrAlive, basicInfos, guild) {
        super(5635);
        this.deadOrAlive = deadOrAlive;
        this.basicInfos = basicInfos;
        this.guild = guild;
    }

    serialize() {
        this.buffer.writeBoolean(this.deadOrAlive);
        this.basicInfos.serialize(this.buffer);
        this.guild.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.deadOrAlive = buffer.readBoolean();
        this.basicInfos = new TaxCollectorBasicInformations();
        this.basicInfos.deserialize(buffer);
        this.guild = new BasicGuildInformations();
        this.guild.deserialize(buffer);
    }
};
module.exports.TaxCollectorAttackedResultMessage = TaxCollectorAttackedResultMessage;
module.exports.messages[5635] = TaxCollectorAttackedResultMessage;

class TaxCollectorErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(5634);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
    }
};
module.exports.TaxCollectorErrorMessage = TaxCollectorErrorMessage;
module.exports.messages[5634] = TaxCollectorErrorMessage;

class TaxCollectorListMessage extends AbstractTaxCollectorListMessage {
    constructor(informations, nbcollectorMax, fightersInformations) {
        super(informations);
        this.nbcollectorMax = nbcollectorMax;
        this.fightersInformations = fightersInformations;
        this.messageId = 5930;
    }

    serialize() {
        super.serialize();
        if (this.nbcollectorMax < 0) {
            throw new Error("Forbidden value (" + this.nbcollectorMax + ") on element nbcollectorMax.");
        }
        this.buffer.writeByte(this.nbcollectorMax);
        this.buffer.writeShort(this.fightersInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.fightersInformations.length) {
            (this.fightersInformations[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        this.nbcollectorMax = buffer.readByte();
        if (this.nbcollectorMax < 0) {
            throw new Error("Forbidden value (" + this.nbcollectorMax + ") on element of TaxCollectorListMessage.nbcollectorMax.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new TaxCollectorFightersInformation();
            _loc4_.deserialize(buffer);
            this.fightersInformations.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.TaxCollectorListMessage = TaxCollectorListMessage;
module.exports.messages[5930] = TaxCollectorListMessage;

class TaxCollectorMovementAddMessage extends ProtocolMessage {
    constructor(informations) {
        super(5917);
        this.informations = informations;
    }

    serialize() {
        this.buffer.writeShort(this.informations.getTypeId());
        this.informations.serialize(this.buffer);
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.informations = ProtocolTypeManager.getInstance(TaxCollectorInformations, _loc2_);
        this.informations.deserialize(buffer);
    }
};
module.exports.TaxCollectorMovementAddMessage = TaxCollectorMovementAddMessage;
module.exports.messages[5917] = TaxCollectorMovementAddMessage;

class TaxCollectorMovementMessage extends ProtocolMessage {
    constructor(movementType, basicInfos, playerId, playerName) {
        super(5633);
        this.movementType = movementType;
        this.basicInfos = basicInfos;
        this.playerId = playerId;
        this.playerName = playerName;
    }

    serialize() {
        this.buffer.writeByte(this.movementType);
        this.basicInfos.serialize(this.buffer);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeUTF(this.playerName);
    }

    deserialize(buffer) {
        this.movementType = buffer.readByte();
        if (this.movementType < 0) {
            throw new Error("Forbidden value (" + this.movementType + ") on element of TaxCollectorMovementMessage.movementType.");
        }
        this.basicInfos = new TaxCollectorBasicInformations();
        this.basicInfos.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of TaxCollectorMovementMessage.playerId.");
        };
        this.playerName = buffer.readUTF();
    }
};
module.exports.TaxCollectorMovementMessage = TaxCollectorMovementMessage;
module.exports.messages[5633] = TaxCollectorMovementMessage;

class TaxCollectorMovementRemoveMessage extends ProtocolMessage {
    constructor(collectorId) {
        super(5915);
        this.collectorId = collectorId;
    }

    serialize() {
        this.buffer.writeInt(this.collectorId);
    }

    deserialize(buffer) {
        this.collectorId = buffer.readInt();
    }
};
module.exports.TaxCollectorMovementRemoveMessage = TaxCollectorMovementRemoveMessage;
module.exports.messages[5915] = TaxCollectorMovementRemoveMessage;

class TaxCollectorMovementsOfflineMessage extends ProtocolMessage {
    constructor(movements) {
        super(6611);
        this.movements = movements;
    }

    serialize() {
        this.buffer.writeShort(this.movements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.movements.length) {
            (this.movements[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new TaxCollectorMovement();
            _loc4_.deserialize(buffer);
            this.movements.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.TaxCollectorMovementsOfflineMessage = TaxCollectorMovementsOfflineMessage;
module.exports.messages[6611] = TaxCollectorMovementsOfflineMessage;

class TaxCollectorStateUpdateMessage extends ProtocolMessage {
    constructor(uniqueId, state) {
        super(6455);
        this.uniqueId = uniqueId;
        this.state = state;
    }

    serialize() {
        this.buffer.writeInt(this.uniqueId);
        this.buffer.writeByte(this.state);
    }

    deserialize(buffer) {
        this.uniqueId = buffer.readInt();
        this.state = buffer.readByte();;
    }
};
module.exports.TaxCollectorStateUpdateMessage = TaxCollectorStateUpdateMessage;
module.exports.messages[6455] = TaxCollectorStateUpdateMessage;

class TopTaxCollectorListMessage extends AbstractTaxCollectorListMessage {
    constructor(informations, isDungeon) {
        super(informations);
        this.isDungeon = isDungeon;
        this.messageId = 6565;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.isDungeon);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.isDungeon = buffer.readBoolean();
    }
};
module.exports.TopTaxCollectorListMessage = TopTaxCollectorListMessage;
module.exports.messages[6565] = TopTaxCollectorListMessage;

class HouseTeleportRequestMessage extends ProtocolMessage {
    constructor(houseId, houseInstanceId) {
        super(6726);
        this.houseId = houseId;
        this.houseInstanceId = houseInstanceId;
    }

    serialize() {
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        this.buffer.writeInt(this.houseInstanceId);
    }

    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            throw new Error("Forbidden value (" + this.houseId + ") on element of HouseTeleportRequestMessage.houseId.");
        }
        this.houseInstanceId = buffer.readInt();
    }
};
module.exports.HouseTeleportRequestMessage = HouseTeleportRequestMessage;
module.exports.messages[6726] = HouseTeleportRequestMessage;

class IdolFightPreparationUpdateMessage extends ProtocolMessage {
    constructor(idolSource, idols) {
        super(6586);
        this.idolSource = idolSource;
        this.idols = idols;
    }

    serialize() {
        this.buffer.writeByte(this.idolSource);
        this.buffer.writeShort(this.idols.length);
        var _loc2_ = 0;
        while (_loc2_ < this.idols.length) {
            this.buffer.writeShort((this.idols[_loc2_]).getTypeId());
            (this.idols[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.idolSource = buffer.readByte();
        if (this.idolSource < 0) {
            throw new Error("Forbidden value (" + this.idolSource + ") on element of IdolFightPreparationUpdateMessage.idolSource.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(Idol, _loc4_);
            _loc5_.deserialize(buffer);
            this.idols.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.IdolFightPreparationUpdateMessage = IdolFightPreparationUpdateMessage;
module.exports.messages[6586] = IdolFightPreparationUpdateMessage;

class IdolListMessage extends ProtocolMessage {
    constructor(chosenIdols, partyChosenIdols, partyIdols) {
        super(6585);
        this.chosenIdols = chosenIdols;
        this.partyChosenIdols = partyChosenIdols;
        this.partyIdols = partyIdols;
    }

    serialize() {
        this.buffer.writeShort(this.chosenIdols.length);
        var _loc2_ = 0;
        while (_loc2_ < this.chosenIdols.length) {
            if (this.chosenIdols[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.chosenIdols[_loc2_] + ") on element 1 (starting at 1) of chosenIdols.");
            }
            this.buffer.writeVarShort(this.chosenIdols[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.partyChosenIdols.length);
        var _loc3_ = 0;
        while (_loc3_ < this.partyChosenIdols.length) {
            if (this.partyChosenIdols[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.partyChosenIdols[_loc3_] + ") on element 2 (starting at 1) of partyChosenIdols.");
            }
            this.buffer.writeVarShort(this.partyChosenIdols[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.partyIdols.length);
        var _loc4_ = 0;
        while (_loc4_ < this.partyIdols.length) {
            this.buffer.writeShort((this.partyIdols[_loc4_]).getTypeId());
            (this.partyIdols[_loc4_]).serialize(this.buffer);
            _loc4_++;
        }
    }

    deserialize(buffer) {
        var _loc8_ = 0;
        var _loc9_ = 0;
        var _loc10_ = 0;
        var _loc11_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readVarUhShort();
            if (_loc8_ < 0) {
                throw new Error("Forbidden value (" + _loc8_ + ") on elements of chosenIdols.");
            }
            this.chosenIdols.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = buffer.readVarUhShort();
            if (_loc9_ < 0) {
                throw new Error("Forbidden value (" + _loc9_ + ") on elements of partyChosenIdols.");
            }
            this.partyChosenIdols.push(_loc9_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = buffer.readUnsignedShort();
            _loc11_ = ProtocolTypeManager.getInstance(PartyIdol, _loc10_);
            _loc11_.deserialize(buffer);
            this.partyIdols.push(_loc11_);
            _loc7_++;
        }
    }
};
module.exports.IdolListMessage = IdolListMessage;
module.exports.messages[6585] = IdolListMessage;

class IdolPartyLostMessage extends ProtocolMessage {
    constructor(idolId) {
        super(6580);
        this.idolId = idolId;
    }

    serialize() {
        if (this.idolId < 0) {
            throw new Error("Forbidden value (" + this.idolId + ") on element idolId.");
        }
        this.buffer.writeVarShort(this.idolId);
    }

    deserialize(buffer) {
        this.idolId = buffer.readVarUhShort();
        if (this.idolId < 0) {
            throw new Error("Forbidden value (" + this.idolId + ") on element of IdolPartyLostMessage.idolId.");
        }
    }
};
module.exports.IdolPartyLostMessage = IdolPartyLostMessage;
module.exports.messages[6580] = IdolPartyLostMessage;

class IdolPartyRefreshMessage extends ProtocolMessage {
    constructor(partyIdol) {
        super(6583);
        this.partyIdol = partyIdol;
    }

    serialize() {
        this.partyIdol.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.partyIdol = new PartyIdol();
        this.partyIdol.deserialize(buffer);
    }
};
module.exports.IdolPartyRefreshMessage = IdolPartyRefreshMessage;
module.exports.messages[6583] = IdolPartyRefreshMessage;

class IdolPartyRegisterRequestMessage extends ProtocolMessage {
    constructor(register) {
        super(6582);
        this.register = register;
    }

    serialize() {
        this.buffer.writeBoolean(this.register);
    }

    deserialize(buffer) {
        this.register = buffer.readBoolean();
    }
};
module.exports.IdolPartyRegisterRequestMessage = IdolPartyRegisterRequestMessage;
module.exports.messages[6582] = IdolPartyRegisterRequestMessage;

class IdolSelectedMessage extends ProtocolMessage {
    constructor(idolId, activate, party) {
        super(6581);
        this.idolId = idolId;
        this.activate = activate;
        this.party = party;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.activate);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.party);
        this.buffer.writeByte(_loc2_);
        if (this.idolId < 0) {
            throw new Error("Forbidden value (" + this.idolId + ") on element idolId.");
        }
        this.buffer.writeVarShort(this.idolId);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.idolId = buffer.readVarUhShort();
        if (this.idolId < 0) {
            throw new Error("Forbidden value (" + this.idolId + ") on element of IdolSelectedMessage.idolId.");
        }
    }
};
module.exports.IdolSelectedMessage = IdolSelectedMessage;
module.exports.messages[6581] = IdolSelectedMessage;

class IdolSelectErrorMessage extends ProtocolMessage {
    constructor(reason, idolId, activate, party) {
        super(6584);
        this.reason = reason;
        this.idolId = idolId;
        this.activate = activate;
        this.party = party;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.activate);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.party);
        this.buffer.writeByte(_loc2_);
        this.buffer.writeByte(this.reason);
        if (this.idolId < 0) {
            throw new Error("Forbidden value (" + this.idolId + ") on element idolId.");
        }
        this.buffer.writeVarShort(this.idolId);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of IdolSelectErrorMessage.reason.");
        }
        this.idolId = buffer.readVarUhShort();
        if (this.idolId < 0) {
            throw new Error("Forbidden value (" + this.idolId + ") on element of IdolSelectErrorMessage.idolId.");
        };
    }
};
module.exports.IdolSelectErrorMessage = IdolSelectErrorMessage;
module.exports.messages[6584] = IdolSelectErrorMessage;

class IdolSelectRequestMessage extends ProtocolMessage {
    constructor(idolId, activate, party) {
        super(6587);
        this.idolId = idolId;
        this.activate = activate;
        this.party = party;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.activate);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.party);
        this.buffer.writeByte(_loc2_);
        if (this.idolId < 0) {
            throw new Error("Forbidden value (" + this.idolId + ") on element idolId.");
        }
        this.buffer.writeVarShort(this.idolId);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.idolId = buffer.readVarUhShort();
        if (this.idolId < 0) {
            throw new Error("Forbidden value (" + this.idolId + ") on element of IdolSelectRequestMessage.idolId.");
        }
    }
};
module.exports.IdolSelectRequestMessage = IdolSelectRequestMessage;
module.exports.messages[6587] = IdolSelectRequestMessage;

class CharacterCapabilitiesMessage extends ProtocolMessage {
    constructor(guildEmblemSymbolCategories) {
        super(6339);
        this.guildEmblemSymbolCategories = guildEmblemSymbolCategories;
    }

    serialize() {
        if (this.guildEmblemSymbolCategories < 0) {
            throw new Error("Forbidden value (" + this.guildEmblemSymbolCategories + ") on element guildEmblemSymbolCategories.");
        }
        this.buffer.writeVarInt(this.guildEmblemSymbolCategories);
    }

    deserialize(buffer) {
        this.guildEmblemSymbolCategories = buffer.readVarUhInt();
        if (this.guildEmblemSymbolCategories < 0) {
            throw new Error("Forbidden value (" + this.guildEmblemSymbolCategories + ") on element of CharacterCapabilitiesMessage.guildEmblemSymbolCategories.");
        }
    }
};
module.exports.CharacterCapabilitiesMessage = CharacterCapabilitiesMessage;
module.exports.messages[6339] = CharacterCapabilitiesMessage;

class CharacterLoadingCompleteMessage extends ProtocolMessage {
    constructor() {
        super(6471);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.CharacterLoadingCompleteMessage = CharacterLoadingCompleteMessage;
module.exports.messages[6471] = CharacterLoadingCompleteMessage;

class OnConnectionEventMessage extends ProtocolMessage {
    constructor(eventType) {
        super(5726);
        this.eventType = eventType;
    }

    serialize() {
        this.buffer.writeByte(this.eventType);
    }

    deserialize(buffer) {
        this.eventType = buffer.readByte();
        if (this.eventType < 0) {
            throw new Error("Forbidden value (" + this.eventType + ") on element of OnConnectionEventMessage.eventType.");
        }
    }
};
module.exports.OnConnectionEventMessage = OnConnectionEventMessage;
module.exports.messages[5726] = OnConnectionEventMessage;

class ServerExperienceModificatorMessage extends ProtocolMessage {
    constructor(experiencePercent) {
        super(6237);
        this.experiencePercent = experiencePercent;
    }

    serialize() {
        if (this.experiencePercent < 0) {
            throw new Error("Forbidden value (" + this.experiencePercent + ") on element experiencePercent.");
        }
        this.buffer.writeVarShort(this.experiencePercent);
    }

    deserialize(buffer) {
        this.experiencePercent = buffer.readVarUhShort();
        if (this.experiencePercent < 0) {
            throw new Error("Forbidden value (" + this.experiencePercent + ") on element of ServerExperienceModificatorMessage.experiencePercent.");
        }
    }
};
module.exports.ServerExperienceModificatorMessage = ServerExperienceModificatorMessage;
module.exports.messages[6237] = ServerExperienceModificatorMessage;

class SetCharacterRestrictionsMessage extends ProtocolMessage {
    constructor(actorId, restrictions) {
        super(170);
        this.actorId = actorId;
        this.restrictions = restrictions;
    }

    serialize() {
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
        }
        this.buffer.writeDouble(this.actorId);
        this.restrictions.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.actorId = buffer.readDouble();
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.actorId + ") on element of SetCharacterRestrictionsMessage.actorId.");
        }
        this.restrictions = new ActorRestrictionsInformations();
        this.restrictions.deserialize(buffer);
    }
};
module.exports.SetCharacterRestrictionsMessage = SetCharacterRestrictionsMessage;
module.exports.messages[170] = SetCharacterRestrictionsMessage;

class InteractiveElementUpdatedMessage extends ProtocolMessage {
    constructor(interactiveElement) {
        super(5708);
        this.interactiveElement = interactiveElement;
    }

    serialize() {
        this.interactiveElement.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.interactiveElement = new InteractiveElement();
        this.interactiveElement.deserialize(buffer);
    }
};
module.exports.InteractiveElementUpdatedMessage = InteractiveElementUpdatedMessage;
module.exports.messages[5708] = InteractiveElementUpdatedMessage;

class InteractiveMapUpdateMessage extends ProtocolMessage {
    constructor(interactiveElements) {
        super(5002);
        this.interactiveElements = interactiveElements;
    }

    serialize() {
        this.buffer.writeShort(this.interactiveElements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.interactiveElements.length) {
            this.buffer.writeShort((this.interactiveElements[_loc2_]).getTypeId());
            (this.interactiveElements[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(InteractiveElement, _loc4_);
            _loc5_.deserialize(buffer);
            this.interactiveElements.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.InteractiveMapUpdateMessage = InteractiveMapUpdateMessage;
module.exports.messages[5002] = InteractiveMapUpdateMessage;

class InteractiveUsedMessage extends ProtocolMessage {
    constructor(entityId, elemId, skillId, duration, canMove) {
        super(5745);
        this.entityId = entityId;
        this.elemId = elemId;
        this.skillId = skillId;
        this.duration = duration;
        this.canMove = canMove;
    }

    serialize() {
        if (this.entityId < 0 || this.entityId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.entityId + ") on element entityId.");
        }
        this.buffer.writeVarLong(this.entityId);
        if (this.elemId < 0) {
            throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
        }
        this.buffer.writeVarInt(this.elemId);
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarShort(this.skillId);
        if (this.duration < 0) {
            throw new Error("Forbidden value (" + this.duration + ") on element duration.");
        }
        this.buffer.writeVarShort(this.duration);
        this.buffer.writeBoolean(this.canMove);
    }

    deserialize(buffer) {
        this.entityId = buffer.readVarUhLong();
        if (this.entityId < 0 || this.entityId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.entityId + ") on element of InteractiveUsedMessage.entityId.");
        }
        this.elemId = buffer.readVarUhInt();
        if (this.elemId < 0) {
            throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUsedMessage.elemId.");
        };
        this.skillId = buffer.readVarUhShort();
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element of InteractiveUsedMessage.skillId.");
        };
        this.duration = buffer.readVarUhShort();
        if (this.duration < 0) {
            throw new Error("Forbidden value (" + this.duration + ") on element of InteractiveUsedMessage.duration.");
        };
        this.canMove = buffer.readBoolean();
    }
};
module.exports.InteractiveUsedMessage = InteractiveUsedMessage;
module.exports.messages[5745] = InteractiveUsedMessage;

class InteractiveUseEndedMessage extends ProtocolMessage {
    constructor(elemId, skillId) {
        super(6112);
        this.elemId = elemId;
        this.skillId = skillId;
    }

    serialize() {
        if (this.elemId < 0) {
            throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
        }
        this.buffer.writeVarInt(this.elemId);
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarShort(this.skillId);
    }

    deserialize(buffer) {
        this.elemId = buffer.readVarUhInt();
        if (this.elemId < 0) {
            throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUseEndedMessage.elemId.");
        }
        this.skillId = buffer.readVarUhShort();
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element of InteractiveUseEndedMessage.skillId.");
        };
    }
};
module.exports.InteractiveUseEndedMessage = InteractiveUseEndedMessage;
module.exports.messages[6112] = InteractiveUseEndedMessage;

class InteractiveUseErrorMessage extends ProtocolMessage {
    constructor(elemId, skillInstanceUid) {
        super(6384);
        this.elemId = elemId;
        this.skillInstanceUid = skillInstanceUid;
    }

    serialize() {
        if (this.elemId < 0) {
            throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
        }
        this.buffer.writeVarInt(this.elemId);
        if (this.skillInstanceUid < 0) {
            throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
        }
        this.buffer.writeVarInt(this.skillInstanceUid);
    }

    deserialize(buffer) {
        this.elemId = buffer.readVarUhInt();
        if (this.elemId < 0) {
            throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUseErrorMessage.elemId.");
        }
        this.skillInstanceUid = buffer.readVarUhInt();
        if (this.skillInstanceUid < 0) {
            throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveUseErrorMessage.skillInstanceUid.");
        };
    }
};
module.exports.InteractiveUseErrorMessage = InteractiveUseErrorMessage;
module.exports.messages[6384] = InteractiveUseErrorMessage;

class InteractiveUseRequestMessage extends ProtocolMessage {
    constructor(elemId, skillInstanceUid) {
        super(5001);
        this.elemId = elemId;
        this.skillInstanceUid = skillInstanceUid;
    }

    serialize() {
        if (this.elemId < 0) {
            throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
        }
        this.buffer.writeVarInt(this.elemId);
        if (this.skillInstanceUid < 0) {
            throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
        }
        this.buffer.writeVarInt(this.skillInstanceUid);
    }

    deserialize(buffer) {
        this.elemId = buffer.readVarUhInt();
        if (this.elemId < 0) {
            throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUseRequestMessage.elemId.");
        }
        this.skillInstanceUid = buffer.readVarUhInt();
        if (this.skillInstanceUid < 0) {
            throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveUseRequestMessage.skillInstanceUid.");
        };
    }
};
module.exports.InteractiveUseRequestMessage = InteractiveUseRequestMessage;
module.exports.messages[5001] = InteractiveUseRequestMessage;

class TeleportBuddiesAnswerMessage extends ProtocolMessage {
    constructor(accept) {
        super(6294);
        this.accept = accept;
    }

    serialize() {
        this.buffer.writeBoolean(this.accept);
    }

    deserialize(buffer) {
        this.accept = buffer.readBoolean();
    }
};
module.exports.TeleportBuddiesAnswerMessage = TeleportBuddiesAnswerMessage;
module.exports.messages[6294] = TeleportBuddiesAnswerMessage;

class TeleportBuddiesMessage extends ProtocolMessage {
    constructor(dungeonId) {
        super(6289);
        this.dungeonId = dungeonId;
    }

    serialize() {
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
    }

    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportBuddiesMessage.dungeonId.");
        }
    }
};
module.exports.TeleportBuddiesMessage = TeleportBuddiesMessage;
module.exports.messages[6289] = TeleportBuddiesMessage;

class TeleportBuddiesRequestedMessage extends ProtocolMessage {
    constructor(dungeonId, inviterId, invalidBuddiesIds) {
        super(6302);
        this.dungeonId = dungeonId;
        this.inviterId = inviterId;
        this.invalidBuddiesIds = invalidBuddiesIds;
    }

    serialize() {
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        if (this.inviterId < 0 || this.inviterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.inviterId + ") on element inviterId.");
        }
        this.buffer.writeVarLong(this.inviterId);
        this.buffer.writeShort(this.invalidBuddiesIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.invalidBuddiesIds.length) {
            if (this.invalidBuddiesIds[_loc2_] < 0 || this.invalidBuddiesIds[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.invalidBuddiesIds[_loc2_] + ") on element 3 (starting at 1) of invalidBuddiesIds.");
            }
            this.buffer.writeVarLong(this.invalidBuddiesIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = NaN;
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportBuddiesRequestedMessage.dungeonId.");
        }
        this.inviterId = buffer.readVarUhLong();
        if (this.inviterId < 0 || this.inviterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.inviterId + ") on element of TeleportBuddiesRequestedMessage.inviterId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhLong();
            if (_loc4_ < 0 || _loc4_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of invalidBuddiesIds.");
            }
            this.invalidBuddiesIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.TeleportBuddiesRequestedMessage = TeleportBuddiesRequestedMessage;
module.exports.messages[6302] = TeleportBuddiesRequestedMessage;

class TeleportToBuddyAnswerMessage extends ProtocolMessage {
    constructor(dungeonId, buddyId, accept) {
        super(6293);
        this.dungeonId = dungeonId;
        this.buddyId = buddyId;
        this.accept = accept;
    }

    serialize() {
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.buddyId + ") on element buddyId.");
        }
        this.buffer.writeVarLong(this.buddyId);
        this.buffer.writeBoolean(this.accept);
    }

    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyAnswerMessage.dungeonId.");
        }
        this.buddyId = buffer.readVarUhLong();
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyAnswerMessage.buddyId.");
        };
        this.accept = buffer.readBoolean();
    }
};
module.exports.TeleportToBuddyAnswerMessage = TeleportToBuddyAnswerMessage;
module.exports.messages[6293] = TeleportToBuddyAnswerMessage;

class TeleportToBuddyCloseMessage extends ProtocolMessage {
    constructor(dungeonId, buddyId) {
        super(6303);
        this.dungeonId = dungeonId;
        this.buddyId = buddyId;
    }

    serialize() {
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.buddyId + ") on element buddyId.");
        }
        this.buffer.writeVarLong(this.buddyId);
    }

    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyCloseMessage.dungeonId.");
        }
        this.buddyId = buffer.readVarUhLong();
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyCloseMessage.buddyId.");
        };
    }
};
module.exports.TeleportToBuddyCloseMessage = TeleportToBuddyCloseMessage;
module.exports.messages[6303] = TeleportToBuddyCloseMessage;

class TeleportToBuddyOfferMessage extends ProtocolMessage {
    constructor(dungeonId, buddyId, timeLeft) {
        super(6287);
        this.dungeonId = dungeonId;
        this.buddyId = buddyId;
        this.timeLeft = timeLeft;
    }

    serialize() {
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.buddyId + ") on element buddyId.");
        }
        this.buffer.writeVarLong(this.buddyId);
        if (this.timeLeft < 0) {
            throw new Error("Forbidden value (" + this.timeLeft + ") on element timeLeft.");
        }
        this.buffer.writeVarInt(this.timeLeft);
    }

    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyOfferMessage.dungeonId.");
        }
        this.buddyId = buffer.readVarUhLong();
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyOfferMessage.buddyId.");
        };
        this.timeLeft = buffer.readVarUhInt();
        if (this.timeLeft < 0) {
            throw new Error("Forbidden value (" + this.timeLeft + ") on element of TeleportToBuddyOfferMessage.timeLeft.");
        };
    }
};
module.exports.TeleportToBuddyOfferMessage = TeleportToBuddyOfferMessage;
module.exports.messages[6287] = TeleportToBuddyOfferMessage;

class InteractiveUseWithParamRequestMessage extends InteractiveUseRequestMessage {
    constructor(elemId, skillInstanceUid, id) {
        super(elemId, skillInstanceUid);
        this.id = id;
        this.messageId = 6715;
    }

    serialize() {
        super.serialize();
        this.buffer.writeInt(this.id);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.id = buffer.readInt();
    }
};
module.exports.InteractiveUseWithParamRequestMessage = InteractiveUseWithParamRequestMessage;
module.exports.messages[6715] = InteractiveUseWithParamRequestMessage;

class StatedElementUpdatedMessage extends ProtocolMessage {
    constructor(statedElement) {
        super(5709);
        this.statedElement = statedElement;
    }

    serialize() {
        this.statedElement.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.statedElement = new StatedElement();
        this.statedElement.deserialize(buffer);
    }
};
module.exports.StatedElementUpdatedMessage = StatedElementUpdatedMessage;
module.exports.messages[5709] = StatedElementUpdatedMessage;

class StatedMapUpdateMessage extends ProtocolMessage {
    constructor(statedElements) {
        super(5716);
        this.statedElements = statedElements;
    }

    serialize() {
        this.buffer.writeShort(this.statedElements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.statedElements.length) {
            (this.statedElements[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new StatedElement();
            _loc4_.deserialize(buffer);
            this.statedElements.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.StatedMapUpdateMessage = StatedMapUpdateMessage;
module.exports.messages[5716] = StatedMapUpdateMessage;

class TeleportDestinationsListMessage extends ProtocolMessage {
    constructor(teleporterType, mapIds, subAreaIds, costs, destTeleporterType) {
        super(5960);
        this.teleporterType = teleporterType;
        this.mapIds = mapIds;
        this.subAreaIds = subAreaIds;
        this.costs = costs;
        this.destTeleporterType = destTeleporterType;
    }

    serialize() {
        this.buffer.writeByte(this.teleporterType);
        this.buffer.writeShort(this.mapIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mapIds.length) {
            if (this.mapIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.mapIds[_loc2_] + ") on element 2 (starting at 1) of mapIds.");
            }
            this.buffer.writeInt(this.mapIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.subAreaIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.subAreaIds.length) {
            if (this.subAreaIds[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.subAreaIds[_loc3_] + ") on element 3 (starting at 1) of subAreaIds.");
            }
            this.buffer.writeVarShort(this.subAreaIds[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.costs.length);
        var _loc4_ = 0;
        while (_loc4_ < this.costs.length) {
            if (this.costs[_loc4_] < 0) {
                throw new Error("Forbidden value (" + this.costs[_loc4_] + ") on element 4 (starting at 1) of costs.");
            }
            this.buffer.writeVarShort(this.costs[_loc4_]);
            _loc4_++;
        }
        this.buffer.writeShort(this.destTeleporterType.length);
        var _loc5_ = 0;
        while (_loc5_ < this.destTeleporterType.length) {
            this.buffer.writeByte(this.destTeleporterType[_loc5_]);
            _loc5_++;
        }
    }

    deserialize(buffer) {
        var _loc10_ = 0;
        var _loc11_ = 0;
        var _loc12_ = 0;
        var _loc13_ = 0;
        this.teleporterType = buffer.readByte();
        if (this.teleporterType < 0) {
            throw new Error("Forbidden value (" + this.teleporterType + ") on element of TeleportDestinationsListMessage.teleporterType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc10_ = buffer.readInt();
            if (_loc10_ < 0) {
                throw new Error("Forbidden value (" + _loc10_ + ") on elements of mapIds.");
            }
            this.mapIds.push(_loc10_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc11_ = buffer.readVarUhShort();
            if (_loc11_ < 0) {
                throw new Error("Forbidden value (" + _loc11_ + ") on elements of subAreaIds.");
            }
            this.subAreaIds.push(_loc11_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc12_ = buffer.readVarUhShort();
            if (_loc12_ < 0) {
                throw new Error("Forbidden value (" + _loc12_ + ") on elements of costs.");
            }
            this.costs.push(_loc12_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc13_ = buffer.readByte();
            if (_loc13_ < 0) {
                throw new Error("Forbidden value (" + _loc13_ + ") on elements of destTeleporterType.");
            }
            this.destTeleporterType.push(_loc13_);
            _loc9_++;
        }
    }
};
module.exports.TeleportDestinationsListMessage = TeleportDestinationsListMessage;
module.exports.messages[5960] = TeleportDestinationsListMessage;

class TeleportRequestMessage extends ProtocolMessage {
    constructor(teleporterType, mapId) {
        super(5961);
        this.teleporterType = teleporterType;
        this.mapId = mapId;
    }

    serialize() {
        this.buffer.writeByte(this.teleporterType);
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }

    deserialize(buffer) {
        this.teleporterType = buffer.readByte();
        if (this.teleporterType < 0) {
            throw new Error("Forbidden value (" + this.teleporterType + ") on element of TeleportRequestMessage.teleporterType.");
        }
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element of TeleportRequestMessage.mapId.");
        };
    }
};
module.exports.TeleportRequestMessage = TeleportRequestMessage;
module.exports.messages[5961] = TeleportRequestMessage;

class ZaapListMessage extends TeleportDestinationsListMessage {
    constructor(teleporterType, mapIds, subAreaIds, costs, destTeleporterType, spawnMapId) {
        super(teleporterType, mapIds, subAreaIds, costs, destTeleporterType);
        this.spawnMapId = spawnMapId;
        this.messageId = 1604;
    }

    serialize() {
        super.serialize();
        if (this.spawnMapId < 0) {
            throw new Error("Forbidden value (" + this.spawnMapId + ") on element spawnMapId.");
        }
        this.buffer.writeInt(this.spawnMapId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.spawnMapId = buffer.readInt();
        if (this.spawnMapId < 0) {
            throw new Error("Forbidden value (" + this.spawnMapId + ") on element of ZaapListMessage.spawnMapId.");
        }
    }
};
module.exports.ZaapListMessage = ZaapListMessage;
module.exports.messages[1604] = ZaapListMessage;

class ZaapRespawnSaveRequestMessage extends ProtocolMessage {
    constructor() {
        super(6572);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ZaapRespawnSaveRequestMessage = ZaapRespawnSaveRequestMessage;
module.exports.messages[6572] = ZaapRespawnSaveRequestMessage;

class ZaapRespawnUpdatedMessage extends ProtocolMessage {
    constructor(mapId) {
        super(6571);
        this.mapId = mapId;
    }

    serialize() {
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }

    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            throw new Error("Forbidden value (" + this.mapId + ") on element of ZaapRespawnUpdatedMessage.mapId.");
        }
    }
};
module.exports.ZaapRespawnUpdatedMessage = ZaapRespawnUpdatedMessage;
module.exports.messages[6571] = ZaapRespawnUpdatedMessage;

class DecraftResultMessage extends ProtocolMessage {
    constructor(results) {
        super(6569);
        this.results = results;
    }

    serialize() {
        this.buffer.writeShort(this.results.length);
        var _loc2_ = 0;
        while (_loc2_ < this.results.length) {
            (this.results[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DecraftedItemStackInfo();
            _loc4_.deserialize(buffer);
            this.results.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.DecraftResultMessage = DecraftResultMessage;
module.exports.messages[6569] = DecraftResultMessage;

class ExchangeAcceptMessage extends ProtocolMessage {
    constructor() {
        super(5508);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeAcceptMessage = ExchangeAcceptMessage;
module.exports.messages[5508] = ExchangeAcceptMessage;

class ExchangeBidHouseBuyMessage extends ProtocolMessage {
    constructor(uid, qty, price) {
        super(5804);
        this.uid = uid;
        this.qty = qty;
        this.price = price;
    }

    serialize() {
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element uid.");
        }
        this.buffer.writeVarInt(this.uid);
        if (this.qty < 0) {
            throw new Error("Forbidden value (" + this.qty + ") on element qty.");
        }
        this.buffer.writeVarInt(this.qty);
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarLong(this.price);
    }

    deserialize(buffer) {
        this.uid = buffer.readVarUhInt();
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element of ExchangeBidHouseBuyMessage.uid.");
        }
        this.qty = buffer.readVarUhInt();
        if (this.qty < 0) {
            throw new Error("Forbidden value (" + this.qty + ") on element of ExchangeBidHouseBuyMessage.qty.");
        };
        this.price = buffer.readVarUhLong();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element of ExchangeBidHouseBuyMessage.price.");
        };
    }
};
module.exports.ExchangeBidHouseBuyMessage = ExchangeBidHouseBuyMessage;
module.exports.messages[5804] = ExchangeBidHouseBuyMessage;

class ExchangeBidHouseBuyResultMessage extends ProtocolMessage {
    constructor(uid, bought) {
        super(6272);
        this.uid = uid;
        this.bought = bought;
    }

    serialize() {
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element uid.");
        }
        this.buffer.writeVarInt(this.uid);
        this.buffer.writeBoolean(this.bought);
    }

    deserialize(buffer) {
        this.uid = buffer.readVarUhInt();
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element of ExchangeBidHouseBuyResultMessage.uid.");
        }
        this.bought = buffer.readBoolean();
    }
};
module.exports.ExchangeBidHouseBuyResultMessage = ExchangeBidHouseBuyResultMessage;
module.exports.messages[6272] = ExchangeBidHouseBuyResultMessage;

class ExchangeBidHouseGenericItemAddedMessage extends ProtocolMessage {
    constructor(objGenericId) {
        super(5947);
        this.objGenericId = objGenericId;
    }

    serialize() {
        if (this.objGenericId < 0) {
            throw new Error("Forbidden value (" + this.objGenericId + ") on element objGenericId.");
        }
        this.buffer.writeVarShort(this.objGenericId);
    }

    deserialize(buffer) {
        this.objGenericId = buffer.readVarUhShort();
        if (this.objGenericId < 0) {
            throw new Error("Forbidden value (" + this.objGenericId + ") on element of ExchangeBidHouseGenericItemAddedMessage.objGenericId.");
        }
    }
};
module.exports.ExchangeBidHouseGenericItemAddedMessage = ExchangeBidHouseGenericItemAddedMessage;
module.exports.messages[5947] = ExchangeBidHouseGenericItemAddedMessage;

class ExchangeBidHouseGenericItemRemovedMessage extends ProtocolMessage {
    constructor(objGenericId) {
        super(5948);
        this.objGenericId = objGenericId;
    }

    serialize() {
        if (this.objGenericId < 0) {
            throw new Error("Forbidden value (" + this.objGenericId + ") on element objGenericId.");
        }
        this.buffer.writeVarShort(this.objGenericId);
    }

    deserialize(buffer) {
        this.objGenericId = buffer.readVarUhShort();
        if (this.objGenericId < 0) {
            throw new Error("Forbidden value (" + this.objGenericId + ") on element of ExchangeBidHouseGenericItemRemovedMessage.objGenericId.");
        }
    }
};
module.exports.ExchangeBidHouseGenericItemRemovedMessage = ExchangeBidHouseGenericItemRemovedMessage;
module.exports.messages[5948] = ExchangeBidHouseGenericItemRemovedMessage;

class ExchangeBidHouseInListAddedMessage extends ProtocolMessage {
    constructor(itemUID, objGenericId, effects, prices) {
        super(5949);
        this.itemUID = itemUID;
        this.objGenericId = objGenericId;
        this.effects = effects;
        this.prices = prices;
    }

    serialize() {
        this.buffer.writeInt(this.itemUID);
        this.buffer.writeInt(this.objGenericId);
        this.buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.buffer.writeShort((this.effects[_loc2_]).getTypeId());
            (this.effects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.prices.length);
        var _loc3_ = 0;
        while (_loc3_ < this.prices.length) {
            if (this.prices[_loc3_] < 0 || this.prices[_loc3_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.prices[_loc3_] + ") on element 4 (starting at 1) of prices.");
            }
            this.buffer.writeVarLong(this.prices[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = NaN;
        this.itemUID = buffer.readInt();
        this.objGenericId = buffer.readInt();;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc6_);
            _loc7_.deserialize(buffer);
            this.effects.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readVarUhLong();
            if (_loc8_ < 0 || _loc8_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc8_ + ") on elements of prices.");
            }
            this.prices.push(_loc8_);
            _loc5_++;
        }
    }
};
module.exports.ExchangeBidHouseInListAddedMessage = ExchangeBidHouseInListAddedMessage;
module.exports.messages[5949] = ExchangeBidHouseInListAddedMessage;

class ExchangeBidHouseInListRemovedMessage extends ProtocolMessage {
    constructor(itemUID) {
        super(5950);
        this.itemUID = itemUID;
    }

    serialize() {
        this.buffer.writeInt(this.itemUID);
    }

    deserialize(buffer) {
        this.itemUID = buffer.readInt();
    }
};
module.exports.ExchangeBidHouseInListRemovedMessage = ExchangeBidHouseInListRemovedMessage;
module.exports.messages[5950] = ExchangeBidHouseInListRemovedMessage;

class ExchangeBidHouseInListUpdatedMessage extends ExchangeBidHouseInListAddedMessage {
    constructor(itemUID, objGenericId, effects, prices) {
        super(itemUID, objGenericId, effects, prices);
        this.messageId = 6337;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.ExchangeBidHouseInListUpdatedMessage = ExchangeBidHouseInListUpdatedMessage;
module.exports.messages[6337] = ExchangeBidHouseInListUpdatedMessage;

class ExchangeBidHouseItemAddOkMessage extends ProtocolMessage {
    constructor(itemInfo) {
        super(5945);
        this.itemInfo = itemInfo;
    }

    serialize() {
        this.itemInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.itemInfo = new ObjectItemToSellInBid();
        this.itemInfo.deserialize(buffer);
    }
};
module.exports.ExchangeBidHouseItemAddOkMessage = ExchangeBidHouseItemAddOkMessage;
module.exports.messages[5945] = ExchangeBidHouseItemAddOkMessage;

class ExchangeBidHouseItemRemoveOkMessage extends ProtocolMessage {
    constructor(sellerId) {
        super(5946);
        this.sellerId = sellerId;
    }

    serialize() {
        this.buffer.writeInt(this.sellerId);
    }

    deserialize(buffer) {
        this.sellerId = buffer.readInt();
    }
};
module.exports.ExchangeBidHouseItemRemoveOkMessage = ExchangeBidHouseItemRemoveOkMessage;
module.exports.messages[5946] = ExchangeBidHouseItemRemoveOkMessage;

class ExchangeBidHouseListMessage extends ProtocolMessage {
    constructor(id) {
        super(5807);
        this.id = id;
    }

    serialize() {
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            throw new Error("Forbidden value (" + this.id + ") on element of ExchangeBidHouseListMessage.id.");
        }
    }
};
module.exports.ExchangeBidHouseListMessage = ExchangeBidHouseListMessage;
module.exports.messages[5807] = ExchangeBidHouseListMessage;

class ExchangeBidHousePriceMessage extends ProtocolMessage {
    constructor(genId) {
        super(5805);
        this.genId = genId;
    }

    serialize() {
        if (this.genId < 0) {
            throw new Error("Forbidden value (" + this.genId + ") on element genId.");
        }
        this.buffer.writeVarShort(this.genId);
    }

    deserialize(buffer) {
        this.genId = buffer.readVarUhShort();
        if (this.genId < 0) {
            throw new Error("Forbidden value (" + this.genId + ") on element of ExchangeBidHousePriceMessage.genId.");
        }
    }
};
module.exports.ExchangeBidHousePriceMessage = ExchangeBidHousePriceMessage;
module.exports.messages[5805] = ExchangeBidHousePriceMessage;

class ExchangeBidHouseSearchMessage extends ProtocolMessage {
    constructor(type, genId) {
        super(5806);
        this.type = type;
        this.genId = genId;
    }

    serialize() {
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element type.");
        }
        this.buffer.writeVarInt(this.type);
        if (this.genId < 0) {
            throw new Error("Forbidden value (" + this.genId + ") on element genId.");
        }
        this.buffer.writeVarShort(this.genId);
    }

    deserialize(buffer) {
        this.type = buffer.readVarUhInt();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of ExchangeBidHouseSearchMessage.type.");
        }
        this.genId = buffer.readVarUhShort();
        if (this.genId < 0) {
            throw new Error("Forbidden value (" + this.genId + ") on element of ExchangeBidHouseSearchMessage.genId.");
        };
    }
};
module.exports.ExchangeBidHouseSearchMessage = ExchangeBidHouseSearchMessage;
module.exports.messages[5806] = ExchangeBidHouseSearchMessage;

class ExchangeBidHouseTypeMessage extends ProtocolMessage {
    constructor(type) {
        super(5803);
        this.type = type;
    }

    serialize() {
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element type.");
        }
        this.buffer.writeVarInt(this.type);
    }

    deserialize(buffer) {
        this.type = buffer.readVarUhInt();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of ExchangeBidHouseTypeMessage.type.");
        }
    }
};
module.exports.ExchangeBidHouseTypeMessage = ExchangeBidHouseTypeMessage;
module.exports.messages[5803] = ExchangeBidHouseTypeMessage;

class ExchangeBidHouseUnsoldItemsMessage extends ProtocolMessage {
    constructor(items) {
        super(6612);
        this.items = items;
    }

    serialize() {
        this.buffer.writeShort(this.items.length);
        var _loc2_ = 0;
        while (_loc2_ < this.items.length) {
            (this.items[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemGenericQuantity();
            _loc4_.deserialize(buffer);
            this.items.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeBidHouseUnsoldItemsMessage = ExchangeBidHouseUnsoldItemsMessage;
module.exports.messages[6612] = ExchangeBidHouseUnsoldItemsMessage;

class ExchangeBidPriceMessage extends ProtocolMessage {
    constructor(genericId, averagePrice) {
        super(5755);
        this.genericId = genericId;
        this.averagePrice = averagePrice;
    }

    serialize() {
        if (this.genericId < 0) {
            throw new Error("Forbidden value (" + this.genericId + ") on element genericId.");
        }
        this.buffer.writeVarShort(this.genericId);
        if (this.averagePrice < -9007199254740990 || this.averagePrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.averagePrice + ") on element averagePrice.");
        }
        this.buffer.writeVarLong(this.averagePrice);
    }

    deserialize(buffer) {
        this.genericId = buffer.readVarUhShort();
        if (this.genericId < 0) {
            throw new Error("Forbidden value (" + this.genericId + ") on element of ExchangeBidPriceMessage.genericId.");
        }
        this.averagePrice = buffer.readVarLong();
        if (this.averagePrice < -9007199254740990 || this.averagePrice > 9007199254740990) {
            throw new Error("Forbidden value (" + this.averagePrice + ") on element of ExchangeBidPriceMessage.averagePrice.");
        };
    }
};
module.exports.ExchangeBidPriceMessage = ExchangeBidPriceMessage;
module.exports.messages[5755] = ExchangeBidPriceMessage;

class ExchangeBidPriceForSellerMessage extends ExchangeBidPriceMessage {
    constructor(genericId, averagePrice, allIdentical, minimalPrices) {
        super(genericId, averagePrice);
        this.allIdentical = allIdentical;
        this.minimalPrices = minimalPrices;
        this.messageId = 6464;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.allIdentical);
        this.buffer.writeShort(this.minimalPrices.length);
        var _loc2_ = 0;
        while (_loc2_ < this.minimalPrices.length) {
            if (this.minimalPrices[_loc2_] < 0 || this.minimalPrices[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.minimalPrices[_loc2_] + ") on element 2 (starting at 1) of minimalPrices.");
            }
            this.buffer.writeVarLong(this.minimalPrices[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = NaN;
        super.deserialize(buffer);
        this.allIdentical = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhLong();
            if (_loc4_ < 0 || _loc4_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of minimalPrices.");
            }
            this.minimalPrices.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeBidPriceForSellerMessage = ExchangeBidPriceForSellerMessage;
module.exports.messages[6464] = ExchangeBidPriceForSellerMessage;

class ExchangeBidSearchOkMessage extends ProtocolMessage {
    constructor() {
        super(5802);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeBidSearchOkMessage = ExchangeBidSearchOkMessage;
module.exports.messages[5802] = ExchangeBidSearchOkMessage;

class ExchangeBuyMessage extends ProtocolMessage {
    constructor(objectToBuyId, quantity) {
        super(5774);
        this.objectToBuyId = objectToBuyId;
        this.quantity = quantity;
    }

    serialize() {
        if (this.objectToBuyId < 0) {
            throw new Error("Forbidden value (" + this.objectToBuyId + ") on element objectToBuyId.");
        }
        this.buffer.writeVarInt(this.objectToBuyId);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        this.objectToBuyId = buffer.readVarUhInt();
        if (this.objectToBuyId < 0) {
            throw new Error("Forbidden value (" + this.objectToBuyId + ") on element of ExchangeBuyMessage.objectToBuyId.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeBuyMessage.quantity.");
        };
    }
};
module.exports.ExchangeBuyMessage = ExchangeBuyMessage;
module.exports.messages[5774] = ExchangeBuyMessage;

class ExchangeBuyOkMessage extends ProtocolMessage {
    constructor() {
        super(5759);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeBuyOkMessage = ExchangeBuyOkMessage;
module.exports.messages[5759] = ExchangeBuyOkMessage;

class ExchangeCraftCountModifiedMessage extends ProtocolMessage {
    constructor(count) {
        super(6595);
        this.count = count;
    }

    serialize() {
        this.buffer.writeVarInt(this.count);
    }

    deserialize(buffer) {
        this.count = buffer.readVarInt();
    }
};
module.exports.ExchangeCraftCountModifiedMessage = ExchangeCraftCountModifiedMessage;
module.exports.messages[6595] = ExchangeCraftCountModifiedMessage;

class ExchangeCraftCountRequestMessage extends ProtocolMessage {
    constructor(count) {
        super(6597);
        this.count = count;
    }

    serialize() {
        this.buffer.writeVarInt(this.count);
    }

    deserialize(buffer) {
        this.count = buffer.readVarInt();
    }
};
module.exports.ExchangeCraftCountRequestMessage = ExchangeCraftCountRequestMessage;
module.exports.messages[6597] = ExchangeCraftCountRequestMessage;

class ExchangeCrafterJobLevelupMessage extends ProtocolMessage {
    constructor(crafterJobLevel) {
        super(6598);
        this.crafterJobLevel = crafterJobLevel;
    }

    serialize() {
        if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
            throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element crafterJobLevel.");
        }
        this.buffer.writeByte(this.crafterJobLevel);
    }

    deserialize(buffer) {
        this.crafterJobLevel = buffer.readUnsignedByte();
        if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
            throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element of ExchangeCrafterJobLevelupMessage.crafterJobLevel.");
        }
    }
};
module.exports.ExchangeCrafterJobLevelupMessage = ExchangeCrafterJobLevelupMessage;
module.exports.messages[6598] = ExchangeCrafterJobLevelupMessage;

class ExchangeCraftResultMessage extends ProtocolMessage {
    constructor(craftResult) {
        super(5790);
        this.craftResult = craftResult;
    }

    serialize() {
        this.buffer.writeByte(this.craftResult);
    }

    deserialize(buffer) {
        this.craftResult = buffer.readByte();
        if (this.craftResult < 0) {
            throw new Error("Forbidden value (" + this.craftResult + ") on element of ExchangeCraftResultMessage.craftResult.");
        }
    }
};
module.exports.ExchangeCraftResultMessage = ExchangeCraftResultMessage;
module.exports.messages[5790] = ExchangeCraftResultMessage;

class ExchangeCraftResultWithObjectIdMessage extends ExchangeCraftResultMessage {
    constructor(craftResult, objectGenericId) {
        super(craftResult);
        this.objectGenericId = objectGenericId;
        this.messageId = 6000;
    }

    serialize() {
        super.serialize();
        if (this.objectGenericId < 0) {
            throw new Error("Forbidden value (" + this.objectGenericId + ") on element objectGenericId.");
        }
        this.buffer.writeVarShort(this.objectGenericId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectGenericId = buffer.readVarUhShort();
        if (this.objectGenericId < 0) {
            throw new Error("Forbidden value (" + this.objectGenericId + ") on element of ExchangeCraftResultWithObjectIdMessage.objectGenericId.");
        }
    }
};
module.exports.ExchangeCraftResultWithObjectIdMessage = ExchangeCraftResultWithObjectIdMessage;
module.exports.messages[6000] = ExchangeCraftResultWithObjectIdMessage;

class ExchangeCraftInformationObjectMessage extends ExchangeCraftResultWithObjectIdMessage {
    constructor(craftResult, objectGenericId, playerId) {
        super(craftResult, objectGenericId);
        this.playerId = playerId;
        this.messageId = 5794;
    }

    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of ExchangeCraftInformationObjectMessage.playerId.");
        }
    }
};
module.exports.ExchangeCraftInformationObjectMessage = ExchangeCraftInformationObjectMessage;
module.exports.messages[5794] = ExchangeCraftInformationObjectMessage;

class ExchangeCraftPaymentModificationRequestMessage extends ProtocolMessage {
    constructor(quantity) {
        super(6579);
        this.quantity = quantity;
    }

    serialize() {
        if (this.quantity < 0 || this.quantity > 9007199254740990) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarLong(this.quantity);
    }

    deserialize(buffer) {
        this.quantity = buffer.readVarUhLong();
        if (this.quantity < 0 || this.quantity > 9007199254740990) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeCraftPaymentModificationRequestMessage.quantity.");
        }
    }
};
module.exports.ExchangeCraftPaymentModificationRequestMessage = ExchangeCraftPaymentModificationRequestMessage;
module.exports.messages[6579] = ExchangeCraftPaymentModificationRequestMessage;

class ExchangeCraftPaymentModifiedMessage extends ProtocolMessage {
    constructor(goldSum) {
        super(6578);
        this.goldSum = goldSum;
    }

    serialize() {
        if (this.goldSum < 0 || this.goldSum > 9007199254740990) {
            throw new Error("Forbidden value (" + this.goldSum + ") on element goldSum.");
        }
        this.buffer.writeVarLong(this.goldSum);
    }

    deserialize(buffer) {
        this.goldSum = buffer.readVarUhLong();
        if (this.goldSum < 0 || this.goldSum > 9007199254740990) {
            throw new Error("Forbidden value (" + this.goldSum + ") on element of ExchangeCraftPaymentModifiedMessage.goldSum.");
        }
    }
};
module.exports.ExchangeCraftPaymentModifiedMessage = ExchangeCraftPaymentModifiedMessage;
module.exports.messages[6578] = ExchangeCraftPaymentModifiedMessage;

class ExchangeCraftResultWithObjectDescMessage extends ExchangeCraftResultMessage {
    constructor(craftResult, objectInfo) {
        super(craftResult);
        this.objectInfo = objectInfo;
        this.messageId = 5999;
    }

    serialize() {
        super.serialize();
        this.objectInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectInfo = new ObjectItemNotInContainer();
        this.objectInfo.deserialize(buffer);
    }
};
module.exports.ExchangeCraftResultWithObjectDescMessage = ExchangeCraftResultWithObjectDescMessage;
module.exports.messages[5999] = ExchangeCraftResultWithObjectDescMessage;

class ExchangeCraftResultMagicWithObjectDescMessage extends ExchangeCraftResultWithObjectDescMessage {
    constructor(craftResult, objectInfo, magicPoolStatus) {
        super(craftResult, objectInfo);
        this.magicPoolStatus = magicPoolStatus;
        this.messageId = 6188;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.magicPoolStatus);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.magicPoolStatus = buffer.readByte();
    }
};
module.exports.ExchangeCraftResultMagicWithObjectDescMessage = ExchangeCraftResultMagicWithObjectDescMessage;
module.exports.messages[6188] = ExchangeCraftResultMagicWithObjectDescMessage;

class ExchangeErrorMessage extends ProtocolMessage {
    constructor(errorType) {
        super(5513);
        this.errorType = errorType;
    }

    serialize() {
        this.buffer.writeByte(this.errorType);
    }

    deserialize(buffer) {
        this.errorType = buffer.readByte();
    }
};
module.exports.ExchangeErrorMessage = ExchangeErrorMessage;
module.exports.messages[5513] = ExchangeErrorMessage;

class ExchangeGuildTaxCollectorGetMessage extends ProtocolMessage {
    constructor(collectorName, worldX, worldY, mapId, subAreaId, userName, callerId, callerName, experience, pods, objectsInfos) {
        super(5762);
        this.collectorName = collectorName;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.userName = userName;
        this.callerId = callerId;
        this.callerName = callerName;
        this.experience = experience;
        this.pods = pods;
        this.objectsInfos = objectsInfos;
    }

    serialize() {
        this.buffer.writeUTF(this.collectorName);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeUTF(this.userName);
        if (this.callerId < 0 || this.callerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.callerId + ") on element callerId.");
        }
        this.buffer.writeVarLong(this.callerId);
        this.buffer.writeUTF(this.callerName);
        if (this.experience < -9007199254740990 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element experience.");
        }
        this.buffer.writeDouble(this.experience);
        if (this.pods < 0) {
            throw new Error("Forbidden value (" + this.pods + ") on element pods.");
        }
        this.buffer.writeVarShort(this.pods);
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            (this.objectsInfos[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.collectorName = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeGuildTaxCollectorGetMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeGuildTaxCollectorGetMessage.worldY.");
        };
        this.mapId = buffer.readInt();;
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of ExchangeGuildTaxCollectorGetMessage.subAreaId.");
        };
        this.userName = buffer.readUTF();;
        this.callerId = buffer.readVarUhLong();
        if (this.callerId < 0 || this.callerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.callerId + ") on element of ExchangeGuildTaxCollectorGetMessage.callerId.");
        };
        this.callerName = buffer.readUTF();;
        this.experience = buffer.readDouble();
        if (this.experience < -9007199254740990 || this.experience > 9007199254740990) {
            throw new Error("Forbidden value (" + this.experience + ") on element of ExchangeGuildTaxCollectorGetMessage.experience.");
        };
        this.pods = buffer.readVarUhShort();
        if (this.pods < 0) {
            throw new Error("Forbidden value (" + this.pods + ") on element of ExchangeGuildTaxCollectorGetMessage.pods.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemGenericQuantity();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeGuildTaxCollectorGetMessage = ExchangeGuildTaxCollectorGetMessage;
module.exports.messages[5762] = ExchangeGuildTaxCollectorGetMessage;

class ExchangeHandleMountsStableMessage extends ProtocolMessage {
    constructor(actionType, ridesId) {
        super(6562);
        this.actionType = actionType;
        this.ridesId = ridesId;
    }

    serialize() {
        this.buffer.writeByte(this.actionType);
        this.buffer.writeShort(this.ridesId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ridesId.length) {
            if (this.ridesId[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.ridesId[_loc2_] + ") on element 2 (starting at 1) of ridesId.");
            }
            this.buffer.writeVarInt(this.ridesId[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.actionType = buffer.readByte();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of ridesId.");
            }
            this.ridesId.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeHandleMountsStableMessage = ExchangeHandleMountsStableMessage;
module.exports.messages[6562] = ExchangeHandleMountsStableMessage;

class ExchangeIsReadyMessage extends ProtocolMessage {
    constructor(id, ready) {
        super(5509);
        this.id = id;
        this.ready = ready;
    }

    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        this.buffer.writeBoolean(this.ready);
    }

    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of ExchangeIsReadyMessage.id.");
        }
        this.ready = buffer.readBoolean();
    }
};
module.exports.ExchangeIsReadyMessage = ExchangeIsReadyMessage;
module.exports.messages[5509] = ExchangeIsReadyMessage;

class ExchangeItemAutoCraftStopedMessage extends ProtocolMessage {
    constructor(reason) {
        super(5810);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
    }
};
module.exports.ExchangeItemAutoCraftStopedMessage = ExchangeItemAutoCraftStopedMessage;
module.exports.messages[5810] = ExchangeItemAutoCraftStopedMessage;

class ExchangeLeaveMessage extends LeaveDialogMessage {
    constructor(dialogType, success) {
        super(dialogType);
        this.success = success;
        this.messageId = 5628;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.success);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.success = buffer.readBoolean();
    }
};
module.exports.ExchangeLeaveMessage = ExchangeLeaveMessage;
module.exports.messages[5628] = ExchangeLeaveMessage;

class ExchangeMountFreeFromPaddockMessage extends ProtocolMessage {
    constructor(name, worldX, worldY, liberator) {
        super(6055);
        this.name = name;
        this.worldX = worldX;
        this.worldY = worldY;
        this.liberator = liberator;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeUTF(this.liberator);
    }

    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeMountFreeFromPaddockMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeMountFreeFromPaddockMessage.worldY.");
        };
        this.liberator = buffer.readUTF();;
    }
};
module.exports.ExchangeMountFreeFromPaddockMessage = ExchangeMountFreeFromPaddockMessage;
module.exports.messages[6055] = ExchangeMountFreeFromPaddockMessage;

class ExchangeMountsPaddockAddMessage extends ProtocolMessage {
    constructor(mountDescription) {
        super(6561);
        this.mountDescription = mountDescription;
    }

    serialize() {
        this.buffer.writeShort(this.mountDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mountDescription.length) {
            (this.mountDescription[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
            _loc4_.deserialize(buffer);
            this.mountDescription.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeMountsPaddockAddMessage = ExchangeMountsPaddockAddMessage;
module.exports.messages[6561] = ExchangeMountsPaddockAddMessage;

class ExchangeMountsPaddockRemoveMessage extends ProtocolMessage {
    constructor(mountsId) {
        super(6559);
        this.mountsId = mountsId;
    }

    serialize() {
        this.buffer.writeShort(this.mountsId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mountsId.length) {
            this.buffer.writeVarInt(this.mountsId[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarInt();
            this.mountsId.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeMountsPaddockRemoveMessage = ExchangeMountsPaddockRemoveMessage;
module.exports.messages[6559] = ExchangeMountsPaddockRemoveMessage;

class ExchangeMountsStableAddMessage extends ProtocolMessage {
    constructor(mountDescription) {
        super(6555);
        this.mountDescription = mountDescription;
    }

    serialize() {
        this.buffer.writeShort(this.mountDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mountDescription.length) {
            (this.mountDescription[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
            _loc4_.deserialize(buffer);
            this.mountDescription.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeMountsStableAddMessage = ExchangeMountsStableAddMessage;
module.exports.messages[6555] = ExchangeMountsStableAddMessage;

class ExchangeMountsStableBornAddMessage extends ExchangeMountsStableAddMessage {
    constructor(mountDescription) {
        super(mountDescription);
        this.messageId = 6557;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.ExchangeMountsStableBornAddMessage = ExchangeMountsStableBornAddMessage;
module.exports.messages[6557] = ExchangeMountsStableBornAddMessage;

class ExchangeMountsStableRemoveMessage extends ProtocolMessage {
    constructor(mountsId) {
        super(6556);
        this.mountsId = mountsId;
    }

    serialize() {
        this.buffer.writeShort(this.mountsId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mountsId.length) {
            this.buffer.writeVarInt(this.mountsId[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarInt();
            this.mountsId.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeMountsStableRemoveMessage = ExchangeMountsStableRemoveMessage;
module.exports.messages[6556] = ExchangeMountsStableRemoveMessage;

class ExchangeMountStableErrorMessage extends ProtocolMessage {
    constructor() {
        super(5981);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeMountStableErrorMessage = ExchangeMountStableErrorMessage;
module.exports.messages[5981] = ExchangeMountStableErrorMessage;

class ExchangeMountsTakenFromPaddockMessage extends ProtocolMessage {
    constructor(name, worldX, worldY, ownername) {
        super(6554);
        this.name = name;
        this.worldX = worldX;
        this.worldY = worldY;
        this.ownername = ownername;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeUTF(this.ownername);
    }

    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeMountsTakenFromPaddockMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeMountsTakenFromPaddockMessage.worldY.");
        };
        this.ownername = buffer.readUTF();;
    }
};
module.exports.ExchangeMountsTakenFromPaddockMessage = ExchangeMountsTakenFromPaddockMessage;
module.exports.messages[6554] = ExchangeMountsTakenFromPaddockMessage;

class ExchangeMountSterilizeFromPaddockMessage extends ProtocolMessage {
    constructor(name, worldX, worldY, sterilizator) {
        super(6056);
        this.name = name;
        this.worldX = worldX;
        this.worldY = worldY;
        this.sterilizator = sterilizator;
    }

    serialize() {
        this.buffer.writeUTF(this.name);
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeUTF(this.sterilizator);
    }

    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeMountSterilizeFromPaddockMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeMountSterilizeFromPaddockMessage.worldY.");
        };
        this.sterilizator = buffer.readUTF();;
    }
};
module.exports.ExchangeMountSterilizeFromPaddockMessage = ExchangeMountSterilizeFromPaddockMessage;
module.exports.messages[6056] = ExchangeMountSterilizeFromPaddockMessage;

class ExchangeObjectMessage extends ProtocolMessage {
    constructor(remote) {
        super(5515);
        this.remote = remote;
    }

    serialize() {
        this.buffer.writeBoolean(this.remote);
    }

    deserialize(buffer) {
        this.remote = buffer.readBoolean();
    }
};
module.exports.ExchangeObjectMessage = ExchangeObjectMessage;
module.exports.messages[5515] = ExchangeObjectMessage;

class ExchangeObjectAddedMessage extends ExchangeObjectMessage {
    constructor(remote, object) {
        super(remote);
        this.object = object;
        this.messageId = 5516;
    }

    serialize() {
        super.serialize();
        this.object.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
};
module.exports.ExchangeObjectAddedMessage = ExchangeObjectAddedMessage;
module.exports.messages[5516] = ExchangeObjectAddedMessage;

class ExchangeObjectMoveMessage extends ProtocolMessage {
    constructor(objectUID, quantity) {
        super(5518);
        this.objectUID = objectUID;
        this.quantity = quantity;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectMoveMessage.objectUID.");
        }
        this.quantity = buffer.readVarInt();
    }
};
module.exports.ExchangeObjectMoveMessage = ExchangeObjectMoveMessage;
module.exports.messages[5518] = ExchangeObjectMoveMessage;

class ExchangeObjectMovePricedMessage extends ExchangeObjectMoveMessage {
    constructor(objectUID, quantity, price) {
        super(objectUID, quantity);
        this.price = price;
        this.messageId = 5514;
    }

    serialize() {
        super.serialize();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarLong(this.price);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.price = buffer.readVarUhLong();
        if (this.price < 0 || this.price > 9007199254740990) {
            throw new Error("Forbidden value (" + this.price + ") on element of ExchangeObjectMovePricedMessage.price.");
        }
    }
};
module.exports.ExchangeObjectMovePricedMessage = ExchangeObjectMovePricedMessage;
module.exports.messages[5514] = ExchangeObjectMovePricedMessage;

class ExchangeObjectModifyPricedMessage extends ExchangeObjectMovePricedMessage {
    constructor(objectUID, quantity, price) {
        super(objectUID, quantity, price);
        this.messageId = 6238;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.ExchangeObjectModifyPricedMessage = ExchangeObjectModifyPricedMessage;
module.exports.messages[6238] = ExchangeObjectModifyPricedMessage;

class ExchangeObjectMoveKamaMessage extends ProtocolMessage {
    constructor(quantity) {
        super(5520);
        this.quantity = quantity;
    }

    serialize() {
        if (this.quantity < -9007199254740990 || this.quantity > 9007199254740990) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarLong(this.quantity);
    }

    deserialize(buffer) {
        this.quantity = buffer.readVarLong();
        if (this.quantity < -9007199254740990 || this.quantity > 9007199254740990) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeObjectMoveKamaMessage.quantity.");
        }
    }
};
module.exports.ExchangeObjectMoveKamaMessage = ExchangeObjectMoveKamaMessage;
module.exports.messages[5520] = ExchangeObjectMoveKamaMessage;

class ExchangeObjectsAddedMessage extends ExchangeObjectMessage {
    constructor(remote, object) {
        super(remote);
        this.object = object;
        this.messageId = 6535;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.object.length);
        var _loc2_ = 0;
        while (_loc2_ < this.object.length) {
            (this.object[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.object.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeObjectsAddedMessage = ExchangeObjectsAddedMessage;
module.exports.messages[6535] = ExchangeObjectsAddedMessage;

class ExchangeObjectTransfertAllFromInvMessage extends ProtocolMessage {
    constructor() {
        super(6184);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeObjectTransfertAllFromInvMessage = ExchangeObjectTransfertAllFromInvMessage;
module.exports.messages[6184] = ExchangeObjectTransfertAllFromInvMessage;

class ExchangeObjectTransfertAllToInvMessage extends ProtocolMessage {
    constructor() {
        super(6032);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeObjectTransfertAllToInvMessage = ExchangeObjectTransfertAllToInvMessage;
module.exports.messages[6032] = ExchangeObjectTransfertAllToInvMessage;

class ExchangeObjectTransfertExistingFromInvMessage extends ProtocolMessage {
    constructor() {
        super(6325);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeObjectTransfertExistingFromInvMessage = ExchangeObjectTransfertExistingFromInvMessage;
module.exports.messages[6325] = ExchangeObjectTransfertExistingFromInvMessage;

class ExchangeObjectTransfertExistingToInvMessage extends ProtocolMessage {
    constructor() {
        super(6326);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeObjectTransfertExistingToInvMessage = ExchangeObjectTransfertExistingToInvMessage;
module.exports.messages[6326] = ExchangeObjectTransfertExistingToInvMessage;

class ExchangeObjectTransfertListFromInvMessage extends ProtocolMessage {
    constructor(ids) {
        super(6183);
        this.ids = ids;
    }

    serialize() {
        this.buffer.writeShort(this.ids.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ids.length) {
            if (this.ids[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.ids[_loc2_] + ") on element 1 (starting at 1) of ids.");
            }
            this.buffer.writeVarInt(this.ids[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of ids.");
            }
            this.ids.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeObjectTransfertListFromInvMessage = ExchangeObjectTransfertListFromInvMessage;
module.exports.messages[6183] = ExchangeObjectTransfertListFromInvMessage;

class ExchangeObjectTransfertListToInvMessage extends ProtocolMessage {
    constructor(ids) {
        super(6039);
        this.ids = ids;
    }

    serialize() {
        this.buffer.writeShort(this.ids.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ids.length) {
            if (this.ids[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.ids[_loc2_] + ") on element 1 (starting at 1) of ids.");
            }
            this.buffer.writeVarInt(this.ids[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of ids.");
            }
            this.ids.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeObjectTransfertListToInvMessage = ExchangeObjectTransfertListToInvMessage;
module.exports.messages[6039] = ExchangeObjectTransfertListToInvMessage;

class ExchangeObjectTransfertListWithQuantityToInvMessage extends ProtocolMessage {
    constructor(ids, qtys) {
        super(6470);
        this.ids = ids;
        this.qtys = qtys;
    }

    serialize() {
        this.buffer.writeShort(this.ids.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ids.length) {
            if (this.ids[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.ids[_loc2_] + ") on element 1 (starting at 1) of ids.");
            }
            this.buffer.writeVarInt(this.ids[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.qtys.length);
        var _loc3_ = 0;
        while (_loc3_ < this.qtys.length) {
            if (this.qtys[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.qtys[_loc3_] + ") on element 2 (starting at 1) of qtys.");
            }
            this.buffer.writeVarInt(this.qtys[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhInt();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of ids.");
            }
            this.ids.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhInt();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of qtys.");
            }
            this.qtys.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.ExchangeObjectTransfertListWithQuantityToInvMessage = ExchangeObjectTransfertListWithQuantityToInvMessage;
module.exports.messages[6470] = ExchangeObjectTransfertListWithQuantityToInvMessage;

class ExchangeObjectUseInWorkshopMessage extends ProtocolMessage {
    constructor(objectUID, quantity) {
        super(6004);
        this.objectUID = objectUID;
        this.quantity = quantity;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectUseInWorkshopMessage.objectUID.");
        }
        this.quantity = buffer.readVarInt();
    }
};
module.exports.ExchangeObjectUseInWorkshopMessage = ExchangeObjectUseInWorkshopMessage;
module.exports.messages[6004] = ExchangeObjectUseInWorkshopMessage;

class ExchangeOfflineSoldItemsMessage extends ProtocolMessage {
    constructor(bidHouseItems, merchantItems) {
        super(6613);
        this.bidHouseItems = bidHouseItems;
        this.merchantItems = merchantItems;
    }

    serialize() {
        this.buffer.writeShort(this.bidHouseItems.length);
        var _loc2_ = 0;
        while (_loc2_ < this.bidHouseItems.length) {
            (this.bidHouseItems[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.merchantItems.length);
        var _loc3_ = 0;
        while (_loc3_ < this.merchantItems.length) {
            (this.merchantItems[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new ObjectItemGenericQuantityPrice();
            _loc6_.deserialize(buffer);
            this.bidHouseItems.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new ObjectItemGenericQuantityPrice();
            _loc7_.deserialize(buffer);
            this.merchantItems.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.ExchangeOfflineSoldItemsMessage = ExchangeOfflineSoldItemsMessage;
module.exports.messages[6613] = ExchangeOfflineSoldItemsMessage;

class ExchangeOkMultiCraftMessage extends ProtocolMessage {
    constructor(initiatorId, otherId, role) {
        super(5768);
        this.initiatorId = initiatorId;
        this.otherId = otherId;
        this.role = role;
    }

    serialize() {
        if (this.initiatorId < 0 || this.initiatorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.initiatorId + ") on element initiatorId.");
        }
        this.buffer.writeVarLong(this.initiatorId);
        if (this.otherId < 0 || this.otherId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.otherId + ") on element otherId.");
        }
        this.buffer.writeVarLong(this.otherId);
        this.buffer.writeByte(this.role);
    }

    deserialize(buffer) {
        this.initiatorId = buffer.readVarUhLong();
        if (this.initiatorId < 0 || this.initiatorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.initiatorId + ") on element of ExchangeOkMultiCraftMessage.initiatorId.");
        }
        this.otherId = buffer.readVarUhLong();
        if (this.otherId < 0 || this.otherId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.otherId + ") on element of ExchangeOkMultiCraftMessage.otherId.");
        };
        this.role = buffer.readByte();
    }
};
module.exports.ExchangeOkMultiCraftMessage = ExchangeOkMultiCraftMessage;
module.exports.messages[5768] = ExchangeOkMultiCraftMessage;

class ExchangeOnHumanVendorRequestMessage extends ProtocolMessage {
    constructor(humanVendorId, humanVendorCell) {
        super(5772);
        this.humanVendorId = humanVendorId;
        this.humanVendorCell = humanVendorCell;
    }

    serialize() {
        if (this.humanVendorId < 0 || this.humanVendorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.humanVendorId + ") on element humanVendorId.");
        }
        this.buffer.writeVarLong(this.humanVendorId);
        if (this.humanVendorCell < 0 || this.humanVendorCell > 559) {
            throw new Error("Forbidden value (" + this.humanVendorCell + ") on element humanVendorCell.");
        }
        this.buffer.writeVarShort(this.humanVendorCell);
    }

    deserialize(buffer) {
        this.humanVendorId = buffer.readVarUhLong();
        if (this.humanVendorId < 0 || this.humanVendorId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.humanVendorId + ") on element of ExchangeOnHumanVendorRequestMessage.humanVendorId.");
        }
        this.humanVendorCell = buffer.readVarUhShort();
        if (this.humanVendorCell < 0 || this.humanVendorCell > 559) {
            throw new Error("Forbidden value (" + this.humanVendorCell + ") on element of ExchangeOnHumanVendorRequestMessage.humanVendorCell.");
        };
    }
};
module.exports.ExchangeOnHumanVendorRequestMessage = ExchangeOnHumanVendorRequestMessage;
module.exports.messages[5772] = ExchangeOnHumanVendorRequestMessage;

class ExchangeRequestMessage extends ProtocolMessage {
    constructor(exchangeType) {
        super(5505);
        this.exchangeType = exchangeType;
    }

    serialize() {
        this.buffer.writeByte(this.exchangeType);
    }

    deserialize(buffer) {
        this.exchangeType = buffer.readByte();
    }
};
module.exports.ExchangeRequestMessage = ExchangeRequestMessage;
module.exports.messages[5505] = ExchangeRequestMessage;

class ExchangePlayerMultiCraftRequestMessage extends ExchangeRequestMessage {
    constructor(exchangeType, target, skillId) {
        super(exchangeType);
        this.target = target;
        this.skillId = skillId;
        this.messageId = 5784;
    }

    serialize() {
        super.serialize();
        if (this.target < 0 || this.target > 9007199254740990) {
            throw new Error("Forbidden value (" + this.target + ") on element target.");
        }
        this.buffer.writeVarLong(this.target);
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarInt(this.skillId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.target = buffer.readVarUhLong();
        if (this.target < 0 || this.target > 9007199254740990) {
            throw new Error("Forbidden value (" + this.target + ") on element of ExchangePlayerMultiCraftRequestMessage.target.");
        }
        this.skillId = buffer.readVarUhInt();
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangePlayerMultiCraftRequestMessage.skillId.");
        };
    }
};
module.exports.ExchangePlayerMultiCraftRequestMessage = ExchangePlayerMultiCraftRequestMessage;
module.exports.messages[5784] = ExchangePlayerMultiCraftRequestMessage;

class ExchangePlayerRequestMessage extends ExchangeRequestMessage {
    constructor(exchangeType, target) {
        super(exchangeType);
        this.target = target;
        this.messageId = 5773;
    }

    serialize() {
        super.serialize();
        if (this.target < 0 || this.target > 9007199254740990) {
            throw new Error("Forbidden value (" + this.target + ") on element target.");
        }
        this.buffer.writeVarLong(this.target);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.target = buffer.readVarUhLong();
        if (this.target < 0 || this.target > 9007199254740990) {
            throw new Error("Forbidden value (" + this.target + ") on element of ExchangePlayerRequestMessage.target.");
        }
    }
};
module.exports.ExchangePlayerRequestMessage = ExchangePlayerRequestMessage;
module.exports.messages[5773] = ExchangePlayerRequestMessage;

class ExchangeReadyMessage extends ProtocolMessage {
    constructor(ready, step) {
        super(5511);
        this.ready = ready;
        this.step = step;
    }

    serialize() {
        this.buffer.writeBoolean(this.ready);
        if (this.step < 0) {
            throw new Error("Forbidden value (" + this.step + ") on element step.");
        }
        this.buffer.writeVarShort(this.step);
    }

    deserialize(buffer) {
        this.ready = buffer.readBoolean();
        this.step = buffer.readVarUhShort();
        if (this.step < 0) {
            throw new Error("Forbidden value (" + this.step + ") on element of ExchangeReadyMessage.step.");
        }
    }
};
module.exports.ExchangeReadyMessage = ExchangeReadyMessage;
module.exports.messages[5511] = ExchangeReadyMessage;

class ExchangeReplayStopMessage extends ProtocolMessage {
    constructor() {
        super(6001);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeReplayStopMessage = ExchangeReplayStopMessage;
module.exports.messages[6001] = ExchangeReplayStopMessage;

class ExchangeReplyTaxVendorMessage extends ProtocolMessage {
    constructor(objectValue, totalTaxValue) {
        super(5787);
        this.objectValue = objectValue;
        this.totalTaxValue = totalTaxValue;
    }

    serialize() {
        if (this.objectValue < 0 || this.objectValue > 9007199254740990) {
            throw new Error("Forbidden value (" + this.objectValue + ") on element objectValue.");
        }
        this.buffer.writeVarLong(this.objectValue);
        if (this.totalTaxValue < 0 || this.totalTaxValue > 9007199254740990) {
            throw new Error("Forbidden value (" + this.totalTaxValue + ") on element totalTaxValue.");
        }
        this.buffer.writeVarLong(this.totalTaxValue);
    }

    deserialize(buffer) {
        this.objectValue = buffer.readVarUhLong();
        if (this.objectValue < 0 || this.objectValue > 9007199254740990) {
            throw new Error("Forbidden value (" + this.objectValue + ") on element of ExchangeReplyTaxVendorMessage.objectValue.");
        }
        this.totalTaxValue = buffer.readVarUhLong();
        if (this.totalTaxValue < 0 || this.totalTaxValue > 9007199254740990) {
            throw new Error("Forbidden value (" + this.totalTaxValue + ") on element of ExchangeReplyTaxVendorMessage.totalTaxValue.");
        };
    }
};
module.exports.ExchangeReplyTaxVendorMessage = ExchangeReplyTaxVendorMessage;
module.exports.messages[5787] = ExchangeReplyTaxVendorMessage;

class ExchangeRequestedMessage extends ProtocolMessage {
    constructor(exchangeType) {
        super(5522);
        this.exchangeType = exchangeType;
    }

    serialize() {
        this.buffer.writeByte(this.exchangeType);
    }

    deserialize(buffer) {
        this.exchangeType = buffer.readByte();
    }
};
module.exports.ExchangeRequestedMessage = ExchangeRequestedMessage;
module.exports.messages[5522] = ExchangeRequestedMessage;

class ExchangeRequestedTradeMessage extends ExchangeRequestedMessage {
    constructor(exchangeType, source, target) {
        super(exchangeType);
        this.source = source;
        this.target = target;
        this.messageId = 5523;
    }

    serialize() {
        super.serialize();
        if (this.source < 0 || this.source > 9007199254740990) {
            throw new Error("Forbidden value (" + this.source + ") on element source.");
        }
        this.buffer.writeVarLong(this.source);
        if (this.target < 0 || this.target > 9007199254740990) {
            throw new Error("Forbidden value (" + this.target + ") on element target.");
        }
        this.buffer.writeVarLong(this.target);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.source = buffer.readVarUhLong();
        if (this.source < 0 || this.source > 9007199254740990) {
            throw new Error("Forbidden value (" + this.source + ") on element of ExchangeRequestedTradeMessage.source.");
        }
        this.target = buffer.readVarUhLong();
        if (this.target < 0 || this.target > 9007199254740990) {
            throw new Error("Forbidden value (" + this.target + ") on element of ExchangeRequestedTradeMessage.target.");
        };
    }
};
module.exports.ExchangeRequestedTradeMessage = ExchangeRequestedTradeMessage;
module.exports.messages[5523] = ExchangeRequestedTradeMessage;

class ExchangeRequestOnMountStockMessage extends ProtocolMessage {
    constructor() {
        super(5986);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeRequestOnMountStockMessage = ExchangeRequestOnMountStockMessage;
module.exports.messages[5986] = ExchangeRequestOnMountStockMessage;

class ExchangeRequestOnShopStockMessage extends ProtocolMessage {
    constructor() {
        super(5753);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeRequestOnShopStockMessage = ExchangeRequestOnShopStockMessage;
module.exports.messages[5753] = ExchangeRequestOnShopStockMessage;

class ExchangeRequestOnTaxCollectorMessage extends ProtocolMessage {
    constructor(taxCollectorId) {
        super(5779);
        this.taxCollectorId = taxCollectorId;
    }

    serialize() {
        this.buffer.writeInt(this.taxCollectorId);
    }

    deserialize(buffer) {
        this.taxCollectorId = buffer.readInt();
    }
};
module.exports.ExchangeRequestOnTaxCollectorMessage = ExchangeRequestOnTaxCollectorMessage;
module.exports.messages[5779] = ExchangeRequestOnTaxCollectorMessage;

class ExchangeSellMessage extends ProtocolMessage {
    constructor(objectToSellId, quantity) {
        super(5778);
        this.objectToSellId = objectToSellId;
        this.quantity = quantity;
    }

    serialize() {
        if (this.objectToSellId < 0) {
            throw new Error("Forbidden value (" + this.objectToSellId + ") on element objectToSellId.");
        }
        this.buffer.writeVarInt(this.objectToSellId);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        this.objectToSellId = buffer.readVarUhInt();
        if (this.objectToSellId < 0) {
            throw new Error("Forbidden value (" + this.objectToSellId + ") on element of ExchangeSellMessage.objectToSellId.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeSellMessage.quantity.");
        };
    }
};
module.exports.ExchangeSellMessage = ExchangeSellMessage;
module.exports.messages[5778] = ExchangeSellMessage;

class ExchangeSellOkMessage extends ProtocolMessage {
    constructor() {
        super(5792);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeSellOkMessage = ExchangeSellOkMessage;
module.exports.messages[5792] = ExchangeSellOkMessage;

class ExchangeSetCraftRecipeMessage extends ProtocolMessage {
    constructor(objectGID) {
        super(6389);
        this.objectGID = objectGID;
    }

    serialize() {
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
    }

    deserialize(buffer) {
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeSetCraftRecipeMessage.objectGID.");
        }
    }
};
module.exports.ExchangeSetCraftRecipeMessage = ExchangeSetCraftRecipeMessage;
module.exports.messages[6389] = ExchangeSetCraftRecipeMessage;

class ExchangeShopStockMovementRemovedMessage extends ProtocolMessage {
    constructor(objectId) {
        super(5907);
        this.objectId = objectId;
    }

    serialize() {
        if (this.objectId < 0) {
            throw new Error("Forbidden value (" + this.objectId + ") on element objectId.");
        }
        this.buffer.writeVarInt(this.objectId);
    }

    deserialize(buffer) {
        this.objectId = buffer.readVarUhInt();
        if (this.objectId < 0) {
            throw new Error("Forbidden value (" + this.objectId + ") on element of ExchangeShopStockMovementRemovedMessage.objectId.");
        }
    }
};
module.exports.ExchangeShopStockMovementRemovedMessage = ExchangeShopStockMovementRemovedMessage;
module.exports.messages[5907] = ExchangeShopStockMovementRemovedMessage;

class ExchangeShopStockMovementUpdatedMessage extends ProtocolMessage {
    constructor(objectInfo) {
        super(5909);
        this.objectInfo = objectInfo;
    }

    serialize() {
        this.objectInfo.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.objectInfo = new ObjectItemToSell();
        this.objectInfo.deserialize(buffer);
    }
};
module.exports.ExchangeShopStockMovementUpdatedMessage = ExchangeShopStockMovementUpdatedMessage;
module.exports.messages[5909] = ExchangeShopStockMovementUpdatedMessage;

class ExchangeShopStockMultiMovementRemovedMessage extends ProtocolMessage {
    constructor(objectIdList) {
        super(6037);
        this.objectIdList = objectIdList;
    }

    serialize() {
        this.buffer.writeShort(this.objectIdList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectIdList.length) {
            if (this.objectIdList[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.objectIdList[_loc2_] + ") on element 1 (starting at 1) of objectIdList.");
            }
            this.buffer.writeVarInt(this.objectIdList[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of objectIdList.");
            }
            this.objectIdList.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeShopStockMultiMovementRemovedMessage = ExchangeShopStockMultiMovementRemovedMessage;
module.exports.messages[6037] = ExchangeShopStockMultiMovementRemovedMessage;

class ExchangeShopStockMultiMovementUpdatedMessage extends ProtocolMessage {
    constructor(objectInfoList) {
        super(6038);
        this.objectInfoList = objectInfoList;
    }

    serialize() {
        this.buffer.writeShort(this.objectInfoList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectInfoList.length) {
            (this.objectInfoList[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSell();
            _loc4_.deserialize(buffer);
            this.objectInfoList.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeShopStockMultiMovementUpdatedMessage = ExchangeShopStockMultiMovementUpdatedMessage;
module.exports.messages[6038] = ExchangeShopStockMultiMovementUpdatedMessage;

class ExchangeShopStockStartedMessage extends ProtocolMessage {
    constructor(objectsInfos) {
        super(5910);
        this.objectsInfos = objectsInfos;
    }

    serialize() {
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            (this.objectsInfos[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSell();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeShopStockStartedMessage = ExchangeShopStockStartedMessage;
module.exports.messages[5910] = ExchangeShopStockStartedMessage;

class ExchangeShowVendorTaxMessage extends ProtocolMessage {
    constructor() {
        super(5783);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeShowVendorTaxMessage = ExchangeShowVendorTaxMessage;
module.exports.messages[5783] = ExchangeShowVendorTaxMessage;

class ExchangeStartAsVendorMessage extends ProtocolMessage {
    constructor() {
        super(5775);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeStartAsVendorMessage = ExchangeStartAsVendorMessage;
module.exports.messages[5775] = ExchangeStartAsVendorMessage;

class ExchangeStartedBidBuyerMessage extends ProtocolMessage {
    constructor(buyerDescriptor) {
        super(5904);
        this.buyerDescriptor = buyerDescriptor;
    }

    serialize() {
        this.buyerDescriptor.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.buyerDescriptor = new SellerBuyerDescriptor();
        this.buyerDescriptor.deserialize(buffer);
    }
};
module.exports.ExchangeStartedBidBuyerMessage = ExchangeStartedBidBuyerMessage;
module.exports.messages[5904] = ExchangeStartedBidBuyerMessage;

class ExchangeStartedBidSellerMessage extends ProtocolMessage {
    constructor(sellerDescriptor, objectsInfos) {
        super(5905);
        this.sellerDescriptor = sellerDescriptor;
        this.objectsInfos = objectsInfos;
    }

    serialize() {
        this.sellerDescriptor.serialize(this.buffer);
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            (this.objectsInfos[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.sellerDescriptor = new SellerBuyerDescriptor();
        this.sellerDescriptor.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSellInBid();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeStartedBidSellerMessage = ExchangeStartedBidSellerMessage;
module.exports.messages[5905] = ExchangeStartedBidSellerMessage;

class ExchangeStartedMessage extends ProtocolMessage {
    constructor(exchangeType) {
        super(5512);
        this.exchangeType = exchangeType;
    }

    serialize() {
        this.buffer.writeByte(this.exchangeType);
    }

    deserialize(buffer) {
        this.exchangeType = buffer.readByte();
    }
};
module.exports.ExchangeStartedMessage = ExchangeStartedMessage;
module.exports.messages[5512] = ExchangeStartedMessage;

class ExchangeStartedMountStockMessage extends ProtocolMessage {
    constructor(objectsInfos) {
        super(5984);
        this.objectsInfos = objectsInfos;
    }

    serialize() {
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            (this.objectsInfos[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeStartedMountStockMessage = ExchangeStartedMountStockMessage;
module.exports.messages[5984] = ExchangeStartedMountStockMessage;

class ExchangeStartedTaxCollectorShopMessage extends ProtocolMessage {
    constructor(objects, kamas) {
        super(6664);
        this.objects = objects;
        this.kamas = kamas;
    }

    serialize() {
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            (this.objects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        this.buffer.writeVarLong(this.kamas);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
        this._kamasFunc(buffer);
    }
};
module.exports.ExchangeStartedTaxCollectorShopMessage = ExchangeStartedTaxCollectorShopMessage;
module.exports.messages[6664] = ExchangeStartedTaxCollectorShopMessage;

class ExchangeStartedWithPodsMessage extends ExchangeStartedMessage {
    constructor(exchangeType, firstCharacterId, firstCharacterCurrentWeight, firstCharacterMaxWeight, secondCharacterId, secondCharacterCurrentWeight, secondCharacterMaxWeight) {
        super(exchangeType);
        this.firstCharacterId = firstCharacterId;
        this.firstCharacterCurrentWeight = firstCharacterCurrentWeight;
        this.firstCharacterMaxWeight = firstCharacterMaxWeight;
        this.secondCharacterId = secondCharacterId;
        this.secondCharacterCurrentWeight = secondCharacterCurrentWeight;
        this.secondCharacterMaxWeight = secondCharacterMaxWeight;
        this.messageId = 6129;
    }

    serialize() {
        super.serialize();
        if (this.firstCharacterId < -9007199254740990 || this.firstCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.firstCharacterId + ") on element firstCharacterId.");
        }
        this.buffer.writeDouble(this.firstCharacterId);
        if (this.firstCharacterCurrentWeight < 0) {
            throw new Error("Forbidden value (" + this.firstCharacterCurrentWeight + ") on element firstCharacterCurrentWeight.");
        }
        this.buffer.writeVarInt(this.firstCharacterCurrentWeight);
        if (this.firstCharacterMaxWeight < 0) {
            throw new Error("Forbidden value (" + this.firstCharacterMaxWeight + ") on element firstCharacterMaxWeight.");
        }
        this.buffer.writeVarInt(this.firstCharacterMaxWeight);
        if (this.secondCharacterId < -9007199254740990 || this.secondCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.secondCharacterId + ") on element secondCharacterId.");
        }
        this.buffer.writeDouble(this.secondCharacterId);
        if (this.secondCharacterCurrentWeight < 0) {
            throw new Error("Forbidden value (" + this.secondCharacterCurrentWeight + ") on element secondCharacterCurrentWeight.");
        }
        this.buffer.writeVarInt(this.secondCharacterCurrentWeight);
        if (this.secondCharacterMaxWeight < 0) {
            throw new Error("Forbidden value (" + this.secondCharacterMaxWeight + ") on element secondCharacterMaxWeight.");
        }
        this.buffer.writeVarInt(this.secondCharacterMaxWeight);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.firstCharacterId = buffer.readDouble();
        if (this.firstCharacterId < -9007199254740990 || this.firstCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.firstCharacterId + ") on element of ExchangeStartedWithPodsMessage.firstCharacterId.");
        }
        this.firstCharacterCurrentWeight = buffer.readVarUhInt();
        if (this.firstCharacterCurrentWeight < 0) {
            throw new Error("Forbidden value (" + this.firstCharacterCurrentWeight + ") on element of ExchangeStartedWithPodsMessage.firstCharacterCurrentWeight.");
        };
        this.firstCharacterMaxWeight = buffer.readVarUhInt();
        if (this.firstCharacterMaxWeight < 0) {
            throw new Error("Forbidden value (" + this.firstCharacterMaxWeight + ") on element of ExchangeStartedWithPodsMessage.firstCharacterMaxWeight.");
        };
        this.secondCharacterId = buffer.readDouble();
        if (this.secondCharacterId < -9007199254740990 || this.secondCharacterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.secondCharacterId + ") on element of ExchangeStartedWithPodsMessage.secondCharacterId.");
        };
        this.secondCharacterCurrentWeight = buffer.readVarUhInt();
        if (this.secondCharacterCurrentWeight < 0) {
            throw new Error("Forbidden value (" + this.secondCharacterCurrentWeight + ") on element of ExchangeStartedWithPodsMessage.secondCharacterCurrentWeight.");
        };
        this.secondCharacterMaxWeight = buffer.readVarUhInt();
        if (this.secondCharacterMaxWeight < 0) {
            throw new Error("Forbidden value (" + this.secondCharacterMaxWeight + ") on element of ExchangeStartedWithPodsMessage.secondCharacterMaxWeight.");
        };
    }
};
module.exports.ExchangeStartedWithPodsMessage = ExchangeStartedWithPodsMessage;
module.exports.messages[6129] = ExchangeStartedWithPodsMessage;

class ExchangeStartedWithStorageMessage extends ExchangeStartedMessage {
    constructor(exchangeType, storageMaxSlot) {
        super(exchangeType);
        this.storageMaxSlot = storageMaxSlot;
        this.messageId = 6236;
    }

    serialize() {
        super.serialize();
        if (this.storageMaxSlot < 0) {
            throw new Error("Forbidden value (" + this.storageMaxSlot + ") on element storageMaxSlot.");
        }
        this.buffer.writeVarInt(this.storageMaxSlot);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.storageMaxSlot = buffer.readVarUhInt();
        if (this.storageMaxSlot < 0) {
            throw new Error("Forbidden value (" + this.storageMaxSlot + ") on element of ExchangeStartedWithStorageMessage.storageMaxSlot.");
        }
    }
};
module.exports.ExchangeStartedWithStorageMessage = ExchangeStartedWithStorageMessage;
module.exports.messages[6236] = ExchangeStartedWithStorageMessage;

class ExchangeStartOkCraftMessage extends ProtocolMessage {
    constructor() {
        super(5813);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeStartOkCraftMessage = ExchangeStartOkCraftMessage;
module.exports.messages[5813] = ExchangeStartOkCraftMessage;

class ExchangeStartOkCraftWithInformationMessage extends ExchangeStartOkCraftMessage {
    constructor(skillId) {
        super();
        this.skillId = skillId;
        this.messageId = 5941;
    }

    serialize() {
        super.serialize();
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarInt(this.skillId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.skillId = buffer.readVarUhInt();
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkCraftWithInformationMessage.skillId.");
        }
    }
};
module.exports.ExchangeStartOkCraftWithInformationMessage = ExchangeStartOkCraftWithInformationMessage;
module.exports.messages[5941] = ExchangeStartOkCraftWithInformationMessage;

class ExchangeStartOkHumanVendorMessage extends ProtocolMessage {
    constructor(sellerId, objectsInfos) {
        super(5767);
        this.sellerId = sellerId;
        this.objectsInfos = objectsInfos;
    }

    serialize() {
        if (this.sellerId < -9007199254740990 || this.sellerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sellerId + ") on element sellerId.");
        }
        this.buffer.writeDouble(this.sellerId);
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            (this.objectsInfos[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.sellerId = buffer.readDouble();
        if (this.sellerId < -9007199254740990 || this.sellerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.sellerId + ") on element of ExchangeStartOkHumanVendorMessage.sellerId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSellInHumanVendorShop();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeStartOkHumanVendorMessage = ExchangeStartOkHumanVendorMessage;
module.exports.messages[5767] = ExchangeStartOkHumanVendorMessage;

class ExchangeStartOkJobIndexMessage extends ProtocolMessage {
    constructor(jobs) {
        super(5819);
        this.jobs = jobs;
    }

    serialize() {
        this.buffer.writeShort(this.jobs.length);
        var _loc2_ = 0;
        while (_loc2_ < this.jobs.length) {
            if (this.jobs[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.jobs[_loc2_] + ") on element 1 (starting at 1) of jobs.");
            }
            this.buffer.writeVarInt(this.jobs[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of jobs.");
            }
            this.jobs.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeStartOkJobIndexMessage = ExchangeStartOkJobIndexMessage;
module.exports.messages[5819] = ExchangeStartOkJobIndexMessage;

class ExchangeStartOkMountWithOutPaddockMessage extends ProtocolMessage {
    constructor(stabledMountsDescription) {
        super(5991);
        this.stabledMountsDescription = stabledMountsDescription;
    }

    serialize() {
        this.buffer.writeShort(this.stabledMountsDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.stabledMountsDescription.length) {
            (this.stabledMountsDescription[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
            _loc4_.deserialize(buffer);
            this.stabledMountsDescription.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeStartOkMountWithOutPaddockMessage = ExchangeStartOkMountWithOutPaddockMessage;
module.exports.messages[5991] = ExchangeStartOkMountWithOutPaddockMessage;

class ExchangeStartOkMountMessage extends ExchangeStartOkMountWithOutPaddockMessage {
    constructor(stabledMountsDescription, paddockedMountsDescription) {
        super(stabledMountsDescription);
        this.paddockedMountsDescription = paddockedMountsDescription;
        this.messageId = 5979;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.paddockedMountsDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.paddockedMountsDescription.length) {
            (this.paddockedMountsDescription[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
            _loc4_.deserialize(buffer);
            this.paddockedMountsDescription.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeStartOkMountMessage = ExchangeStartOkMountMessage;
module.exports.messages[5979] = ExchangeStartOkMountMessage;

class ExchangeStartOkMulticraftCrafterMessage extends ProtocolMessage {
    constructor(skillId) {
        super(5818);
        this.skillId = skillId;
    }

    serialize() {
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarInt(this.skillId);
    }

    deserialize(buffer) {
        this.skillId = buffer.readVarUhInt();
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkMulticraftCrafterMessage.skillId.");
        }
    }
};
module.exports.ExchangeStartOkMulticraftCrafterMessage = ExchangeStartOkMulticraftCrafterMessage;
module.exports.messages[5818] = ExchangeStartOkMulticraftCrafterMessage;

class ExchangeStartOkMulticraftCustomerMessage extends ProtocolMessage {
    constructor(skillId, crafterJobLevel) {
        super(5817);
        this.skillId = skillId;
        this.crafterJobLevel = crafterJobLevel;
    }

    serialize() {
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarInt(this.skillId);
        if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
            throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element crafterJobLevel.");
        }
        this.buffer.writeByte(this.crafterJobLevel);
    }

    deserialize(buffer) {
        this.skillId = buffer.readVarUhInt();
        if (this.skillId < 0) {
            throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkMulticraftCustomerMessage.skillId.");
        }
        this.crafterJobLevel = buffer.readUnsignedByte();
        if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
            throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element of ExchangeStartOkMulticraftCustomerMessage.crafterJobLevel.");
        };
    }
};
module.exports.ExchangeStartOkMulticraftCustomerMessage = ExchangeStartOkMulticraftCustomerMessage;
module.exports.messages[5817] = ExchangeStartOkMulticraftCustomerMessage;

class ExchangeStartOkNpcShopMessage extends ProtocolMessage {
    constructor(npcSellerId, tokenId, objectsInfos) {
        super(5761);
        this.npcSellerId = npcSellerId;
        this.tokenId = tokenId;
        this.objectsInfos = objectsInfos;
    }

    serialize() {
        if (this.npcSellerId < -9007199254740990 || this.npcSellerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.npcSellerId + ") on element npcSellerId.");
        }
        this.buffer.writeDouble(this.npcSellerId);
        if (this.tokenId < 0) {
            throw new Error("Forbidden value (" + this.tokenId + ") on element tokenId.");
        }
        this.buffer.writeVarShort(this.tokenId);
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            (this.objectsInfos[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.npcSellerId = buffer.readDouble();
        if (this.npcSellerId < -9007199254740990 || this.npcSellerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.npcSellerId + ") on element of ExchangeStartOkNpcShopMessage.npcSellerId.");
        }
        this.tokenId = buffer.readVarUhShort();
        if (this.tokenId < 0) {
            throw new Error("Forbidden value (" + this.tokenId + ") on element of ExchangeStartOkNpcShopMessage.tokenId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSellInNpcShop();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeStartOkNpcShopMessage = ExchangeStartOkNpcShopMessage;
module.exports.messages[5761] = ExchangeStartOkNpcShopMessage;

class ExchangeStartOkNpcTradeMessage extends ProtocolMessage {
    constructor(npcId) {
        super(5785);
        this.npcId = npcId;
    }

    serialize() {
        if (this.npcId < -9007199254740990 || this.npcId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
        }
        this.buffer.writeDouble(this.npcId);
    }

    deserialize(buffer) {
        this.npcId = buffer.readDouble();
        if (this.npcId < -9007199254740990 || this.npcId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.npcId + ") on element of ExchangeStartOkNpcTradeMessage.npcId.");
        }
    }
};
module.exports.ExchangeStartOkNpcTradeMessage = ExchangeStartOkNpcTradeMessage;
module.exports.messages[5785] = ExchangeStartOkNpcTradeMessage;

class ExchangeStartOkRecycleTradeMessage extends ProtocolMessage {
    constructor(percentToPrism, percentToPlayer) {
        super(6600);
        this.percentToPrism = percentToPrism;
        this.percentToPlayer = percentToPlayer;
    }

    serialize() {
        if (this.percentToPrism < 0) {
            throw new Error("Forbidden value (" + this.percentToPrism + ") on element percentToPrism.");
        }
        this.buffer.writeShort(this.percentToPrism);
        if (this.percentToPlayer < 0) {
            throw new Error("Forbidden value (" + this.percentToPlayer + ") on element percentToPlayer.");
        }
        this.buffer.writeShort(this.percentToPlayer);
    }

    deserialize(buffer) {
        this.percentToPrism = buffer.readShort();
        if (this.percentToPrism < 0) {
            throw new Error("Forbidden value (" + this.percentToPrism + ") on element of ExchangeStartOkRecycleTradeMessage.percentToPrism.");
        }
        this.percentToPlayer = buffer.readShort();
        if (this.percentToPlayer < 0) {
            throw new Error("Forbidden value (" + this.percentToPlayer + ") on element of ExchangeStartOkRecycleTradeMessage.percentToPlayer.");
        };
    }
};
module.exports.ExchangeStartOkRecycleTradeMessage = ExchangeStartOkRecycleTradeMessage;
module.exports.messages[6600] = ExchangeStartOkRecycleTradeMessage;

class ExchangeStartOkRunesTradeMessage extends ProtocolMessage {
    constructor() {
        super(6567);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ExchangeStartOkRunesTradeMessage = ExchangeStartOkRunesTradeMessage;
module.exports.messages[6567] = ExchangeStartOkRunesTradeMessage;

class ExchangeStoppedMessage extends ProtocolMessage {
    constructor(id) {
        super(6589);
        this.id = id;
    }

    serialize() {
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            throw new Error("Forbidden value (" + this.id + ") on element of ExchangeStoppedMessage.id.");
        }
    }
};
module.exports.ExchangeStoppedMessage = ExchangeStoppedMessage;
module.exports.messages[6589] = ExchangeStoppedMessage;

class ExchangeTypesExchangerDescriptionForUserMessage extends ProtocolMessage {
    constructor(typeDescription) {
        super(5765);
        this.typeDescription = typeDescription;
    }

    serialize() {
        this.buffer.writeShort(this.typeDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.typeDescription.length) {
            if (this.typeDescription[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.typeDescription[_loc2_] + ") on element 1 (starting at 1) of typeDescription.");
            }
            this.buffer.writeVarInt(this.typeDescription[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of typeDescription.");
            }
            this.typeDescription.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeTypesExchangerDescriptionForUserMessage = ExchangeTypesExchangerDescriptionForUserMessage;
module.exports.messages[5765] = ExchangeTypesExchangerDescriptionForUserMessage;

class ExchangeTypesItemsExchangerDescriptionForUserMessage extends ProtocolMessage {
    constructor(itemTypeDescriptions) {
        super(5752);
        this.itemTypeDescriptions = itemTypeDescriptions;
    }

    serialize() {
        this.buffer.writeShort(this.itemTypeDescriptions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.itemTypeDescriptions.length) {
            (this.itemTypeDescriptions[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new BidExchangerObjectInfo();
            _loc4_.deserialize(buffer);
            this.itemTypeDescriptions.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeTypesItemsExchangerDescriptionForUserMessage = ExchangeTypesItemsExchangerDescriptionForUserMessage;
module.exports.messages[5752] = ExchangeTypesItemsExchangerDescriptionForUserMessage;

class ExchangeWaitingResultMessage extends ProtocolMessage {
    constructor(bwait) {
        super(5786);
        this.bwait = bwait;
    }

    serialize() {
        this.buffer.writeBoolean(this.bwait);
    }

    deserialize(buffer) {
        this.bwait = buffer.readBoolean();
    }
};
module.exports.ExchangeWaitingResultMessage = ExchangeWaitingResultMessage;
module.exports.messages[5786] = ExchangeWaitingResultMessage;

class ExchangeWeightMessage extends ProtocolMessage {
    constructor(currentWeight, maxWeight) {
        super(5793);
        this.currentWeight = currentWeight;
        this.maxWeight = maxWeight;
    }

    serialize() {
        if (this.currentWeight < 0) {
            throw new Error("Forbidden value (" + this.currentWeight + ") on element currentWeight.");
        }
        this.buffer.writeVarInt(this.currentWeight);
        if (this.maxWeight < 0) {
            throw new Error("Forbidden value (" + this.maxWeight + ") on element maxWeight.");
        }
        this.buffer.writeVarInt(this.maxWeight);
    }

    deserialize(buffer) {
        this.currentWeight = buffer.readVarUhInt();
        if (this.currentWeight < 0) {
            throw new Error("Forbidden value (" + this.currentWeight + ") on element of ExchangeWeightMessage.currentWeight.");
        }
        this.maxWeight = buffer.readVarUhInt();
        if (this.maxWeight < 0) {
            throw new Error("Forbidden value (" + this.maxWeight + ") on element of ExchangeWeightMessage.maxWeight.");
        };
    }
};
module.exports.ExchangeWeightMessage = ExchangeWeightMessage;
module.exports.messages[5793] = ExchangeWeightMessage;

class FocusedExchangeReadyMessage extends ExchangeReadyMessage {
    constructor(ready, step, focusActionId) {
        super(ready, step);
        this.focusActionId = focusActionId;
        this.messageId = 6701;
    }

    serialize() {
        super.serialize();
        if (this.focusActionId < 0) {
            throw new Error("Forbidden value (" + this.focusActionId + ") on element focusActionId.");
        }
        this.buffer.writeVarInt(this.focusActionId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.focusActionId = buffer.readVarUhInt();
        if (this.focusActionId < 0) {
            throw new Error("Forbidden value (" + this.focusActionId + ") on element of FocusedExchangeReadyMessage.focusActionId.");
        }
    }
};
module.exports.FocusedExchangeReadyMessage = FocusedExchangeReadyMessage;
module.exports.messages[6701] = FocusedExchangeReadyMessage;

class ItemNoMoreAvailableMessage extends ProtocolMessage {
    constructor() {
        super(5769);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ItemNoMoreAvailableMessage = ItemNoMoreAvailableMessage;
module.exports.messages[5769] = ItemNoMoreAvailableMessage;

class JobBookSubscribeRequestMessage extends ProtocolMessage {
    constructor(jobIds) {
        super(6592);
        this.jobIds = jobIds;
    }

    serialize() {
        this.buffer.writeShort(this.jobIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.jobIds.length) {
            if (this.jobIds[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.jobIds[_loc2_] + ") on element 1 (starting at 1) of jobIds.");
            }
            this.buffer.writeByte(this.jobIds[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of jobIds.");
            }
            this.jobIds.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.JobBookSubscribeRequestMessage = JobBookSubscribeRequestMessage;
module.exports.messages[6592] = JobBookSubscribeRequestMessage;

class RecycleResultMessage extends ProtocolMessage {
    constructor(nuggetsForPrism, nuggetsForPlayer) {
        super(6601);
        this.nuggetsForPrism = nuggetsForPrism;
        this.nuggetsForPlayer = nuggetsForPlayer;
    }

    serialize() {
        if (this.nuggetsForPrism < 0) {
            throw new Error("Forbidden value (" + this.nuggetsForPrism + ") on element nuggetsForPrism.");
        }
        this.buffer.writeVarInt(this.nuggetsForPrism);
        if (this.nuggetsForPlayer < 0) {
            throw new Error("Forbidden value (" + this.nuggetsForPlayer + ") on element nuggetsForPlayer.");
        }
        this.buffer.writeVarInt(this.nuggetsForPlayer);
    }

    deserialize(buffer) {
        this.nuggetsForPrism = buffer.readVarUhInt();
        if (this.nuggetsForPrism < 0) {
            throw new Error("Forbidden value (" + this.nuggetsForPrism + ") on element of RecycleResultMessage.nuggetsForPrism.");
        }
        this.nuggetsForPlayer = buffer.readVarUhInt();
        if (this.nuggetsForPlayer < 0) {
            throw new Error("Forbidden value (" + this.nuggetsForPlayer + ") on element of RecycleResultMessage.nuggetsForPlayer.");
        };
    }
};
module.exports.RecycleResultMessage = RecycleResultMessage;
module.exports.messages[6601] = RecycleResultMessage;

class UpdateMountBoostMessage extends ProtocolMessage {
    constructor(rideId, boostToUpdateList) {
        super(6179);
        this.rideId = rideId;
        this.boostToUpdateList = boostToUpdateList;
    }

    serialize() {
        this.buffer.writeVarInt(this.rideId);
        this.buffer.writeShort(this.boostToUpdateList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.boostToUpdateList.length) {
            this.buffer.writeShort((this.boostToUpdateList[_loc2_]).getTypeId());
            (this.boostToUpdateList[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.rideId = buffer.readVarInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(UpdateMountBoost, _loc4_);
            _loc5_.deserialize(buffer);
            this.boostToUpdateList.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.UpdateMountBoostMessage = UpdateMountBoostMessage;
module.exports.messages[6179] = UpdateMountBoostMessage;

class ExchangeKamaModifiedMessage extends ExchangeObjectMessage {
    constructor(remote, quantity) {
        super(remote);
        this.quantity = quantity;
        this.messageId = 5521;
    }

    serialize() {
        super.serialize();
        if (this.quantity < 0 || this.quantity > 9007199254740990) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarLong(this.quantity);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.quantity = buffer.readVarUhLong();
        if (this.quantity < 0 || this.quantity > 9007199254740990) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeKamaModifiedMessage.quantity.");
        }
    }
};
module.exports.ExchangeKamaModifiedMessage = ExchangeKamaModifiedMessage;
module.exports.messages[5521] = ExchangeKamaModifiedMessage;

class ExchangeMultiCraftCrafterCanUseHisRessourcesMessage extends ProtocolMessage {
    constructor(allowed) {
        super(6020);
        this.allowed = allowed;
    }

    serialize() {
        this.buffer.writeBoolean(this.allowed);
    }

    deserialize(buffer) {
        this.allowed = buffer.readBoolean();
    }
};
module.exports.ExchangeMultiCraftCrafterCanUseHisRessourcesMessage = ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;
module.exports.messages[6020] = ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;

class ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage extends ProtocolMessage {
    constructor(allow) {
        super(6021);
        this.allow = allow;
    }

    serialize() {
        this.buffer.writeBoolean(this.allow);
    }

    deserialize(buffer) {
        this.allow = buffer.readBoolean();
    }
};
module.exports.ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage = ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage;
module.exports.messages[6021] = ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage;

class ExchangeObjectModifiedInBagMessage extends ExchangeObjectMessage {
    constructor(remote, object) {
        super(remote);
        this.object = object;
        this.messageId = 6008;
    }

    serialize() {
        super.serialize();
        this.object.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
};
module.exports.ExchangeObjectModifiedInBagMessage = ExchangeObjectModifiedInBagMessage;
module.exports.messages[6008] = ExchangeObjectModifiedInBagMessage;

class ExchangeObjectModifiedMessage extends ExchangeObjectMessage {
    constructor(remote, object) {
        super(remote);
        this.object = object;
        this.messageId = 5519;
    }

    serialize() {
        super.serialize();
        this.object.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
};
module.exports.ExchangeObjectModifiedMessage = ExchangeObjectModifiedMessage;
module.exports.messages[5519] = ExchangeObjectModifiedMessage;

class ExchangeObjectPutInBagMessage extends ExchangeObjectMessage {
    constructor(remote, object) {
        super(remote);
        this.object = object;
        this.messageId = 6009;
    }

    serialize() {
        super.serialize();
        this.object.serialize(this.buffer);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
};
module.exports.ExchangeObjectPutInBagMessage = ExchangeObjectPutInBagMessage;
module.exports.messages[6009] = ExchangeObjectPutInBagMessage;

class ExchangeObjectRemovedFromBagMessage extends ExchangeObjectMessage {
    constructor(remote, objectUID) {
        super(remote);
        this.objectUID = objectUID;
        this.messageId = 6010;
    }

    serialize() {
        super.serialize();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectRemovedFromBagMessage.objectUID.");
        }
    }
};
module.exports.ExchangeObjectRemovedFromBagMessage = ExchangeObjectRemovedFromBagMessage;
module.exports.messages[6010] = ExchangeObjectRemovedFromBagMessage;

class ExchangeObjectRemovedMessage extends ExchangeObjectMessage {
    constructor(remote, objectUID) {
        super(remote);
        this.objectUID = objectUID;
        this.messageId = 5517;
    }

    serialize() {
        super.serialize();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectRemovedMessage.objectUID.");
        }
    }
};
module.exports.ExchangeObjectRemovedMessage = ExchangeObjectRemovedMessage;
module.exports.messages[5517] = ExchangeObjectRemovedMessage;

class ExchangeObjectsModifiedMessage extends ExchangeObjectMessage {
    constructor(remote, object) {
        super(remote);
        this.object = object;
        this.messageId = 6533;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.object.length);
        var _loc2_ = 0;
        while (_loc2_ < this.object.length) {
            (this.object[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.object.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeObjectsModifiedMessage = ExchangeObjectsModifiedMessage;
module.exports.messages[6533] = ExchangeObjectsModifiedMessage;

class ExchangeObjectsRemovedMessage extends ExchangeObjectMessage {
    constructor(remote, objectUID) {
        super(remote);
        this.objectUID = objectUID;
        this.messageId = 6532;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.objectUID.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectUID.length) {
            if (this.objectUID[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.objectUID[_loc2_] + ") on element 1 (starting at 1) of objectUID.");
            }
            this.buffer.writeVarInt(this.objectUID[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of objectUID.");
            }
            this.objectUID.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ExchangeObjectsRemovedMessage = ExchangeObjectsRemovedMessage;
module.exports.messages[6532] = ExchangeObjectsRemovedMessage;

class ExchangePodsModifiedMessage extends ExchangeObjectMessage {
    constructor(remote, currentWeight, maxWeight) {
        super(remote);
        this.currentWeight = currentWeight;
        this.maxWeight = maxWeight;
        this.messageId = 6670;
    }

    serialize() {
        super.serialize();
        if (this.currentWeight < 0) {
            throw new Error("Forbidden value (" + this.currentWeight + ") on element currentWeight.");
        }
        this.buffer.writeVarInt(this.currentWeight);
        if (this.maxWeight < 0) {
            throw new Error("Forbidden value (" + this.maxWeight + ") on element maxWeight.");
        }
        this.buffer.writeVarInt(this.maxWeight);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.currentWeight = buffer.readVarUhInt();
        if (this.currentWeight < 0) {
            throw new Error("Forbidden value (" + this.currentWeight + ") on element of ExchangePodsModifiedMessage.currentWeight.");
        }
        this.maxWeight = buffer.readVarUhInt();
        if (this.maxWeight < 0) {
            throw new Error("Forbidden value (" + this.maxWeight + ") on element of ExchangePodsModifiedMessage.maxWeight.");
        };
    }
};
module.exports.ExchangePodsModifiedMessage = ExchangePodsModifiedMessage;
module.exports.messages[6670] = ExchangePodsModifiedMessage;

class GoldAddedMessage extends ProtocolMessage {
    constructor(gold) {
        super(6030);
        this.gold = gold;
    }

    serialize() {
        this.gold.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.gold = new GoldItem();
        this.gold.deserialize(buffer);
    }
};
module.exports.GoldAddedMessage = GoldAddedMessage;
module.exports.messages[6030] = GoldAddedMessage;

class InventoryContentMessage extends ProtocolMessage {
    constructor(objects, kamas) {
        super(3016);
        this.objects = objects;
        this.kamas = kamas;
    }

    serialize() {
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            (this.objects[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        if (this.kamas < 0 || this.kamas > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        this.buffer.writeVarLong(this.kamas);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
        this._kamasFunc(buffer);
    }
};
module.exports.InventoryContentMessage = InventoryContentMessage;
module.exports.messages[3016] = InventoryContentMessage;

class InventoryContentAndPresetMessage extends InventoryContentMessage {
    constructor(objects, kamas, presets, idolsPresets) {
        super(objects, kamas);
        this.presets = presets;
        this.idolsPresets = idolsPresets;
        this.messageId = 6162;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.presets.length);
        var _loc2_ = 0;
        while (_loc2_ < this.presets.length) {
            (this.presets[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.idolsPresets.length);
        var _loc3_ = 0;
        while (_loc3_ < this.idolsPresets.length) {
            (this.idolsPresets[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new Preset();
            _loc6_.deserialize(buffer);
            this.presets.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new IdolsPreset();
            _loc7_.deserialize(buffer);
            this.idolsPresets.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.InventoryContentAndPresetMessage = InventoryContentAndPresetMessage;
module.exports.messages[6162] = InventoryContentAndPresetMessage;

class InventoryWeightMessage extends ProtocolMessage {
    constructor(weight, weightMax) {
        super(3009);
        this.weight = weight;
        this.weightMax = weightMax;
    }

    serialize() {
        if (this.weight < 0) {
            throw new Error("Forbidden value (" + this.weight + ") on element weight.");
        }
        this.buffer.writeVarInt(this.weight);
        if (this.weightMax < 0) {
            throw new Error("Forbidden value (" + this.weightMax + ") on element weightMax.");
        }
        this.buffer.writeVarInt(this.weightMax);
    }

    deserialize(buffer) {
        this.weight = buffer.readVarUhInt();
        if (this.weight < 0) {
            throw new Error("Forbidden value (" + this.weight + ") on element of InventoryWeightMessage.weight.");
        }
        this.weightMax = buffer.readVarUhInt();
        if (this.weightMax < 0) {
            throw new Error("Forbidden value (" + this.weightMax + ") on element of InventoryWeightMessage.weightMax.");
        };
    }
};
module.exports.InventoryWeightMessage = InventoryWeightMessage;
module.exports.messages[3009] = InventoryWeightMessage;

class LivingObjectChangeSkinRequestMessage extends ProtocolMessage {
    constructor(livingUID, livingPosition, skinId) {
        super(5725);
        this.livingUID = livingUID;
        this.livingPosition = livingPosition;
        this.skinId = skinId;
    }

    serialize() {
        if (this.livingUID < 0) {
            throw new Error("Forbidden value (" + this.livingUID + ") on element livingUID.");
        }
        this.buffer.writeVarInt(this.livingUID);
        if (this.livingPosition < 0 || this.livingPosition > 255) {
            throw new Error("Forbidden value (" + this.livingPosition + ") on element livingPosition.");
        }
        this.buffer.writeByte(this.livingPosition);
        if (this.skinId < 0) {
            throw new Error("Forbidden value (" + this.skinId + ") on element skinId.");
        }
        this.buffer.writeVarInt(this.skinId);
    }

    deserialize(buffer) {
        this.livingUID = buffer.readVarUhInt();
        if (this.livingUID < 0) {
            throw new Error("Forbidden value (" + this.livingUID + ") on element of LivingObjectChangeSkinRequestMessage.livingUID.");
        }
        this.livingPosition = buffer.readUnsignedByte();
        if (this.livingPosition < 0 || this.livingPosition > 255) {
            throw new Error("Forbidden value (" + this.livingPosition + ") on element of LivingObjectChangeSkinRequestMessage.livingPosition.");
        };
        this.skinId = buffer.readVarUhInt();
        if (this.skinId < 0) {
            throw new Error("Forbidden value (" + this.skinId + ") on element of LivingObjectChangeSkinRequestMessage.skinId.");
        };
    }
};
module.exports.LivingObjectChangeSkinRequestMessage = LivingObjectChangeSkinRequestMessage;
module.exports.messages[5725] = LivingObjectChangeSkinRequestMessage;

class LivingObjectDissociateMessage extends ProtocolMessage {
    constructor(livingUID, livingPosition) {
        super(5723);
        this.livingUID = livingUID;
        this.livingPosition = livingPosition;
    }

    serialize() {
        if (this.livingUID < 0) {
            throw new Error("Forbidden value (" + this.livingUID + ") on element livingUID.");
        }
        this.buffer.writeVarInt(this.livingUID);
        if (this.livingPosition < 0 || this.livingPosition > 255) {
            throw new Error("Forbidden value (" + this.livingPosition + ") on element livingPosition.");
        }
        this.buffer.writeByte(this.livingPosition);
    }

    deserialize(buffer) {
        this.livingUID = buffer.readVarUhInt();
        if (this.livingUID < 0) {
            throw new Error("Forbidden value (" + this.livingUID + ") on element of LivingObjectDissociateMessage.livingUID.");
        }
        this.livingPosition = buffer.readUnsignedByte();
        if (this.livingPosition < 0 || this.livingPosition > 255) {
            throw new Error("Forbidden value (" + this.livingPosition + ") on element of LivingObjectDissociateMessage.livingPosition.");
        };
    }
};
module.exports.LivingObjectDissociateMessage = LivingObjectDissociateMessage;
module.exports.messages[5723] = LivingObjectDissociateMessage;

class LivingObjectMessageMessage extends ProtocolMessage {
    constructor(msgId, timeStamp, owner, objectGenericId) {
        super(6065);
        this.msgId = msgId;
        this.timeStamp = timeStamp;
        this.owner = owner;
        this.objectGenericId = objectGenericId;
    }

    serialize() {
        if (this.msgId < 0) {
            throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
        }
        this.buffer.writeVarShort(this.msgId);
        if (this.timeStamp < 0) {
            throw new Error("Forbidden value (" + this.timeStamp + ") on element timeStamp.");
        }
        this.buffer.writeInt(this.timeStamp);
        this.buffer.writeUTF(this.owner);
        if (this.objectGenericId < 0) {
            throw new Error("Forbidden value (" + this.objectGenericId + ") on element objectGenericId.");
        }
        this.buffer.writeVarShort(this.objectGenericId);
    }

    deserialize(buffer) {
        this.msgId = buffer.readVarUhShort();
        if (this.msgId < 0) {
            throw new Error("Forbidden value (" + this.msgId + ") on element of LivingObjectMessageMessage.msgId.");
        }
        this.timeStamp = buffer.readInt();
        if (this.timeStamp < 0) {
            throw new Error("Forbidden value (" + this.timeStamp + ") on element of LivingObjectMessageMessage.timeStamp.");
        };
        this.owner = buffer.readUTF();
        this.objectGenericId = buffer.readVarUhShort();
        if (this.objectGenericId < 0) {
            throw new Error("Forbidden value (" + this.objectGenericId + ") on element of LivingObjectMessageMessage.objectGenericId.");
        };
    }
};
module.exports.LivingObjectMessageMessage = LivingObjectMessageMessage;
module.exports.messages[6065] = LivingObjectMessageMessage;

class LivingObjectMessageRequestMessage extends ProtocolMessage {
    constructor(msgId, parameters, livingObject) {
        super(6066);
        this.msgId = msgId;
        this.parameters = parameters;
        this.livingObject = livingObject;
    }

    serialize() {
        if (this.msgId < 0) {
            throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
        }
        this.buffer.writeVarShort(this.msgId);
        this.buffer.writeShort(this.parameters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parameters.length) {
            this.buffer.writeUTF(this.parameters[_loc2_]);
            _loc2_++;
        }
        if (this.livingObject < 0) {
            throw new Error("Forbidden value (" + this.livingObject + ") on element livingObject.");
        }
        this.buffer.writeVarInt(this.livingObject);
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.msgId = buffer.readVarUhShort();
        if (this.msgId < 0) {
            throw new Error("Forbidden value (" + this.msgId + ") on element of LivingObjectMessageRequestMessage.msgId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.parameters.push(_loc4_);
            _loc3_++;
        }
        this._livingObjectFunc(buffer);
    }
};
module.exports.LivingObjectMessageRequestMessage = LivingObjectMessageRequestMessage;
module.exports.messages[6066] = LivingObjectMessageRequestMessage;

class SymbioticObjectAssociatedMessage extends ProtocolMessage {
    constructor(hostUID) {
        super(6527);
        this.hostUID = hostUID;
    }

    serialize() {
        if (this.hostUID < 0) {
            throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
        }
        this.buffer.writeVarInt(this.hostUID);
    }

    deserialize(buffer) {
        this.hostUID = buffer.readVarUhInt();
        if (this.hostUID < 0) {
            throw new Error("Forbidden value (" + this.hostUID + ") on element of SymbioticObjectAssociatedMessage.hostUID.");
        }
    }
};
module.exports.SymbioticObjectAssociatedMessage = SymbioticObjectAssociatedMessage;
module.exports.messages[6527] = SymbioticObjectAssociatedMessage;

class MimicryObjectAssociatedMessage extends SymbioticObjectAssociatedMessage {
    constructor(hostUID) {
        super(hostUID);
        this.messageId = 6462;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.MimicryObjectAssociatedMessage = MimicryObjectAssociatedMessage;
module.exports.messages[6462] = MimicryObjectAssociatedMessage;

class MimicryObjectEraseRequestMessage extends ProtocolMessage {
    constructor(hostUID, hostPos) {
        super(6457);
        this.hostUID = hostUID;
        this.hostPos = hostPos;
    }

    serialize() {
        if (this.hostUID < 0) {
            throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
        }
        this.buffer.writeVarInt(this.hostUID);
        if (this.hostPos < 0 || this.hostPos > 255) {
            throw new Error("Forbidden value (" + this.hostPos + ") on element hostPos.");
        }
        this.buffer.writeByte(this.hostPos);
    }

    deserialize(buffer) {
        this.hostUID = buffer.readVarUhInt();
        if (this.hostUID < 0) {
            throw new Error("Forbidden value (" + this.hostUID + ") on element of MimicryObjectEraseRequestMessage.hostUID.");
        }
        this.hostPos = buffer.readUnsignedByte();
        if (this.hostPos < 0 || this.hostPos > 255) {
            throw new Error("Forbidden value (" + this.hostPos + ") on element of MimicryObjectEraseRequestMessage.hostPos.");
        };
    }
};
module.exports.MimicryObjectEraseRequestMessage = MimicryObjectEraseRequestMessage;
module.exports.messages[6457] = MimicryObjectEraseRequestMessage;

class ObjectErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(3004);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
    }
};
module.exports.ObjectErrorMessage = ObjectErrorMessage;
module.exports.messages[3004] = ObjectErrorMessage;

class SymbioticObjectErrorMessage extends ObjectErrorMessage {
    constructor(reason, errorCode) {
        super(reason);
        this.errorCode = errorCode;
        this.messageId = 6526;
    }

    serialize() {
        super.serialize();
        this.buffer.writeByte(this.errorCode);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.errorCode = buffer.readByte();
    }
};
module.exports.SymbioticObjectErrorMessage = SymbioticObjectErrorMessage;
module.exports.messages[6526] = SymbioticObjectErrorMessage;

class MimicryObjectErrorMessage extends SymbioticObjectErrorMessage {
    constructor(reason, errorCode, preview) {
        super(reason, errorCode);
        this.preview = preview;
        this.messageId = 6461;
    }

    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.preview);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.preview = buffer.readBoolean();
    }
};
module.exports.MimicryObjectErrorMessage = MimicryObjectErrorMessage;
module.exports.messages[6461] = MimicryObjectErrorMessage;

class SymbioticObjectAssociateRequestMessage extends ProtocolMessage {
    constructor(symbioteUID, symbiotePos, hostUID, hostPos) {
        super(6522);
        this.symbioteUID = symbioteUID;
        this.symbiotePos = symbiotePos;
        this.hostUID = hostUID;
        this.hostPos = hostPos;
    }

    serialize() {
        if (this.symbioteUID < 0) {
            throw new Error("Forbidden value (" + this.symbioteUID + ") on element symbioteUID.");
        }
        this.buffer.writeVarInt(this.symbioteUID);
        if (this.symbiotePos < 0 || this.symbiotePos > 255) {
            throw new Error("Forbidden value (" + this.symbiotePos + ") on element symbiotePos.");
        }
        this.buffer.writeByte(this.symbiotePos);
        if (this.hostUID < 0) {
            throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
        }
        this.buffer.writeVarInt(this.hostUID);
        if (this.hostPos < 0 || this.hostPos > 255) {
            throw new Error("Forbidden value (" + this.hostPos + ") on element hostPos.");
        }
        this.buffer.writeByte(this.hostPos);
    }

    deserialize(buffer) {
        this.symbioteUID = buffer.readVarUhInt();
        if (this.symbioteUID < 0) {
            throw new Error("Forbidden value (" + this.symbioteUID + ") on element of SymbioticObjectAssociateRequestMessage.symbioteUID.");
        }
        this.symbiotePos = buffer.readUnsignedByte();
        if (this.symbiotePos < 0 || this.symbiotePos > 255) {
            throw new Error("Forbidden value (" + this.symbiotePos + ") on element of SymbioticObjectAssociateRequestMessage.symbiotePos.");
        };
        this.hostUID = buffer.readVarUhInt();
        if (this.hostUID < 0) {
            throw new Error("Forbidden value (" + this.hostUID + ") on element of SymbioticObjectAssociateRequestMessage.hostUID.");
        };
        this.hostPos = buffer.readUnsignedByte();
        if (this.hostPos < 0 || this.hostPos > 255) {
            throw new Error("Forbidden value (" + this.hostPos + ") on element of SymbioticObjectAssociateRequestMessage.hostPos.");
        };
    }
};
module.exports.SymbioticObjectAssociateRequestMessage = SymbioticObjectAssociateRequestMessage;
module.exports.messages[6522] = SymbioticObjectAssociateRequestMessage;

class MimicryObjectFeedAndAssociateRequestMessage extends SymbioticObjectAssociateRequestMessage {
    constructor(symbioteUID, symbiotePos, hostUID, hostPos, foodUID, foodPos, preview) {
        super(symbioteUID, symbiotePos, hostUID, hostPos);
        this.foodUID = foodUID;
        this.foodPos = foodPos;
        this.preview = preview;
        this.messageId = 6460;
    }

    serialize() {
        super.serialize();
        if (this.foodUID < 0) {
            throw new Error("Forbidden value (" + this.foodUID + ") on element foodUID.");
        }
        this.buffer.writeVarInt(this.foodUID);
        if (this.foodPos < 0 || this.foodPos > 255) {
            throw new Error("Forbidden value (" + this.foodPos + ") on element foodPos.");
        }
        this.buffer.writeByte(this.foodPos);
        this.buffer.writeBoolean(this.preview);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.foodUID = buffer.readVarUhInt();
        if (this.foodUID < 0) {
            throw new Error("Forbidden value (" + this.foodUID + ") on element of MimicryObjectFeedAndAssociateRequestMessage.foodUID.");
        }
        this.foodPos = buffer.readUnsignedByte();
        if (this.foodPos < 0 || this.foodPos > 255) {
            throw new Error("Forbidden value (" + this.foodPos + ") on element of MimicryObjectFeedAndAssociateRequestMessage.foodPos.");
        };
        this.preview = buffer.readBoolean();
    }
};
module.exports.MimicryObjectFeedAndAssociateRequestMessage = MimicryObjectFeedAndAssociateRequestMessage;
module.exports.messages[6460] = MimicryObjectFeedAndAssociateRequestMessage;

class MimicryObjectPreviewMessage extends ProtocolMessage {
    constructor(result) {
        super(6458);
        this.result = result;
    }

    serialize() {
        this.result.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.result = new ObjectItem();
        this.result.deserialize(buffer);
    }
};
module.exports.MimicryObjectPreviewMessage = MimicryObjectPreviewMessage;
module.exports.messages[6458] = MimicryObjectPreviewMessage;

class ObjectAddedMessage extends ProtocolMessage {
    constructor(object) {
        super(3025);
        this.object = object;
    }

    serialize() {
        this.object.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
};
module.exports.ObjectAddedMessage = ObjectAddedMessage;
module.exports.messages[3025] = ObjectAddedMessage;

class ObjectDeletedMessage extends ProtocolMessage {
    constructor(objectUID) {
        super(3024);
        this.objectUID = objectUID;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectDeletedMessage.objectUID.");
        }
    }
};
module.exports.ObjectDeletedMessage = ObjectDeletedMessage;
module.exports.messages[3024] = ObjectDeletedMessage;

class ObjectDeleteMessage extends ProtocolMessage {
    constructor(objectUID, quantity) {
        super(3022);
        this.objectUID = objectUID;
        this.quantity = quantity;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectDeleteMessage.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectDeleteMessage.quantity.");
        };
    }
};
module.exports.ObjectDeleteMessage = ObjectDeleteMessage;
module.exports.messages[3022] = ObjectDeleteMessage;

class ObjectDropMessage extends ProtocolMessage {
    constructor(objectUID, quantity) {
        super(3005);
        this.objectUID = objectUID;
        this.quantity = quantity;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectDropMessage.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectDropMessage.quantity.");
        };
    }
};
module.exports.ObjectDropMessage = ObjectDropMessage;
module.exports.messages[3005] = ObjectDropMessage;

class ObjectFeedMessage extends ProtocolMessage {
    constructor(objectUID, foodUID, foodQuantity) {
        super(6290);
        this.objectUID = objectUID;
        this.foodUID = foodUID;
        this.foodQuantity = foodQuantity;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.foodUID < 0) {
            throw new Error("Forbidden value (" + this.foodUID + ") on element foodUID.");
        }
        this.buffer.writeVarInt(this.foodUID);
        if (this.foodQuantity < 0) {
            throw new Error("Forbidden value (" + this.foodQuantity + ") on element foodQuantity.");
        }
        this.buffer.writeVarInt(this.foodQuantity);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectFeedMessage.objectUID.");
        }
        this.foodUID = buffer.readVarUhInt();
        if (this.foodUID < 0) {
            throw new Error("Forbidden value (" + this.foodUID + ") on element of ObjectFeedMessage.foodUID.");
        };
        this.foodQuantity = buffer.readVarUhInt();
        if (this.foodQuantity < 0) {
            throw new Error("Forbidden value (" + this.foodQuantity + ") on element of ObjectFeedMessage.foodQuantity.");
        };
    }
};
module.exports.ObjectFeedMessage = ObjectFeedMessage;
module.exports.messages[6290] = ObjectFeedMessage;

class ObjectJobAddedMessage extends ProtocolMessage {
    constructor(jobId) {
        super(6014);
        this.jobId = jobId;
    }

    serialize() {
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
    }

    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            throw new Error("Forbidden value (" + this.jobId + ") on element of ObjectJobAddedMessage.jobId.");
        }
    }
};
module.exports.ObjectJobAddedMessage = ObjectJobAddedMessage;
module.exports.messages[6014] = ObjectJobAddedMessage;

class ObjectModifiedMessage extends ProtocolMessage {
    constructor(object) {
        super(3029);
        this.object = object;
    }

    serialize() {
        this.object.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
};
module.exports.ObjectModifiedMessage = ObjectModifiedMessage;
module.exports.messages[3029] = ObjectModifiedMessage;

class ObjectMovementMessage extends ProtocolMessage {
    constructor(objectUID, position) {
        super(3010);
        this.objectUID = objectUID;
        this.position = position;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        this.buffer.writeByte(this.position);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectMovementMessage.objectUID.");
        }
        this.position = buffer.readUnsignedByte();
        if (this.position < 0 || this.position > 255) {
            throw new Error("Forbidden value (" + this.position + ") on element of ObjectMovementMessage.position.");
        };
    }
};
module.exports.ObjectMovementMessage = ObjectMovementMessage;
module.exports.messages[3010] = ObjectMovementMessage;

class ObjectQuantityMessage extends ProtocolMessage {
    constructor(objectUID, quantity) {
        super(3023);
        this.objectUID = objectUID;
        this.quantity = quantity;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectQuantityMessage.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectQuantityMessage.quantity.");
        };
    }
};
module.exports.ObjectQuantityMessage = ObjectQuantityMessage;
module.exports.messages[3023] = ObjectQuantityMessage;

class ObjectsAddedMessage extends ProtocolMessage {
    constructor(object) {
        super(6033);
        this.object = object;
    }

    serialize() {
        this.buffer.writeShort(this.object.length);
        var _loc2_ = 0;
        while (_loc2_ < this.object.length) {
            (this.object[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.object.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ObjectsAddedMessage = ObjectsAddedMessage;
module.exports.messages[6033] = ObjectsAddedMessage;

class ObjectsDeletedMessage extends ProtocolMessage {
    constructor(objectUID) {
        super(6034);
        this.objectUID = objectUID;
    }

    serialize() {
        this.buffer.writeShort(this.objectUID.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectUID.length) {
            if (this.objectUID[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.objectUID[_loc2_] + ") on element 1 (starting at 1) of objectUID.");
            }
            this.buffer.writeVarInt(this.objectUID[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of objectUID.");
            }
            this.objectUID.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ObjectsDeletedMessage = ObjectsDeletedMessage;
module.exports.messages[6034] = ObjectsDeletedMessage;

class ObjectSetPositionMessage extends ProtocolMessage {
    constructor(objectUID, position, quantity) {
        super(3021);
        this.objectUID = objectUID;
        this.position = position;
        this.quantity = quantity;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        this.buffer.writeByte(this.position);
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectSetPositionMessage.objectUID.");
        }
        this.position = buffer.readUnsignedByte();
        if (this.position < 0 || this.position > 255) {
            throw new Error("Forbidden value (" + this.position + ") on element of ObjectSetPositionMessage.position.");
        };
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectSetPositionMessage.quantity.");
        };
    }
};
module.exports.ObjectSetPositionMessage = ObjectSetPositionMessage;
module.exports.messages[3021] = ObjectSetPositionMessage;

class ObjectsQuantityMessage extends ProtocolMessage {
    constructor(objectsUIDAndQty) {
        super(6206);
        this.objectsUIDAndQty = objectsUIDAndQty;
    }

    serialize() {
        this.buffer.writeShort(this.objectsUIDAndQty.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsUIDAndQty.length) {
            (this.objectsUIDAndQty[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemQuantity();
            _loc4_.deserialize(buffer);
            this.objectsUIDAndQty.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.ObjectsQuantityMessage = ObjectsQuantityMessage;
module.exports.messages[6206] = ObjectsQuantityMessage;

class ObjectUseMessage extends ProtocolMessage {
    constructor(objectUID) {
        super(3019);
        this.objectUID = objectUID;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectUseMessage.objectUID.");
        }
    }
};
module.exports.ObjectUseMessage = ObjectUseMessage;
module.exports.messages[3019] = ObjectUseMessage;

class ObjectUseMultipleMessage extends ObjectUseMessage {
    constructor(objectUID, quantity) {
        super(objectUID);
        this.quantity = quantity;
        this.messageId = 6234;
    }

    serialize() {
        super.serialize();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectUseMultipleMessage.quantity.");
        }
    }
};
module.exports.ObjectUseMultipleMessage = ObjectUseMultipleMessage;
module.exports.messages[6234] = ObjectUseMultipleMessage;

class ObjectUseOnCellMessage extends ObjectUseMessage {
    constructor(objectUID, cells) {
        super(objectUID);
        this.cells = cells;
        this.messageId = 3013;
    }

    serialize() {
        super.serialize();
        if (this.cells < 0 || this.cells > 559) {
            throw new Error("Forbidden value (" + this.cells + ") on element cells.");
        }
        this.buffer.writeVarShort(this.cells);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.cells = buffer.readVarUhShort();
        if (this.cells < 0 || this.cells > 559) {
            throw new Error("Forbidden value (" + this.cells + ") on element of ObjectUseOnCellMessage.cells.");
        }
    }
};
module.exports.ObjectUseOnCellMessage = ObjectUseOnCellMessage;
module.exports.messages[3013] = ObjectUseOnCellMessage;

class ObjectUseOnCharacterMessage extends ObjectUseMessage {
    constructor(objectUID, characterId) {
        super(objectUID);
        this.characterId = characterId;
        this.messageId = 3003;
    }

    serialize() {
        super.serialize();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element of ObjectUseOnCharacterMessage.characterId.");
        }
    }
};
module.exports.ObjectUseOnCharacterMessage = ObjectUseOnCharacterMessage;
module.exports.messages[3003] = ObjectUseOnCharacterMessage;

class ObtainedItemMessage extends ProtocolMessage {
    constructor(genericId, baseQuantity) {
        super(6519);
        this.genericId = genericId;
        this.baseQuantity = baseQuantity;
    }

    serialize() {
        if (this.genericId < 0) {
            throw new Error("Forbidden value (" + this.genericId + ") on element genericId.");
        }
        this.buffer.writeVarShort(this.genericId);
        if (this.baseQuantity < 0) {
            throw new Error("Forbidden value (" + this.baseQuantity + ") on element baseQuantity.");
        }
        this.buffer.writeVarInt(this.baseQuantity);
    }

    deserialize(buffer) {
        this.genericId = buffer.readVarUhShort();
        if (this.genericId < 0) {
            throw new Error("Forbidden value (" + this.genericId + ") on element of ObtainedItemMessage.genericId.");
        }
        this.baseQuantity = buffer.readVarUhInt();
        if (this.baseQuantity < 0) {
            throw new Error("Forbidden value (" + this.baseQuantity + ") on element of ObtainedItemMessage.baseQuantity.");
        };
    }
};
module.exports.ObtainedItemMessage = ObtainedItemMessage;
module.exports.messages[6519] = ObtainedItemMessage;

class ObtainedItemWithBonusMessage extends ObtainedItemMessage {
    constructor(genericId, baseQuantity, bonusQuantity) {
        super(genericId, baseQuantity);
        this.bonusQuantity = bonusQuantity;
        this.messageId = 6520;
    }

    serialize() {
        super.serialize();
        if (this.bonusQuantity < 0) {
            throw new Error("Forbidden value (" + this.bonusQuantity + ") on element bonusQuantity.");
        }
        this.buffer.writeVarInt(this.bonusQuantity);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.bonusQuantity = buffer.readVarUhInt();
        if (this.bonusQuantity < 0) {
            throw new Error("Forbidden value (" + this.bonusQuantity + ") on element of ObtainedItemWithBonusMessage.bonusQuantity.");
        }
    }
};
module.exports.ObtainedItemWithBonusMessage = ObtainedItemWithBonusMessage;
module.exports.messages[6520] = ObtainedItemWithBonusMessage;

class SetUpdateMessage extends ProtocolMessage {
    constructor(setId, setObjects, setEffects) {
        super(5503);
        this.setId = setId;
        this.setObjects = setObjects;
        this.setEffects = setEffects;
    }

    serialize() {
        if (this.setId < 0) {
            throw new Error("Forbidden value (" + this.setId + ") on element setId.");
        }
        this.buffer.writeVarShort(this.setId);
        this.buffer.writeShort(this.setObjects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.setObjects.length) {
            if (this.setObjects[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.setObjects[_loc2_] + ") on element 2 (starting at 1) of setObjects.");
            }
            this.buffer.writeVarShort(this.setObjects[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.setEffects.length);
        var _loc3_ = 0;
        while (_loc3_ < this.setEffects.length) {
            this.buffer.writeShort((this.setEffects[_loc3_]).getTypeId());
            (this.setEffects[_loc3_]).serialize(this.buffer);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc8_ = null;
        this.setId = buffer.readVarUhShort();
        if (this.setId < 0) {
            throw new Error("Forbidden value (" + this.setId + ") on element of SetUpdateMessage.setId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of setObjects.");
            }
            this.setObjects.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readUnsignedShort();
            _loc8_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc7_);
            _loc8_.deserialize(buffer);
            this.setEffects.push(_loc8_);
            _loc5_++;
        }
    }
};
module.exports.SetUpdateMessage = SetUpdateMessage;
module.exports.messages[5503] = SetUpdateMessage;

class WrapperObjectAssociatedMessage extends SymbioticObjectAssociatedMessage {
    constructor(hostUID) {
        super(hostUID);
        this.messageId = 6523;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.WrapperObjectAssociatedMessage = WrapperObjectAssociatedMessage;
module.exports.messages[6523] = WrapperObjectAssociatedMessage;

class WrapperObjectDissociateRequestMessage extends ProtocolMessage {
    constructor(hostUID, hostPos) {
        super(6524);
        this.hostUID = hostUID;
        this.hostPos = hostPos;
    }

    serialize() {
        if (this.hostUID < 0) {
            throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
        }
        this.buffer.writeVarInt(this.hostUID);
        if (this.hostPos < 0 || this.hostPos > 255) {
            throw new Error("Forbidden value (" + this.hostPos + ") on element hostPos.");
        }
        this.buffer.writeByte(this.hostPos);
    }

    deserialize(buffer) {
        this.hostUID = buffer.readVarUhInt();
        if (this.hostUID < 0) {
            throw new Error("Forbidden value (" + this.hostUID + ") on element of WrapperObjectDissociateRequestMessage.hostUID.");
        }
        this.hostPos = buffer.readUnsignedByte();
        if (this.hostPos < 0 || this.hostPos > 255) {
            throw new Error("Forbidden value (" + this.hostPos + ") on element of WrapperObjectDissociateRequestMessage.hostPos.");
        };
    }
};
module.exports.WrapperObjectDissociateRequestMessage = WrapperObjectDissociateRequestMessage;
module.exports.messages[6524] = WrapperObjectDissociateRequestMessage;

class WrapperObjectErrorMessage extends SymbioticObjectErrorMessage {
    constructor(reason, errorCode) {
        super(reason, errorCode);
        this.messageId = 6529;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.WrapperObjectErrorMessage = WrapperObjectErrorMessage;
module.exports.messages[6529] = WrapperObjectErrorMessage;

class KamasUpdateMessage extends ProtocolMessage {
    constructor(kamasTotal) {
        super(5537);
        this.kamasTotal = kamasTotal;
    }

    serialize() {
        if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamasTotal + ") on element kamasTotal.");
        }
        this.buffer.writeVarLong(this.kamasTotal);
    }

    deserialize(buffer) {
        this.kamasTotal = buffer.readVarUhLong();
        if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamasTotal + ") on element of KamasUpdateMessage.kamasTotal.");
        }
    }
};
module.exports.KamasUpdateMessage = KamasUpdateMessage;
module.exports.messages[5537] = KamasUpdateMessage;

class ObjectAveragePricesErrorMessage extends ProtocolMessage {
    constructor() {
        super(6336);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ObjectAveragePricesErrorMessage = ObjectAveragePricesErrorMessage;
module.exports.messages[6336] = ObjectAveragePricesErrorMessage;

class ObjectAveragePricesGetMessage extends ProtocolMessage {
    constructor() {
        super(6334);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.ObjectAveragePricesGetMessage = ObjectAveragePricesGetMessage;
module.exports.messages[6334] = ObjectAveragePricesGetMessage;

class ObjectAveragePricesMessage extends ProtocolMessage {
    constructor(ids, avgPrices) {
        super(6335);
        this.ids = ids;
        this.avgPrices = avgPrices;
    }

    serialize() {
        this.buffer.writeShort(this.ids.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ids.length) {
            if (this.ids[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.ids[_loc2_] + ") on element 1 (starting at 1) of ids.");
            }
            this.buffer.writeVarShort(this.ids[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.avgPrices.length);
        var _loc3_ = 0;
        while (_loc3_ < this.avgPrices.length) {
            if (this.avgPrices[_loc3_] < 0 || this.avgPrices[_loc3_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.avgPrices[_loc3_] + ") on element 2 (starting at 1) of avgPrices.");
            }
            this.buffer.writeVarLong(this.avgPrices[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = NaN;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of ids.");
            }
            this.ids.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhLong();
            if (_loc7_ < 0 || _loc7_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of avgPrices.");
            }
            this.avgPrices.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.ObjectAveragePricesMessage = ObjectAveragePricesMessage;
module.exports.messages[6335] = ObjectAveragePricesMessage;

class IdolsPresetDeleteMessage extends ProtocolMessage {
    constructor(presetId) {
        super(6602);
        this.presetId = presetId;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of IdolsPresetDeleteMessage.presetId.");
        }
    }
};
module.exports.IdolsPresetDeleteMessage = IdolsPresetDeleteMessage;
module.exports.messages[6602] = IdolsPresetDeleteMessage;

class IdolsPresetDeleteResultMessage extends ProtocolMessage {
    constructor(presetId, code) {
        super(6605);
        this.presetId = presetId;
        this.code = code;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of IdolsPresetDeleteResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            throw new Error("Forbidden value (" + this.code + ") on element of IdolsPresetDeleteResultMessage.code.");
        };
    }
};
module.exports.IdolsPresetDeleteResultMessage = IdolsPresetDeleteResultMessage;
module.exports.messages[6605] = IdolsPresetDeleteResultMessage;

class IdolsPresetSaveMessage extends ProtocolMessage {
    constructor(presetId, symbolId) {
        super(6603);
        this.presetId = presetId;
        this.symbolId = symbolId;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        if (this.symbolId < 0) {
            throw new Error("Forbidden value (" + this.symbolId + ") on element symbolId.");
        }
        this.buffer.writeByte(this.symbolId);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of IdolsPresetSaveMessage.presetId.");
        }
        this.symbolId = buffer.readByte();
        if (this.symbolId < 0) {
            throw new Error("Forbidden value (" + this.symbolId + ") on element of IdolsPresetSaveMessage.symbolId.");
        };
    }
};
module.exports.IdolsPresetSaveMessage = IdolsPresetSaveMessage;
module.exports.messages[6603] = IdolsPresetSaveMessage;

class IdolsPresetSaveResultMessage extends ProtocolMessage {
    constructor(presetId, code) {
        super(6604);
        this.presetId = presetId;
        this.code = code;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of IdolsPresetSaveResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            throw new Error("Forbidden value (" + this.code + ") on element of IdolsPresetSaveResultMessage.code.");
        };
    }
};
module.exports.IdolsPresetSaveResultMessage = IdolsPresetSaveResultMessage;
module.exports.messages[6604] = IdolsPresetSaveResultMessage;

class IdolsPresetUpdateMessage extends ProtocolMessage {
    constructor(idolsPreset) {
        super(6606);
        this.idolsPreset = idolsPreset;
    }

    serialize() {
        this.idolsPreset.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.idolsPreset = new IdolsPreset();
        this.idolsPreset.deserialize(buffer);
    }
};
module.exports.IdolsPresetUpdateMessage = IdolsPresetUpdateMessage;
module.exports.messages[6606] = IdolsPresetUpdateMessage;

class IdolsPresetUseMessage extends ProtocolMessage {
    constructor(presetId, party) {
        super(6615);
        this.presetId = presetId;
        this.party = party;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeBoolean(this.party);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of IdolsPresetUseMessage.presetId.");
        }
        this.party = buffer.readBoolean();
    }
};
module.exports.IdolsPresetUseMessage = IdolsPresetUseMessage;
module.exports.messages[6615] = IdolsPresetUseMessage;

class IdolsPresetUseResultMessage extends ProtocolMessage {
    constructor(presetId, code, missingIdols) {
        super(6614);
        this.presetId = presetId;
        this.code = code;
        this.missingIdols = missingIdols;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
        this.buffer.writeShort(this.missingIdols.length);
        var _loc2_ = 0;
        while (_loc2_ < this.missingIdols.length) {
            if (this.missingIdols[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.missingIdols[_loc2_] + ") on element 3 (starting at 1) of missingIdols.");
            }
            this.buffer.writeVarShort(this.missingIdols[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of IdolsPresetUseResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            throw new Error("Forbidden value (" + this.code + ") on element of IdolsPresetUseResultMessage.code.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of missingIdols.");
            }
            this.missingIdols.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.IdolsPresetUseResultMessage = IdolsPresetUseResultMessage;
module.exports.messages[6614] = IdolsPresetUseResultMessage;

class InventoryPresetDeleteMessage extends ProtocolMessage {
    constructor(presetId) {
        super(6169);
        this.presetId = presetId;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of InventoryPresetDeleteMessage.presetId.");
        }
    }
};
module.exports.InventoryPresetDeleteMessage = InventoryPresetDeleteMessage;
module.exports.messages[6169] = InventoryPresetDeleteMessage;

class InventoryPresetDeleteResultMessage extends ProtocolMessage {
    constructor(presetId, code) {
        super(6173);
        this.presetId = presetId;
        this.code = code;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of InventoryPresetDeleteResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            throw new Error("Forbidden value (" + this.code + ") on element of InventoryPresetDeleteResultMessage.code.");
        };
    }
};
module.exports.InventoryPresetDeleteResultMessage = InventoryPresetDeleteResultMessage;
module.exports.messages[6173] = InventoryPresetDeleteResultMessage;

class InventoryPresetItemUpdateErrorMessage extends ProtocolMessage {
    constructor(code) {
        super(6211);
        this.code = code;
    }

    serialize() {
        this.buffer.writeByte(this.code);
    }

    deserialize(buffer) {
        this.code = buffer.readByte();
        if (this.code < 0) {
            throw new Error("Forbidden value (" + this.code + ") on element of InventoryPresetItemUpdateErrorMessage.code.");
        }
    }
};
module.exports.InventoryPresetItemUpdateErrorMessage = InventoryPresetItemUpdateErrorMessage;
module.exports.messages[6211] = InventoryPresetItemUpdateErrorMessage;

class InventoryPresetItemUpdateMessage extends ProtocolMessage {
    constructor(presetId, presetItem) {
        super(6168);
        this.presetId = presetId;
        this.presetItem = presetItem;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.presetItem.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of InventoryPresetItemUpdateMessage.presetId.");
        }
        this.presetItem = new PresetItem();
        this.presetItem.deserialize(buffer);
    }
};
module.exports.InventoryPresetItemUpdateMessage = InventoryPresetItemUpdateMessage;
module.exports.messages[6168] = InventoryPresetItemUpdateMessage;

class InventoryPresetItemUpdateRequestMessage extends ProtocolMessage {
    constructor(presetId, position, objUid) {
        super(6210);
        this.presetId = presetId;
        this.position = position;
        this.objUid = objUid;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.position);
        if (this.objUid < 0) {
            throw new Error("Forbidden value (" + this.objUid + ") on element objUid.");
        }
        this.buffer.writeVarInt(this.objUid);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of InventoryPresetItemUpdateRequestMessage.presetId.");
        }
        this.position = buffer.readUnsignedByte();
        if (this.position < 0 || this.position > 255) {
            throw new Error("Forbidden value (" + this.position + ") on element of InventoryPresetItemUpdateRequestMessage.position.");
        };
        this.objUid = buffer.readVarUhInt();
        if (this.objUid < 0) {
            throw new Error("Forbidden value (" + this.objUid + ") on element of InventoryPresetItemUpdateRequestMessage.objUid.");
        };
    }
};
module.exports.InventoryPresetItemUpdateRequestMessage = InventoryPresetItemUpdateRequestMessage;
module.exports.messages[6210] = InventoryPresetItemUpdateRequestMessage;

class InventoryPresetSaveCustomMessage extends ProtocolMessage {
    constructor(presetId, symbolId, itemsPositions, itemsUids) {
        super(6329);
        this.presetId = presetId;
        this.symbolId = symbolId;
        this.itemsPositions = itemsPositions;
        this.itemsUids = itemsUids;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        if (this.symbolId < 0) {
            throw new Error("Forbidden value (" + this.symbolId + ") on element symbolId.");
        }
        this.buffer.writeByte(this.symbolId);
        this.buffer.writeShort(this.itemsPositions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.itemsPositions.length) {
            this.buffer.writeByte(this.itemsPositions[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.itemsUids.length);
        var _loc3_ = 0;
        while (_loc3_ < this.itemsUids.length) {
            if (this.itemsUids[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.itemsUids[_loc3_] + ") on element 4 (starting at 1) of itemsUids.");
            }
            this.buffer.writeVarInt(this.itemsUids[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of InventoryPresetSaveCustomMessage.presetId.");
        }
        this.symbolId = buffer.readByte();
        if (this.symbolId < 0) {
            throw new Error("Forbidden value (" + this.symbolId + ") on element of InventoryPresetSaveCustomMessage.symbolId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedByte();
            if (_loc6_ < 0 || _loc6_ > 255) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of itemsPositions.");
            }
            this.itemsPositions.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhInt();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of itemsUids.");
            }
            this.itemsUids.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.InventoryPresetSaveCustomMessage = InventoryPresetSaveCustomMessage;
module.exports.messages[6329] = InventoryPresetSaveCustomMessage;

class InventoryPresetSaveMessage extends ProtocolMessage {
    constructor(presetId, symbolId, saveEquipment) {
        super(6165);
        this.presetId = presetId;
        this.symbolId = symbolId;
        this.saveEquipment = saveEquipment;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        if (this.symbolId < 0) {
            throw new Error("Forbidden value (" + this.symbolId + ") on element symbolId.");
        }
        this.buffer.writeByte(this.symbolId);
        this.buffer.writeBoolean(this.saveEquipment);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of InventoryPresetSaveMessage.presetId.");
        }
        this.symbolId = buffer.readByte();
        if (this.symbolId < 0) {
            throw new Error("Forbidden value (" + this.symbolId + ") on element of InventoryPresetSaveMessage.symbolId.");
        };
        this.saveEquipment = buffer.readBoolean();
    }
};
module.exports.InventoryPresetSaveMessage = InventoryPresetSaveMessage;
module.exports.messages[6165] = InventoryPresetSaveMessage;

class InventoryPresetSaveResultMessage extends ProtocolMessage {
    constructor(presetId, code) {
        super(6170);
        this.presetId = presetId;
        this.code = code;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of InventoryPresetSaveResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            throw new Error("Forbidden value (" + this.code + ") on element of InventoryPresetSaveResultMessage.code.");
        };
    }
};
module.exports.InventoryPresetSaveResultMessage = InventoryPresetSaveResultMessage;
module.exports.messages[6170] = InventoryPresetSaveResultMessage;

class InventoryPresetUpdateMessage extends ProtocolMessage {
    constructor(preset) {
        super(6171);
        this.preset = preset;
    }

    serialize() {
        this.preset.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.preset = new Preset();
        this.preset.deserialize(buffer);
    }
};
module.exports.InventoryPresetUpdateMessage = InventoryPresetUpdateMessage;
module.exports.messages[6171] = InventoryPresetUpdateMessage;

class InventoryPresetUseMessage extends ProtocolMessage {
    constructor(presetId) {
        super(6167);
        this.presetId = presetId;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
    }

    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of InventoryPresetUseMessage.presetId.");
        }
    }
};
module.exports.InventoryPresetUseMessage = InventoryPresetUseMessage;
module.exports.messages[6167] = InventoryPresetUseMessage;

class InventoryPresetUseResultMessage extends ProtocolMessage {
    constructor(presetId, code, unlinkedPosition) {
        super(6163);
        this.presetId = presetId;
        this.code = code;
        this.unlinkedPosition = unlinkedPosition;
    }

    serialize() {
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
        this.buffer.writeShort(this.unlinkedPosition.length);
        var _loc2_ = 0;
        while (_loc2_ < this.unlinkedPosition.length) {
            this.buffer.writeByte(this.unlinkedPosition[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            throw new Error("Forbidden value (" + this.presetId + ") on element of InventoryPresetUseResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            throw new Error("Forbidden value (" + this.code + ") on element of InventoryPresetUseResultMessage.code.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedByte();
            if (_loc4_ < 0 || _loc4_ > 255) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of unlinkedPosition.");
            }
            this.unlinkedPosition.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.InventoryPresetUseResultMessage = InventoryPresetUseResultMessage;
module.exports.messages[6163] = InventoryPresetUseResultMessage;

class SpellListMessage extends ProtocolMessage {
    constructor(spellPrevisualization, spells) {
        super(1200);
        this.spellPrevisualization = spellPrevisualization;
        this.spells = spells;
    }

    serialize() {
        this.buffer.writeBoolean(this.spellPrevisualization);
        this.buffer.writeShort(this.spells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.spells.length) {
            (this.spells[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.spellPrevisualization = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new SpellItem();
            _loc4_.deserialize(buffer);
            this.spells.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.SpellListMessage = SpellListMessage;
module.exports.messages[1200] = SpellListMessage;

class StorageInventoryContentMessage extends InventoryContentMessage {
    constructor(objects, kamas) {
        super(objects, kamas);
        this.messageId = 5646;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.StorageInventoryContentMessage = StorageInventoryContentMessage;
module.exports.messages[5646] = StorageInventoryContentMessage;

class StorageKamasUpdateMessage extends ProtocolMessage {
    constructor(kamasTotal) {
        super(5645);
        this.kamasTotal = kamasTotal;
    }

    serialize() {
        if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamasTotal + ") on element kamasTotal.");
        }
        this.buffer.writeVarLong(this.kamasTotal);
    }

    deserialize(buffer) {
        this.kamasTotal = buffer.readVarUhLong();
        if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740990) {
            throw new Error("Forbidden value (" + this.kamasTotal + ") on element of StorageKamasUpdateMessage.kamasTotal.");
        }
    }
};
module.exports.StorageKamasUpdateMessage = StorageKamasUpdateMessage;
module.exports.messages[5645] = StorageKamasUpdateMessage;

class StorageObjectRemoveMessage extends ProtocolMessage {
    constructor(objectUID) {
        super(5648);
        this.objectUID = objectUID;
    }

    serialize() {
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
    }

    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            throw new Error("Forbidden value (" + this.objectUID + ") on element of StorageObjectRemoveMessage.objectUID.");
        }
    }
};
module.exports.StorageObjectRemoveMessage = StorageObjectRemoveMessage;
module.exports.messages[5648] = StorageObjectRemoveMessage;

class StorageObjectsRemoveMessage extends ProtocolMessage {
    constructor(objectUIDList) {
        super(6035);
        this.objectUIDList = objectUIDList;
    }

    serialize() {
        this.buffer.writeShort(this.objectUIDList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectUIDList.length) {
            if (this.objectUIDList[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.objectUIDList[_loc2_] + ") on element 1 (starting at 1) of objectUIDList.");
            }
            this.buffer.writeVarInt(this.objectUIDList[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of objectUIDList.");
            }
            this.objectUIDList.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.StorageObjectsRemoveMessage = StorageObjectsRemoveMessage;
module.exports.messages[6035] = StorageObjectsRemoveMessage;

class StorageObjectsUpdateMessage extends ProtocolMessage {
    constructor(objectList) {
        super(6036);
        this.objectList = objectList;
    }

    serialize() {
        this.buffer.writeShort(this.objectList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectList.length) {
            (this.objectList[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objectList.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.StorageObjectsUpdateMessage = StorageObjectsUpdateMessage;
module.exports.messages[6036] = StorageObjectsUpdateMessage;

class StorageObjectUpdateMessage extends ProtocolMessage {
    constructor(object) {
        super(5647);
        this.object = object;
    }

    serialize() {
        this.object.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
};
module.exports.StorageObjectUpdateMessage = StorageObjectUpdateMessage;
module.exports.messages[5647] = StorageObjectUpdateMessage;

class AccessoryPreviewErrorMessage extends ProtocolMessage {
    constructor(error) {
        super(6521);
        this.error = error;
    }

    serialize() {
        this.buffer.writeByte(this.error);
    }

    deserialize(buffer) {
        this.error = buffer.readByte();
        if (this.error < 0) {
            throw new Error("Forbidden value (" + this.error + ") on element of AccessoryPreviewErrorMessage.error.");
        }
    }
};
module.exports.AccessoryPreviewErrorMessage = AccessoryPreviewErrorMessage;
module.exports.messages[6521] = AccessoryPreviewErrorMessage;

class AccessoryPreviewMessage extends ProtocolMessage {
    constructor(look) {
        super(6517);
        this.look = look;
    }

    serialize() {
        this.look.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.look = new EntityLook();
        this.look.deserialize(buffer);
    }
};
module.exports.AccessoryPreviewMessage = AccessoryPreviewMessage;
module.exports.messages[6517] = AccessoryPreviewMessage;

class AccessoryPreviewRequestMessage extends ProtocolMessage {
    constructor(genericId) {
        super(6518);
        this.genericId = genericId;
    }

    serialize() {
        this.buffer.writeShort(this.genericId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.genericId.length) {
            if (this.genericId[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.genericId[_loc2_] + ") on element 1 (starting at 1) of genericId.");
            }
            this.buffer.writeVarShort(this.genericId[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of genericId.");
            }
            this.genericId.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.AccessoryPreviewRequestMessage = AccessoryPreviewRequestMessage;
module.exports.messages[6518] = AccessoryPreviewRequestMessage;

class PopupWarningMessage extends ProtocolMessage {
    constructor(lockDuration, author, content) {
        super(6134);
        this.lockDuration = lockDuration;
        this.author = author;
        this.content = content;
    }

    serialize() {
        if (this.lockDuration < 0 || this.lockDuration > 255) {
            throw new Error("Forbidden value (" + this.lockDuration + ") on element lockDuration.");
        }
        this.buffer.writeByte(this.lockDuration);
        this.buffer.writeUTF(this.author);
        this.buffer.writeUTF(this.content);
    }

    deserialize(buffer) {
        this.lockDuration = buffer.readUnsignedByte();
        if (this.lockDuration < 0 || this.lockDuration > 255) {
            throw new Error("Forbidden value (" + this.lockDuration + ") on element of PopupWarningMessage.lockDuration.");
        }
        this.author = buffer.readUTF();
        this.content = buffer.readUTF();;
    }
};
module.exports.PopupWarningMessage = PopupWarningMessage;
module.exports.messages[6134] = PopupWarningMessage;

class AreaFightModificatorUpdateMessage extends ProtocolMessage {
    constructor(spellPairId) {
        super(6493);
        this.spellPairId = spellPairId;
    }

    serialize() {
        this.buffer.writeInt(this.spellPairId);
    }

    deserialize(buffer) {
        this.spellPairId = buffer.readInt();
    }
};
module.exports.AreaFightModificatorUpdateMessage = AreaFightModificatorUpdateMessage;
module.exports.messages[6493] = AreaFightModificatorUpdateMessage;

class PrismAttackRequestMessage extends ProtocolMessage {
    constructor() {
        super(6042);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.PrismAttackRequestMessage = PrismAttackRequestMessage;
module.exports.messages[6042] = PrismAttackRequestMessage;

class PrismFightAddedMessage extends ProtocolMessage {
    constructor(fight) {
        super(6452);
        this.fight = fight;
    }

    serialize() {
        this.fight.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.fight = new PrismFightersInformation();
        this.fight.deserialize(buffer);
    }
};
module.exports.PrismFightAddedMessage = PrismFightAddedMessage;
module.exports.messages[6452] = PrismFightAddedMessage;

class PrismFightAttackerAddMessage extends ProtocolMessage {
    constructor(subAreaId, fightId, attacker) {
        super(5893);
        this.subAreaId = subAreaId;
        this.fightId = fightId;
        this.attacker = attacker;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeVarShort(this.fightId);
        this.buffer.writeShort(this.attacker.getTypeId());
        this.attacker.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightAttackerAddMessage.subAreaId.");
        }
        this.fightId = buffer.readVarUhShort();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of PrismFightAttackerAddMessage.fightId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        this.attacker = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc2_);
        this.attacker.deserialize(buffer);
    }
};
module.exports.PrismFightAttackerAddMessage = PrismFightAttackerAddMessage;
module.exports.messages[5893] = PrismFightAttackerAddMessage;

class PrismFightAttackerRemoveMessage extends ProtocolMessage {
    constructor(subAreaId, fightId, fighterToRemoveId) {
        super(5897);
        this.subAreaId = subAreaId;
        this.fightId = fightId;
        this.fighterToRemoveId = fighterToRemoveId;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeVarShort(this.fightId);
        if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fighterToRemoveId + ") on element fighterToRemoveId.");
        }
        this.buffer.writeVarLong(this.fighterToRemoveId);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightAttackerRemoveMessage.subAreaId.");
        }
        this.fightId = buffer.readVarUhShort();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of PrismFightAttackerRemoveMessage.fightId.");
        };
        this.fighterToRemoveId = buffer.readVarUhLong();
        if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fighterToRemoveId + ") on element of PrismFightAttackerRemoveMessage.fighterToRemoveId.");
        };
    }
};
module.exports.PrismFightAttackerRemoveMessage = PrismFightAttackerRemoveMessage;
module.exports.messages[5897] = PrismFightAttackerRemoveMessage;

class PrismFightDefenderAddMessage extends ProtocolMessage {
    constructor(subAreaId, fightId, defender) {
        super(5895);
        this.subAreaId = subAreaId;
        this.fightId = fightId;
        this.defender = defender;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeVarShort(this.fightId);
        this.buffer.writeShort(this.defender.getTypeId());
        this.defender.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightDefenderAddMessage.subAreaId.");
        }
        this.fightId = buffer.readVarUhShort();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of PrismFightDefenderAddMessage.fightId.");
        };
        var _loc2_ = buffer.readUnsignedShort();
        this.defender = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc2_);
        this.defender.deserialize(buffer);
    }
};
module.exports.PrismFightDefenderAddMessage = PrismFightDefenderAddMessage;
module.exports.messages[5895] = PrismFightDefenderAddMessage;

class PrismFightDefenderLeaveMessage extends ProtocolMessage {
    constructor(subAreaId, fightId, fighterToRemoveId) {
        super(5892);
        this.subAreaId = subAreaId;
        this.fightId = fightId;
        this.fighterToRemoveId = fighterToRemoveId;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeVarShort(this.fightId);
        if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fighterToRemoveId + ") on element fighterToRemoveId.");
        }
        this.buffer.writeVarLong(this.fighterToRemoveId);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightDefenderLeaveMessage.subAreaId.");
        }
        this.fightId = buffer.readVarUhShort();
        if (this.fightId < 0) {
            throw new Error("Forbidden value (" + this.fightId + ") on element of PrismFightDefenderLeaveMessage.fightId.");
        };
        this.fighterToRemoveId = buffer.readVarUhLong();
        if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.fighterToRemoveId + ") on element of PrismFightDefenderLeaveMessage.fighterToRemoveId.");
        };
    }
};
module.exports.PrismFightDefenderLeaveMessage = PrismFightDefenderLeaveMessage;
module.exports.messages[5892] = PrismFightDefenderLeaveMessage;

class PrismFightJoinLeaveRequestMessage extends ProtocolMessage {
    constructor(subAreaId, join) {
        super(5843);
        this.subAreaId = subAreaId;
        this.join = join;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeBoolean(this.join);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightJoinLeaveRequestMessage.subAreaId.");
        }
        this.join = buffer.readBoolean();
    }
};
module.exports.PrismFightJoinLeaveRequestMessage = PrismFightJoinLeaveRequestMessage;
module.exports.messages[5843] = PrismFightJoinLeaveRequestMessage;

class PrismFightRemovedMessage extends ProtocolMessage {
    constructor(subAreaId) {
        super(6453);
        this.subAreaId = subAreaId;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightRemovedMessage.subAreaId.");
        }
    }
};
module.exports.PrismFightRemovedMessage = PrismFightRemovedMessage;
module.exports.messages[6453] = PrismFightRemovedMessage;

class PrismFightStateUpdateMessage extends ProtocolMessage {
    constructor(state) {
        super(6040);
        this.state = state;
    }

    serialize() {
        if (this.state < 0) {
            throw new Error("Forbidden value (" + this.state + ") on element state.");
        }
        this.buffer.writeByte(this.state);
    }

    deserialize(buffer) {
        this.state = buffer.readByte();
        if (this.state < 0) {
            throw new Error("Forbidden value (" + this.state + ") on element of PrismFightStateUpdateMessage.state.");
        }
    }
};
module.exports.PrismFightStateUpdateMessage = PrismFightStateUpdateMessage;
module.exports.messages[6040] = PrismFightStateUpdateMessage;

class PrismFightSwapRequestMessage extends ProtocolMessage {
    constructor(subAreaId, targetId) {
        super(5901);
        this.subAreaId = subAreaId;
        this.targetId = targetId;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightSwapRequestMessage.subAreaId.");
        }
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.targetId + ") on element of PrismFightSwapRequestMessage.targetId.");
        };
    }
};
module.exports.PrismFightSwapRequestMessage = PrismFightSwapRequestMessage;
module.exports.messages[5901] = PrismFightSwapRequestMessage;

class PrismInfoCloseMessage extends ProtocolMessage {
    constructor() {
        super(5853);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.PrismInfoCloseMessage = PrismInfoCloseMessage;
module.exports.messages[5853] = PrismInfoCloseMessage;

class PrismInfoInValidMessage extends ProtocolMessage {
    constructor(reason) {
        super(5859);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of PrismInfoInValidMessage.reason.");
        }
    }
};
module.exports.PrismInfoInValidMessage = PrismInfoInValidMessage;
module.exports.messages[5859] = PrismInfoInValidMessage;

class PrismInfoJoinLeaveRequestMessage extends ProtocolMessage {
    constructor(join) {
        super(5844);
        this.join = join;
    }

    serialize() {
        this.buffer.writeBoolean(this.join);
    }

    deserialize(buffer) {
        this.join = buffer.readBoolean();
    }
};
module.exports.PrismInfoJoinLeaveRequestMessage = PrismInfoJoinLeaveRequestMessage;
module.exports.messages[5844] = PrismInfoJoinLeaveRequestMessage;

class PrismModuleExchangeRequestMessage extends ProtocolMessage {
    constructor() {
        super(6531);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.PrismModuleExchangeRequestMessage = PrismModuleExchangeRequestMessage;
module.exports.messages[6531] = PrismModuleExchangeRequestMessage;

class PrismSetSabotagedRefusedMessage extends ProtocolMessage {
    constructor(subAreaId, reason) {
        super(6466);
        this.subAreaId = subAreaId;
        this.reason = reason;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismSetSabotagedRefusedMessage.subAreaId.");
        }
        this.reason = buffer.readByte();
    }
};
module.exports.PrismSetSabotagedRefusedMessage = PrismSetSabotagedRefusedMessage;
module.exports.messages[6466] = PrismSetSabotagedRefusedMessage;

class PrismSetSabotagedRequestMessage extends ProtocolMessage {
    constructor(subAreaId) {
        super(6468);
        this.subAreaId = subAreaId;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismSetSabotagedRequestMessage.subAreaId.");
        }
    }
};
module.exports.PrismSetSabotagedRequestMessage = PrismSetSabotagedRequestMessage;
module.exports.messages[6468] = PrismSetSabotagedRequestMessage;

class PrismSettingsErrorMessage extends ProtocolMessage {
    constructor() {
        super(6442);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.PrismSettingsErrorMessage = PrismSettingsErrorMessage;
module.exports.messages[6442] = PrismSettingsErrorMessage;

class PrismSettingsRequestMessage extends ProtocolMessage {
    constructor(subAreaId, startDefenseTime) {
        super(6437);
        this.subAreaId = subAreaId;
        this.startDefenseTime = startDefenseTime;
    }

    serialize() {
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.startDefenseTime < 0) {
            throw new Error("Forbidden value (" + this.startDefenseTime + ") on element startDefenseTime.");
        }
        this.buffer.writeByte(this.startDefenseTime);
    }

    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismSettingsRequestMessage.subAreaId.");
        }
        this.startDefenseTime = buffer.readByte();
        if (this.startDefenseTime < 0) {
            throw new Error("Forbidden value (" + this.startDefenseTime + ") on element of PrismSettingsRequestMessage.startDefenseTime.");
        };
    }
};
module.exports.PrismSettingsRequestMessage = PrismSettingsRequestMessage;
module.exports.messages[6437] = PrismSettingsRequestMessage;

class PrismsInfoValidMessage extends ProtocolMessage {
    constructor(fights) {
        super(6451);
        this.fights = fights;
    }

    serialize() {
        this.buffer.writeShort(this.fights.length);
        var _loc2_ = 0;
        while (_loc2_ < this.fights.length) {
            (this.fights[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PrismFightersInformation();
            _loc4_.deserialize(buffer);
            this.fights.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.PrismsInfoValidMessage = PrismsInfoValidMessage;
module.exports.messages[6451] = PrismsInfoValidMessage;

class PrismsListMessage extends ProtocolMessage {
    constructor(prisms) {
        super(6440);
        this.prisms = prisms;
    }

    serialize() {
        this.buffer.writeShort(this.prisms.length);
        var _loc2_ = 0;
        while (_loc2_ < this.prisms.length) {
            this.buffer.writeShort((this.prisms[_loc2_]).getTypeId());
            (this.prisms[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(PrismSubareaEmptyInfo, _loc4_);
            _loc5_.deserialize(buffer);
            this.prisms.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.PrismsListMessage = PrismsListMessage;
module.exports.messages[6440] = PrismsListMessage;

class PrismsListRegisterMessage extends ProtocolMessage {
    constructor(listen) {
        super(6441);
        this.listen = listen;
    }

    serialize() {
        this.buffer.writeByte(this.listen);
    }

    deserialize(buffer) {
        this.listen = buffer.readByte();
        if (this.listen < 0) {
            throw new Error("Forbidden value (" + this.listen + ") on element of PrismsListRegisterMessage.listen.");
        }
    }
};
module.exports.PrismsListRegisterMessage = PrismsListRegisterMessage;
module.exports.messages[6441] = PrismsListRegisterMessage;

class PrismsListUpdateMessage extends PrismsListMessage {
    constructor(prisms) {
        super(prisms);
        this.messageId = 6438;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.PrismsListUpdateMessage = PrismsListUpdateMessage;
module.exports.messages[6438] = PrismsListUpdateMessage;

class PrismUseRequestMessage extends ProtocolMessage {
    constructor(moduleToUse) {
        super(6041);
        this.moduleToUse = moduleToUse;
    }

    serialize() {
        this.buffer.writeByte(this.moduleToUse);
    }

    deserialize(buffer) {
        this.moduleToUse = buffer.readByte();
        if (this.moduleToUse < 0) {
            throw new Error("Forbidden value (" + this.moduleToUse + ") on element of PrismUseRequestMessage.moduleToUse.");
        }
    }
};
module.exports.PrismUseRequestMessage = PrismUseRequestMessage;
module.exports.messages[6041] = PrismUseRequestMessage;

class AlignmentRankUpdateMessage extends ProtocolMessage {
    constructor(alignmentRank, verbose) {
        super(6058);
        this.alignmentRank = alignmentRank;
        this.verbose = verbose;
    }

    serialize() {
        if (this.alignmentRank < 0) {
            throw new Error("Forbidden value (" + this.alignmentRank + ") on element alignmentRank.");
        }
        this.buffer.writeByte(this.alignmentRank);
        this.buffer.writeBoolean(this.verbose);
    }

    deserialize(buffer) {
        this.alignmentRank = buffer.readByte();
        if (this.alignmentRank < 0) {
            throw new Error("Forbidden value (" + this.alignmentRank + ") on element of AlignmentRankUpdateMessage.alignmentRank.");
        }
        this.verbose = buffer.readBoolean();
    }
};
module.exports.AlignmentRankUpdateMessage = AlignmentRankUpdateMessage;
module.exports.messages[6058] = AlignmentRankUpdateMessage;

class SetEnableAVARequestMessage extends ProtocolMessage {
    constructor(enable) {
        super(6443);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.SetEnableAVARequestMessage = SetEnableAVARequestMessage;
module.exports.messages[6443] = SetEnableAVARequestMessage;

class SetEnablePVPRequestMessage extends ProtocolMessage {
    constructor(enable) {
        super(1810);
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeBoolean(this.enable);
    }

    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
};
module.exports.SetEnablePVPRequestMessage = SetEnablePVPRequestMessage;
module.exports.messages[1810] = SetEnablePVPRequestMessage;

class UpdateMapPlayersAgressableStatusMessage extends ProtocolMessage {
    constructor(playerIds, enable) {
        super(6454);
        this.playerIds = playerIds;
        this.enable = enable;
    }

    serialize() {
        this.buffer.writeShort(this.playerIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.playerIds.length) {
            if (this.playerIds[_loc2_] < 0 || this.playerIds[_loc2_] > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerIds[_loc2_] + ") on element 1 (starting at 1) of playerIds.");
            }
            this.buffer.writeVarLong(this.playerIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.enable.length);
        var _loc3_ = 0;
        while (_loc3_ < this.enable.length) {
            this.buffer.writeByte(this.enable[_loc3_]);
            _loc3_++;
        }
    }

    deserialize(buffer) {
        var _loc6_ = NaN;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhLong();
            if (_loc6_ < 0 || _loc6_ > 9007199254740990) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of playerIds.");
            }
            this.playerIds.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readByte();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of enable.");
            }
            this.enable.push(_loc7_);
            _loc5_++;
        }
    }
};
module.exports.UpdateMapPlayersAgressableStatusMessage = UpdateMapPlayersAgressableStatusMessage;
module.exports.messages[6454] = UpdateMapPlayersAgressableStatusMessage;

class UpdateSelfAgressableStatusMessage extends ProtocolMessage {
    constructor(status, probationTime) {
        super(6456);
        this.status = status;
        this.probationTime = probationTime;
    }

    serialize() {
        this.buffer.writeByte(this.status);
        if (this.probationTime < 0) {
            throw new Error("Forbidden value (" + this.probationTime + ") on element probationTime.");
        }
        this.buffer.writeInt(this.probationTime);
    }

    deserialize(buffer) {
        this.status = buffer.readByte();
        if (this.status < 0) {
            throw new Error("Forbidden value (" + this.status + ") on element of UpdateSelfAgressableStatusMessage.status.");
        }
        this.probationTime = buffer.readInt();
        if (this.probationTime < 0) {
            throw new Error("Forbidden value (" + this.probationTime + ") on element of UpdateSelfAgressableStatusMessage.probationTime.");
        };
    }
};
module.exports.UpdateSelfAgressableStatusMessage = UpdateSelfAgressableStatusMessage;
module.exports.messages[6456] = UpdateSelfAgressableStatusMessage;

class CharacterReportMessage extends ProtocolMessage {
    constructor(reportedId, reason) {
        super(6079);
        this.reportedId = reportedId;
        this.reason = reason;
    }

    serialize() {
        if (this.reportedId < 0 || this.reportedId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.reportedId + ") on element reportedId.");
        }
        this.buffer.writeVarLong(this.reportedId);
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element reason.");
        }
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reportedId = buffer.readVarUhLong();
        if (this.reportedId < 0 || this.reportedId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.reportedId + ") on element of CharacterReportMessage.reportedId.");
        }
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of CharacterReportMessage.reason.");
        };
    }
};
module.exports.CharacterReportMessage = CharacterReportMessage;
module.exports.messages[6079] = CharacterReportMessage;

class CinematicMessage extends ProtocolMessage {
    constructor(cinematicId) {
        super(6053);
        this.cinematicId = cinematicId;
    }

    serialize() {
        if (this.cinematicId < 0) {
            throw new Error("Forbidden value (" + this.cinematicId + ") on element cinematicId.");
        }
        this.buffer.writeVarShort(this.cinematicId);
    }

    deserialize(buffer) {
        this.cinematicId = buffer.readVarUhShort();
        if (this.cinematicId < 0) {
            throw new Error("Forbidden value (" + this.cinematicId + ") on element of CinematicMessage.cinematicId.");
        }
    }
};
module.exports.CinematicMessage = CinematicMessage;
module.exports.messages[6053] = CinematicMessage;

class URLOpenMessage extends ProtocolMessage {
    constructor(urlId) {
        super(6266);
        this.urlId = urlId;
    }

    serialize() {
        if (this.urlId < 0) {
            throw new Error("Forbidden value (" + this.urlId + ") on element urlId.");
        }
        this.buffer.writeByte(this.urlId);
    }

    deserialize(buffer) {
        this.urlId = buffer.readByte();
        if (this.urlId < 0) {
            throw new Error("Forbidden value (" + this.urlId + ") on element of URLOpenMessage.urlId.");
        }
    }
};
module.exports.URLOpenMessage = URLOpenMessage;
module.exports.messages[6266] = URLOpenMessage;

class ShortcutBarAddErrorMessage extends ProtocolMessage {
    constructor(error) {
        super(6227);
        this.error = error;
    }

    serialize() {
        this.buffer.writeByte(this.error);
    }

    deserialize(buffer) {
        this.error = buffer.readByte();
        if (this.error < 0) {
            throw new Error("Forbidden value (" + this.error + ") on element of ShortcutBarAddErrorMessage.error.");
        }
    }
};
module.exports.ShortcutBarAddErrorMessage = ShortcutBarAddErrorMessage;
module.exports.messages[6227] = ShortcutBarAddErrorMessage;

class ShortcutBarAddRequestMessage extends ProtocolMessage {
    constructor(barType, shortcut) {
        super(6225);
        this.barType = barType;
        this.shortcut = shortcut;
    }

    serialize() {
        this.buffer.writeByte(this.barType);
        this.buffer.writeShort(this.shortcut.getTypeId());
        this.shortcut.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarAddRequestMessage.barType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _loc2_);
        this.shortcut.deserialize(buffer);
    }
};
module.exports.ShortcutBarAddRequestMessage = ShortcutBarAddRequestMessage;
module.exports.messages[6225] = ShortcutBarAddRequestMessage;

class ShortcutBarContentMessage extends ProtocolMessage {
    constructor(barType, shortcuts) {
        super(6231);
        this.barType = barType;
        this.shortcuts = shortcuts;
    }

    serialize() {
        this.buffer.writeByte(this.barType);
        this.buffer.writeShort(this.shortcuts.length);
        var _loc2_ = 0;
        while (_loc2_ < this.shortcuts.length) {
            this.buffer.writeShort((this.shortcuts[_loc2_]).getTypeId());
            (this.shortcuts[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarContentMessage.barType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(Shortcut, _loc4_);
            _loc5_.deserialize(buffer);
            this.shortcuts.push(_loc5_);
            _loc3_++;
        }
    }
};
module.exports.ShortcutBarContentMessage = ShortcutBarContentMessage;
module.exports.messages[6231] = ShortcutBarContentMessage;

class ShortcutBarRefreshMessage extends ProtocolMessage {
    constructor(barType, shortcut) {
        super(6229);
        this.barType = barType;
        this.shortcut = shortcut;
    }

    serialize() {
        this.buffer.writeByte(this.barType);
        this.buffer.writeShort(this.shortcut.getTypeId());
        this.shortcut.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarRefreshMessage.barType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _loc2_);
        this.shortcut.deserialize(buffer);
    }
};
module.exports.ShortcutBarRefreshMessage = ShortcutBarRefreshMessage;
module.exports.messages[6229] = ShortcutBarRefreshMessage;

class ShortcutBarRemovedMessage extends ProtocolMessage {
    constructor(barType, slot) {
        super(6224);
        this.barType = barType;
        this.slot = slot;
    }

    serialize() {
        this.buffer.writeByte(this.barType);
        if (this.slot < 0 || this.slot > 99) {
            throw new Error("Forbidden value (" + this.slot + ") on element slot.");
        }
        this.buffer.writeByte(this.slot);
    }

    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarRemovedMessage.barType.");
        }
        this.slot = buffer.readByte();
        if (this.slot < 0 || this.slot > 99) {
            throw new Error("Forbidden value (" + this.slot + ") on element of ShortcutBarRemovedMessage.slot.");
        };
    }
};
module.exports.ShortcutBarRemovedMessage = ShortcutBarRemovedMessage;
module.exports.messages[6224] = ShortcutBarRemovedMessage;

class ShortcutBarRemoveErrorMessage extends ProtocolMessage {
    constructor(error) {
        super(6222);
        this.error = error;
    }

    serialize() {
        this.buffer.writeByte(this.error);
    }

    deserialize(buffer) {
        this.error = buffer.readByte();
        if (this.error < 0) {
            throw new Error("Forbidden value (" + this.error + ") on element of ShortcutBarRemoveErrorMessage.error.");
        }
    }
};
module.exports.ShortcutBarRemoveErrorMessage = ShortcutBarRemoveErrorMessage;
module.exports.messages[6222] = ShortcutBarRemoveErrorMessage;

class ShortcutBarRemoveRequestMessage extends ProtocolMessage {
    constructor(barType, slot) {
        super(6228);
        this.barType = barType;
        this.slot = slot;
    }

    serialize() {
        this.buffer.writeByte(this.barType);
        if (this.slot < 0 || this.slot > 99) {
            throw new Error("Forbidden value (" + this.slot + ") on element slot.");
        }
        this.buffer.writeByte(this.slot);
    }

    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarRemoveRequestMessage.barType.");
        }
        this.slot = buffer.readByte();
        if (this.slot < 0 || this.slot > 99) {
            throw new Error("Forbidden value (" + this.slot + ") on element of ShortcutBarRemoveRequestMessage.slot.");
        };
    }
};
module.exports.ShortcutBarRemoveRequestMessage = ShortcutBarRemoveRequestMessage;
module.exports.messages[6228] = ShortcutBarRemoveRequestMessage;

class ShortcutBarReplacedMessage extends ProtocolMessage {
    constructor(barType, shortcut) {
        super(6706);
        this.barType = barType;
        this.shortcut = shortcut;
    }

    serialize() {
        this.buffer.writeByte(this.barType);
        this.buffer.writeShort(this.shortcut.getTypeId());
        this.shortcut.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarReplacedMessage.barType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _loc2_);
        this.shortcut.deserialize(buffer);
    }
};
module.exports.ShortcutBarReplacedMessage = ShortcutBarReplacedMessage;
module.exports.messages[6706] = ShortcutBarReplacedMessage;

class ShortcutBarSwapErrorMessage extends ProtocolMessage {
    constructor(error) {
        super(6226);
        this.error = error;
    }

    serialize() {
        this.buffer.writeByte(this.error);
    }

    deserialize(buffer) {
        this.error = buffer.readByte();
        if (this.error < 0) {
            throw new Error("Forbidden value (" + this.error + ") on element of ShortcutBarSwapErrorMessage.error.");
        }
    }
};
module.exports.ShortcutBarSwapErrorMessage = ShortcutBarSwapErrorMessage;
module.exports.messages[6226] = ShortcutBarSwapErrorMessage;

class ShortcutBarSwapRequestMessage extends ProtocolMessage {
    constructor(barType, firstSlot, secondSlot) {
        super(6230);
        this.barType = barType;
        this.firstSlot = firstSlot;
        this.secondSlot = secondSlot;
    }

    serialize() {
        this.buffer.writeByte(this.barType);
        if (this.firstSlot < 0 || this.firstSlot > 99) {
            throw new Error("Forbidden value (" + this.firstSlot + ") on element firstSlot.");
        }
        this.buffer.writeByte(this.firstSlot);
        if (this.secondSlot < 0 || this.secondSlot > 99) {
            throw new Error("Forbidden value (" + this.secondSlot + ") on element secondSlot.");
        }
        this.buffer.writeByte(this.secondSlot);
    }

    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarSwapRequestMessage.barType.");
        }
        this.firstSlot = buffer.readByte();
        if (this.firstSlot < 0 || this.firstSlot > 99) {
            throw new Error("Forbidden value (" + this.firstSlot + ") on element of ShortcutBarSwapRequestMessage.firstSlot.");
        };
        this.secondSlot = buffer.readByte();
        if (this.secondSlot < 0 || this.secondSlot > 99) {
            throw new Error("Forbidden value (" + this.secondSlot + ") on element of ShortcutBarSwapRequestMessage.secondSlot.");
        };
    }
};
module.exports.ShortcutBarSwapRequestMessage = ShortcutBarSwapRequestMessage;
module.exports.messages[6230] = ShortcutBarSwapRequestMessage;

class ContactLookErrorMessage extends ProtocolMessage {
    constructor(requestId) {
        super(6045);
        this.requestId = requestId;
    }

    serialize() {
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeVarInt(this.requestId);
    }

    deserialize(buffer) {
        this.requestId = buffer.readVarUhInt();
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element of ContactLookErrorMessage.requestId.");
        }
    }
};
module.exports.ContactLookErrorMessage = ContactLookErrorMessage;
module.exports.messages[6045] = ContactLookErrorMessage;

class ContactLookMessage extends ProtocolMessage {
    constructor(requestId, playerName, playerId, look) {
        super(5934);
        this.requestId = requestId;
        this.playerName = playerName;
        this.playerId = playerId;
        this.look = look;
    }

    serialize() {
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeVarInt(this.requestId);
        this.buffer.writeUTF(this.playerName);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.look.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.requestId = buffer.readVarUhInt();
        if (this.requestId < 0) {
            throw new Error("Forbidden value (" + this.requestId + ") on element of ContactLookMessage.requestId.");
        }
        this.playerName = buffer.readUTF();
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of ContactLookMessage.playerId.");
        };
        this.look = new EntityLook();
        this.look.deserialize(buffer);
    }
};
module.exports.ContactLookMessage = ContactLookMessage;
module.exports.messages[5934] = ContactLookMessage;

class ContactLookRequestMessage extends ProtocolMessage {
    constructor(requestId, contactType) {
        super(5932);
        this.requestId = requestId;
        this.contactType = contactType;
    }

    serialize() {
        if (this.requestId < 0 || this.requestId > 255) {
            throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeByte(this.requestId);
        this.buffer.writeByte(this.contactType);
    }

    deserialize(buffer) {
        this.requestId = buffer.readUnsignedByte();
        if (this.requestId < 0 || this.requestId > 255) {
            throw new Error("Forbidden value (" + this.requestId + ") on element of ContactLookRequestMessage.requestId.");
        }
        this.contactType = buffer.readByte();
        if (this.contactType < 0) {
            throw new Error("Forbidden value (" + this.contactType + ") on element of ContactLookRequestMessage.contactType.");
        };
    }
};
module.exports.ContactLookRequestMessage = ContactLookRequestMessage;
module.exports.messages[5932] = ContactLookRequestMessage;

class ContactLookRequestByIdMessage extends ContactLookRequestMessage {
    constructor(requestId, contactType, playerId) {
        super(requestId, contactType);
        this.playerId = playerId;
        this.messageId = 5935;
    }

    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.playerId + ") on element of ContactLookRequestByIdMessage.playerId.");
        }
    }
};
module.exports.ContactLookRequestByIdMessage = ContactLookRequestByIdMessage;
module.exports.messages[5935] = ContactLookRequestByIdMessage;

class ContactLookRequestByNameMessage extends ContactLookRequestMessage {
    constructor(requestId, contactType, playerName) {
        super(requestId, contactType);
        this.playerName = playerName;
        this.messageId = 5933;
    }

    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.playerName);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerName = buffer.readUTF();
    }
};
module.exports.ContactLookRequestByNameMessage = ContactLookRequestByNameMessage;
module.exports.messages[5933] = ContactLookRequestByNameMessage;

class StartupActionAddMessage extends ProtocolMessage {
    constructor(newAction) {
        super(6538);
        this.newAction = newAction;
    }

    serialize() {
        this.newAction.serialize(this.buffer);
    }

    deserialize(buffer) {
        this.newAction = new StartupActionAddObject();
        this.newAction.deserialize(buffer);
    }
};
module.exports.StartupActionAddMessage = StartupActionAddMessage;
module.exports.messages[6538] = StartupActionAddMessage;

class StartupActionFinishedMessage extends ProtocolMessage {
    constructor(success, actionId, automaticAction) {
        super(1304);
        this.success = success;
        this.actionId = actionId;
        this.automaticAction = automaticAction;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.success);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.automaticAction);
        this.buffer.writeByte(_loc2_);
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        this.buffer.writeInt(this.actionId);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
        this.actionId = buffer.readInt();
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element of StartupActionFinishedMessage.actionId.");
        }
    }
};
module.exports.StartupActionFinishedMessage = StartupActionFinishedMessage;
module.exports.messages[1304] = StartupActionFinishedMessage;

class StartupActionsAllAttributionMessage extends ProtocolMessage {
    constructor(characterId) {
        super(6537);
        this.characterId = characterId;
    }

    serialize() {
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }

    deserialize(buffer) {
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element of StartupActionsAllAttributionMessage.characterId.");
        }
    }
};
module.exports.StartupActionsAllAttributionMessage = StartupActionsAllAttributionMessage;
module.exports.messages[6537] = StartupActionsAllAttributionMessage;

class StartupActionsExecuteMessage extends ProtocolMessage {
    constructor() {
        super(1302);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.StartupActionsExecuteMessage = StartupActionsExecuteMessage;
module.exports.messages[1302] = StartupActionsExecuteMessage;

class StartupActionsListMessage extends ProtocolMessage {
    constructor(actions) {
        super(1301);
        this.actions = actions;
    }

    serialize() {
        this.buffer.writeShort(this.actions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.actions.length) {
            (this.actions[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new StartupActionAddObject();
            _loc4_.deserialize(buffer);
            this.actions.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.StartupActionsListMessage = StartupActionsListMessage;
module.exports.messages[1301] = StartupActionsListMessage;

class StartupActionsObjetAttributionMessage extends ProtocolMessage {
    constructor(actionId, characterId) {
        super(1303);
        this.actionId = actionId;
        this.characterId = characterId;
    }

    serialize() {
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        this.buffer.writeInt(this.actionId);
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }

    deserialize(buffer) {
        this.actionId = buffer.readInt();
        if (this.actionId < 0) {
            throw new Error("Forbidden value (" + this.actionId + ") on element of StartupActionsObjetAttributionMessage.actionId.");
        }
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            throw new Error("Forbidden value (" + this.characterId + ") on element of StartupActionsObjetAttributionMessage.characterId.");
        };
    }
};
module.exports.StartupActionsObjetAttributionMessage = StartupActionsObjetAttributionMessage;
module.exports.messages[1303] = StartupActionsObjetAttributionMessage;

class SubscriptionLimitationMessage extends ProtocolMessage {
    constructor(reason) {
        super(5542);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of SubscriptionLimitationMessage.reason.");
        }
    }
};
module.exports.SubscriptionLimitationMessage = SubscriptionLimitationMessage;
module.exports.messages[5542] = SubscriptionLimitationMessage;

class SubscriptionZoneMessage extends ProtocolMessage {
    constructor(active) {
        super(5573);
        this.active = active;
    }

    serialize() {
        this.buffer.writeBoolean(this.active);
    }

    deserialize(buffer) {
        this.active = buffer.readBoolean();
    }
};
module.exports.SubscriptionZoneMessage = SubscriptionZoneMessage;
module.exports.messages[5573] = SubscriptionZoneMessage;

class OrnamentGainedMessage extends ProtocolMessage {
    constructor(ornamentId) {
        super(6368);
        this.ornamentId = ornamentId;
    }

    serialize() {
        if (this.ornamentId < 0) {
            throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
        }
        this.buffer.writeShort(this.ornamentId);
    }

    deserialize(buffer) {
        this.ornamentId = buffer.readShort();
        if (this.ornamentId < 0) {
            throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentGainedMessage.ornamentId.");
        }
    }
};
module.exports.OrnamentGainedMessage = OrnamentGainedMessage;
module.exports.messages[6368] = OrnamentGainedMessage;

class OrnamentSelectedMessage extends ProtocolMessage {
    constructor(ornamentId) {
        super(6369);
        this.ornamentId = ornamentId;
    }

    serialize() {
        if (this.ornamentId < 0) {
            throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
        }
        this.buffer.writeVarShort(this.ornamentId);
    }

    deserialize(buffer) {
        this.ornamentId = buffer.readVarUhShort();
        if (this.ornamentId < 0) {
            throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentSelectedMessage.ornamentId.");
        }
    }
};
module.exports.OrnamentSelectedMessage = OrnamentSelectedMessage;
module.exports.messages[6369] = OrnamentSelectedMessage;

class OrnamentSelectErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6370);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of OrnamentSelectErrorMessage.reason.");
        }
    }
};
module.exports.OrnamentSelectErrorMessage = OrnamentSelectErrorMessage;
module.exports.messages[6370] = OrnamentSelectErrorMessage;

class OrnamentSelectRequestMessage extends ProtocolMessage {
    constructor(ornamentId) {
        super(6374);
        this.ornamentId = ornamentId;
    }

    serialize() {
        if (this.ornamentId < 0) {
            throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
        }
        this.buffer.writeVarShort(this.ornamentId);
    }

    deserialize(buffer) {
        this.ornamentId = buffer.readVarUhShort();
        if (this.ornamentId < 0) {
            throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentSelectRequestMessage.ornamentId.");
        }
    }
};
module.exports.OrnamentSelectRequestMessage = OrnamentSelectRequestMessage;
module.exports.messages[6374] = OrnamentSelectRequestMessage;

class TitleGainedMessage extends ProtocolMessage {
    constructor(titleId) {
        super(6364);
        this.titleId = titleId;
    }

    serialize() {
        if (this.titleId < 0) {
            throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
        }
        this.buffer.writeVarShort(this.titleId);
    }

    deserialize(buffer) {
        this.titleId = buffer.readVarUhShort();
        if (this.titleId < 0) {
            throw new Error("Forbidden value (" + this.titleId + ") on element of TitleGainedMessage.titleId.");
        }
    }
};
module.exports.TitleGainedMessage = TitleGainedMessage;
module.exports.messages[6364] = TitleGainedMessage;

class TitleLostMessage extends ProtocolMessage {
    constructor(titleId) {
        super(6371);
        this.titleId = titleId;
    }

    serialize() {
        if (this.titleId < 0) {
            throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
        }
        this.buffer.writeVarShort(this.titleId);
    }

    deserialize(buffer) {
        this.titleId = buffer.readVarUhShort();
        if (this.titleId < 0) {
            throw new Error("Forbidden value (" + this.titleId + ") on element of TitleLostMessage.titleId.");
        }
    }
};
module.exports.TitleLostMessage = TitleLostMessage;
module.exports.messages[6371] = TitleLostMessage;

class TitlesAndOrnamentsListMessage extends ProtocolMessage {
    constructor(titles, ornaments, activeTitle, activeOrnament) {
        super(6367);
        this.titles = titles;
        this.ornaments = ornaments;
        this.activeTitle = activeTitle;
        this.activeOrnament = activeOrnament;
    }

    serialize() {
        this.buffer.writeShort(this.titles.length);
        var _loc2_ = 0;
        while (_loc2_ < this.titles.length) {
            if (this.titles[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.titles[_loc2_] + ") on element 1 (starting at 1) of titles.");
            }
            this.buffer.writeVarShort(this.titles[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.ornaments.length);
        var _loc3_ = 0;
        while (_loc3_ < this.ornaments.length) {
            if (this.ornaments[_loc3_] < 0) {
                throw new Error("Forbidden value (" + this.ornaments[_loc3_] + ") on element 2 (starting at 1) of ornaments.");
            }
            this.buffer.writeVarShort(this.ornaments[_loc3_]);
            _loc3_++;
        }
        if (this.activeTitle < 0) {
            throw new Error("Forbidden value (" + this.activeTitle + ") on element activeTitle.");
        }
        this.buffer.writeVarShort(this.activeTitle);
        if (this.activeOrnament < 0) {
            throw new Error("Forbidden value (" + this.activeOrnament + ") on element activeOrnament.");
        }
        this.buffer.writeVarShort(this.activeOrnament);
    }

    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                throw new Error("Forbidden value (" + _loc6_ + ") on elements of titles.");
            }
            this.titles.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0) {
                throw new Error("Forbidden value (" + _loc7_ + ") on elements of ornaments.");
            }
            this.ornaments.push(_loc7_);
            _loc5_++;
        }
        this._activeTitleFunc(buffer);
        this.activeOrnament = buffer.readVarUhShort();
        if (this.activeOrnament < 0) {
            throw new Error("Forbidden value (" + this.activeOrnament + ") on element of TitlesAndOrnamentsListMessage.activeOrnament.");
        }
    }
};
module.exports.TitlesAndOrnamentsListMessage = TitlesAndOrnamentsListMessage;
module.exports.messages[6367] = TitlesAndOrnamentsListMessage;

class TitlesAndOrnamentsListRequestMessage extends ProtocolMessage {
    constructor() {
        super(6363);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.TitlesAndOrnamentsListRequestMessage = TitlesAndOrnamentsListRequestMessage;
module.exports.messages[6363] = TitlesAndOrnamentsListRequestMessage;

class TitleSelectedMessage extends ProtocolMessage {
    constructor(titleId) {
        super(6366);
        this.titleId = titleId;
    }

    serialize() {
        if (this.titleId < 0) {
            throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
        }
        this.buffer.writeVarShort(this.titleId);
    }

    deserialize(buffer) {
        this.titleId = buffer.readVarUhShort();
        if (this.titleId < 0) {
            throw new Error("Forbidden value (" + this.titleId + ") on element of TitleSelectedMessage.titleId.");
        }
    }
};
module.exports.TitleSelectedMessage = TitleSelectedMessage;
module.exports.messages[6366] = TitleSelectedMessage;

class TitleSelectErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6373);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of TitleSelectErrorMessage.reason.");
        }
    }
};
module.exports.TitleSelectErrorMessage = TitleSelectErrorMessage;
module.exports.messages[6373] = TitleSelectErrorMessage;

class TitleSelectRequestMessage extends ProtocolMessage {
    constructor(titleId) {
        super(6365);
        this.titleId = titleId;
    }

    serialize() {
        if (this.titleId < 0) {
            throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
        }
        this.buffer.writeVarShort(this.titleId);
    }

    deserialize(buffer) {
        this.titleId = buffer.readVarUhShort();
        if (this.titleId < 0) {
            throw new Error("Forbidden value (" + this.titleId + ") on element of TitleSelectRequestMessage.titleId.");
        }
    }
};
module.exports.TitleSelectRequestMessage = TitleSelectRequestMessage;
module.exports.messages[6365] = TitleSelectRequestMessage;

class ClientUIOpenedMessage extends ProtocolMessage {
    constructor(type) {
        super(6459);
        this.type = type;
    }

    serialize() {
        this.buffer.writeByte(this.type);
    }

    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of ClientUIOpenedMessage.type.");
        }
    }
};
module.exports.ClientUIOpenedMessage = ClientUIOpenedMessage;
module.exports.messages[6459] = ClientUIOpenedMessage;

class ClientUIOpenedByObjectMessage extends ClientUIOpenedMessage {
    constructor(type, uid) {
        super(type);
        this.uid = uid;
        this.messageId = 6463;
    }

    serialize() {
        super.serialize();
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element uid.");
        }
        this.buffer.writeVarInt(this.uid);
    }

    deserialize(buffer) {
        super.deserialize(buffer);
        this.uid = buffer.readVarUhInt();
        if (this.uid < 0) {
            throw new Error("Forbidden value (" + this.uid + ") on element of ClientUIOpenedByObjectMessage.uid.");
        }
    }
};
module.exports.ClientUIOpenedByObjectMessage = ClientUIOpenedByObjectMessage;
module.exports.messages[6463] = ClientUIOpenedByObjectMessage;

class ProtocolRequired extends ProtocolMessage {
    constructor(requiredVersion, currentVersion) {
        super(1);
        this.requiredVersion = requiredVersion;
        this.currentVersion = currentVersion;
    }

    serialize() {
        if (this.requiredVersion < 0) {
            throw new Error("Forbidden value (" + this.requiredVersion + ") on element requiredVersion.");
        }
        this.buffer.writeInt(this.requiredVersion);
        if (this.currentVersion < 0) {
            throw new Error("Forbidden value (" + this.currentVersion + ") on element currentVersion.");
        }
        this.buffer.writeInt(this.currentVersion);
    }

    deserialize(buffer) {
        this.requiredVersion = buffer.readInt();
        if (this.requiredVersion < 0) {
            throw new Error("Forbidden value (" + this.requiredVersion + ") on element of ProtocolRequired.requiredVersion.");
        }
        this.currentVersion = buffer.readInt();
        if (this.currentVersion < 0) {
            throw new Error("Forbidden value (" + this.currentVersion + ") on element of ProtocolRequired.currentVersion.");
        };
    }
};
module.exports.ProtocolRequired = ProtocolRequired;
module.exports.messages[1] = ProtocolRequired;

class LoginQueueStatusMessage extends ProtocolMessage {
    constructor(position, total) {
        super(10);
        this.position = position;
        this.total = total;
    }

    serialize() {
        if (this.position < 0 || this.position > 65535) {
            throw new Error("Forbidden value (" + this.position + ") on element position.");
        }
        this.buffer.writeShort(this.position);
        if (this.total < 0 || this.total > 65535) {
            throw new Error("Forbidden value (" + this.total + ") on element total.");
        }
        this.buffer.writeShort(this.total);
    }

    deserialize(buffer) {
        this.position = buffer.readUnsignedShort();
        if (this.position < 0 || this.position > 65535) {
            throw new Error("Forbidden value (" + this.position + ") on element of LoginQueueStatusMessage.position.");
        }
        this.total = buffer.readUnsignedShort();
        if (this.total < 0 || this.total > 65535) {
            throw new Error("Forbidden value (" + this.total + ") on element of LoginQueueStatusMessage.total.");
        };
    }
};
module.exports.LoginQueueStatusMessage = LoginQueueStatusMessage;
module.exports.messages[10] = LoginQueueStatusMessage;

class QueueStatusMessage extends ProtocolMessage {
    constructor(position, total) {
        super(6100);
        this.position = position;
        this.total = total;
    }

    serialize() {
        if (this.position < 0 || this.position > 65535) {
            throw new Error("Forbidden value (" + this.position + ") on element position.");
        }
        this.buffer.writeShort(this.position);
        if (this.total < 0 || this.total > 65535) {
            throw new Error("Forbidden value (" + this.total + ") on element total.");
        }
        this.buffer.writeShort(this.total);
    }

    deserialize(buffer) {
        this.position = buffer.readUnsignedShort();
        if (this.position < 0 || this.position > 65535) {
            throw new Error("Forbidden value (" + this.position + ") on element of QueueStatusMessage.position.");
        }
        this.total = buffer.readUnsignedShort();
        if (this.total < 0 || this.total > 65535) {
            throw new Error("Forbidden value (" + this.total + ") on element of QueueStatusMessage.total.");
        };
    }
};
module.exports.QueueStatusMessage = QueueStatusMessage;
module.exports.messages[6100] = QueueStatusMessage;

class TrustStatusMessage extends ProtocolMessage {
    constructor(trusted, certified) {
        super(6267);
        this.trusted = trusted;
        this.certified = certified;
    }

    serialize() {
        var _loc2_ = 0;
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.trusted);
        _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.certified);
        this.buffer.writeByte(_loc2_);
    }

    deserialize(buffer) {
        this.deserializeByteBoxes(buffer);
    }
};
module.exports.TrustStatusMessage = TrustStatusMessage;
module.exports.messages[6267] = TrustStatusMessage;

class CheckFileMessage extends ProtocolMessage {
    constructor(filenameHash, type, value) {
        super(6156);
        this.filenameHash = filenameHash;
        this.type = type;
        this.value = value;
    }

    serialize() {
        this.buffer.writeUTF(this.filenameHash);
        this.buffer.writeByte(this.type);
        this.buffer.writeUTF(this.value);
    }

    deserialize(buffer) {
        this.filenameHash = buffer.readUTF();
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of CheckFileMessage.type.");
        }
        this.value = buffer.readUTF();;
    }
};
module.exports.CheckFileMessage = CheckFileMessage;
module.exports.messages[6156] = CheckFileMessage;

class CheckFileRequestMessage extends ProtocolMessage {
    constructor(filename, type) {
        super(6154);
        this.filename = filename;
        this.type = type;
    }

    serialize() {
        this.buffer.writeUTF(this.filename);
        this.buffer.writeByte(this.type);
    }

    deserialize(buffer) {
        this.filename = buffer.readUTF();
        this.type = buffer.readByte();
        if (this.type < 0) {
            throw new Error("Forbidden value (" + this.type + ") on element of CheckFileRequestMessage.type.");
        }
    }
};
module.exports.CheckFileRequestMessage = CheckFileRequestMessage;
module.exports.messages[6154] = CheckFileRequestMessage;

class CheckIntegrityMessage extends ProtocolMessage {
    constructor(data) {
        super(6372);
        this.data = data;
    }

    serialize() {
        this.buffer.writeVarInt(this.data.length);
        var _loc2_ = 0;
        while (_loc2_ < this.data.length) {
            this.buffer.writeByte(this.data[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.data.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.CheckIntegrityMessage = CheckIntegrityMessage;
module.exports.messages[6372] = CheckIntegrityMessage;

class ClientKeyMessage extends ProtocolMessage {
    constructor(key) {
        super(5607);
        this.key = key;
    }

    serialize() {
        this.buffer.writeUTF(this.key);
    }

    deserialize(buffer) {
        this.key = buffer.readUTF();
    }
};
module.exports.ClientKeyMessage = ClientKeyMessage;
module.exports.messages[5607] = ClientKeyMessage;

class RawDataMessage extends ProtocolMessage {
    constructor(content) {
        super(6253);
        this.content = content;
    }

    serialize() {
        this.buffer.writeVarInt(this.content.length);
        var _loc2_ = 0;
        while (_loc2_ < this.content.length) {
            this.buffer.writeByte(this.content[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc2_ = buffer.readVarInt();
        buffer.readBytes(this.content, 0, _loc2_);
    }
};
module.exports.RawDataMessage = RawDataMessage;
module.exports.messages[6253] = RawDataMessage;

class SystemMessageDisplayMessage extends ProtocolMessage {
    constructor(hangUp, msgId, parameters) {
        super(189);
        this.hangUp = hangUp;
        this.msgId = msgId;
        this.parameters = parameters;
    }

    serialize() {
        this.buffer.writeBoolean(this.hangUp);
        if (this.msgId < 0) {
            throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
        }
        this.buffer.writeVarShort(this.msgId);
        this.buffer.writeShort(this.parameters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parameters.length) {
            this.buffer.writeUTF(this.parameters[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        this.hangUp = buffer.readBoolean();
        this.msgId = buffer.readVarUhShort();
        if (this.msgId < 0) {
            throw new Error("Forbidden value (" + this.msgId + ") on element of SystemMessageDisplayMessage.msgId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.parameters.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.SystemMessageDisplayMessage = SystemMessageDisplayMessage;
module.exports.messages[189] = SystemMessageDisplayMessage;

class SubscriptionUpdateMessage extends ProtocolMessage {
    constructor(timestamp) {
        super(6616);
        this.timestamp = timestamp;
    }

    serialize() {
        if (this.timestamp < -9007199254740990 || this.timestamp > 9007199254740990) {
            throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
        }
        this.buffer.writeDouble(this.timestamp);
    }

    deserialize(buffer) {
        this.timestamp = buffer.readDouble();
        if (this.timestamp < -9007199254740990 || this.timestamp > 9007199254740990) {
            throw new Error("Forbidden value (" + this.timestamp + ") on element of SubscriptionUpdateMessage.timestamp.");
        }
    }
};
module.exports.SubscriptionUpdateMessage = SubscriptionUpdateMessage;
module.exports.messages[6616] = SubscriptionUpdateMessage;

class DownloadCurrentSpeedMessage extends ProtocolMessage {
    constructor(downloadSpeed) {
        super(1511);
        this.downloadSpeed = downloadSpeed;
    }

    serialize() {
        if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
            throw new Error("Forbidden value (" + this.downloadSpeed + ") on element downloadSpeed.");
        }
        this.buffer.writeByte(this.downloadSpeed);
    }

    deserialize(buffer) {
        this.downloadSpeed = buffer.readByte();
        if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
            throw new Error("Forbidden value (" + this.downloadSpeed + ") on element of DownloadCurrentSpeedMessage.downloadSpeed.");
        }
    }
};
module.exports.DownloadCurrentSpeedMessage = DownloadCurrentSpeedMessage;
module.exports.messages[1511] = DownloadCurrentSpeedMessage;

class DownloadErrorMessage extends ProtocolMessage {
    constructor(errorId, message, helpUrl) {
        super(1513);
        this.errorId = errorId;
        this.message = message;
        this.helpUrl = helpUrl;
    }

    serialize() {
        this.buffer.writeByte(this.errorId);
        this.buffer.writeUTF(this.message);
        this.buffer.writeUTF(this.helpUrl);
    }

    deserialize(buffer) {
        this.errorId = buffer.readByte();
        if (this.errorId < 0) {
            throw new Error("Forbidden value (" + this.errorId + ") on element of DownloadErrorMessage.errorId.");
        }
        this.message = buffer.readUTF();
        this.helpUrl = buffer.readUTF();;
    }
};
module.exports.DownloadErrorMessage = DownloadErrorMessage;
module.exports.messages[1513] = DownloadErrorMessage;

class DownloadGetCurrentSpeedRequestMessage extends ProtocolMessage {
    constructor() {
        super(1510);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.DownloadGetCurrentSpeedRequestMessage = DownloadGetCurrentSpeedRequestMessage;
module.exports.messages[1510] = DownloadGetCurrentSpeedRequestMessage;

class DownloadPartMessage extends ProtocolMessage {
    constructor(id) {
        super(1503);
        this.id = id;
    }

    serialize() {
        this.buffer.writeUTF(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readUTF();
    }
};
module.exports.DownloadPartMessage = DownloadPartMessage;
module.exports.messages[1503] = DownloadPartMessage;

class DownloadSetSpeedRequestMessage extends ProtocolMessage {
    constructor(downloadSpeed) {
        super(1512);
        this.downloadSpeed = downloadSpeed;
    }

    serialize() {
        if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
            throw new Error("Forbidden value (" + this.downloadSpeed + ") on element downloadSpeed.");
        }
        this.buffer.writeByte(this.downloadSpeed);
    }

    deserialize(buffer) {
        this.downloadSpeed = buffer.readByte();
        if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
            throw new Error("Forbidden value (" + this.downloadSpeed + ") on element of DownloadSetSpeedRequestMessage.downloadSpeed.");
        }
    }
};
module.exports.DownloadSetSpeedRequestMessage = DownloadSetSpeedRequestMessage;
module.exports.messages[1512] = DownloadSetSpeedRequestMessage;

class GetPartInfoMessage extends ProtocolMessage {
    constructor(id) {
        super(1506);
        this.id = id;
    }

    serialize() {
        this.buffer.writeUTF(this.id);
    }

    deserialize(buffer) {
        this.id = buffer.readUTF();
    }
};
module.exports.GetPartInfoMessage = GetPartInfoMessage;
module.exports.messages[1506] = GetPartInfoMessage;

class GetPartsListMessage extends ProtocolMessage {
    constructor() {
        super(1501);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.GetPartsListMessage = GetPartsListMessage;
module.exports.messages[1501] = GetPartsListMessage;

class PartInfoMessage extends ProtocolMessage {
    constructor(part, installationPercent) {
        super(1508);
        this.part = part;
        this.installationPercent = installationPercent;
    }

    serialize() {
        this.part.serialize(this.buffer);
        this.buffer.writeFloat(this.installationPercent);
    }

    deserialize(buffer) {
        this.part = new ContentPart();
        this.part.deserialize(buffer);
        this.installationPercent = buffer.readFloat();
    }
};
module.exports.PartInfoMessage = PartInfoMessage;
module.exports.messages[1508] = PartInfoMessage;

class PartsListMessage extends ProtocolMessage {
    constructor(parts) {
        super(1502);
        this.parts = parts;
    }

    serialize() {
        this.buffer.writeShort(this.parts.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parts.length) {
            (this.parts[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ContentPart();
            _loc4_.deserialize(buffer);
            this.parts.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.PartsListMessage = PartsListMessage;
module.exports.messages[1502] = PartsListMessage;

class MailStatusMessage extends ProtocolMessage {
    constructor(unread, total) {
        super(6275);
        this.unread = unread;
        this.total = total;
    }

    serialize() {
        if (this.unread < 0) {
            throw new Error("Forbidden value (" + this.unread + ") on element unread.");
        }
        this.buffer.writeVarShort(this.unread);
        if (this.total < 0) {
            throw new Error("Forbidden value (" + this.total + ") on element total.");
        }
        this.buffer.writeVarShort(this.total);
    }

    deserialize(buffer) {
        this.unread = buffer.readVarUhShort();
        if (this.unread < 0) {
            throw new Error("Forbidden value (" + this.unread + ") on element of MailStatusMessage.unread.");
        }
        this.total = buffer.readVarUhShort();
        if (this.total < 0) {
            throw new Error("Forbidden value (" + this.total + ") on element of MailStatusMessage.total.");
        };
    }
};
module.exports.MailStatusMessage = MailStatusMessage;
module.exports.messages[6275] = MailStatusMessage;

class NewMailMessage extends MailStatusMessage {
    constructor(unread, total, sendersAccountId) {
        super(unread, total);
        this.sendersAccountId = sendersAccountId;
        this.messageId = 6292;
    }

    serialize() {
        super.serialize();
        this.buffer.writeShort(this.sendersAccountId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.sendersAccountId.length) {
            if (this.sendersAccountId[_loc2_] < 0) {
                throw new Error("Forbidden value (" + this.sendersAccountId[_loc2_] + ") on element 1 (starting at 1) of sendersAccountId.");
            }
            this.buffer.writeInt(this.sendersAccountId[_loc2_]);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            if (_loc4_ < 0) {
                throw new Error("Forbidden value (" + _loc4_ + ") on elements of sendersAccountId.");
            }
            this.sendersAccountId.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.NewMailMessage = NewMailMessage;
module.exports.messages[6292] = NewMailMessage;

class HaapiApiKeyMessage extends ProtocolMessage {
    constructor(returnType, keyType, token) {
        super(6649);
        this.returnType = returnType;
        this.keyType = keyType;
        this.token = token;
    }

    serialize() {
        this.buffer.writeByte(this.returnType);
        this.buffer.writeByte(this.keyType);
        this.buffer.writeUTF(this.token);
    }

    deserialize(buffer) {
        this.returnType = buffer.readByte();
        if (this.returnType < 0) {
            throw new Error("Forbidden value (" + this.returnType + ") on element of HaapiApiKeyMessage.returnType.");
        }
        this.keyType = buffer.readByte();
        if (this.keyType < 0) {
            throw new Error("Forbidden value (" + this.keyType + ") on element of HaapiApiKeyMessage.keyType.");
        };
        this.token = buffer.readUTF();
    }
};
module.exports.HaapiApiKeyMessage = HaapiApiKeyMessage;
module.exports.messages[6649] = HaapiApiKeyMessage;

class HaapiApiKeyRequestMessage extends ProtocolMessage {
    constructor(keyType) {
        super(6648);
        this.keyType = keyType;
    }

    serialize() {
        this.buffer.writeByte(this.keyType);
    }

    deserialize(buffer) {
        this.keyType = buffer.readByte();
        if (this.keyType < 0) {
            throw new Error("Forbidden value (" + this.keyType + ") on element of HaapiApiKeyRequestMessage.keyType.");
        }
    }
};
module.exports.HaapiApiKeyRequestMessage = HaapiApiKeyRequestMessage;
module.exports.messages[6648] = HaapiApiKeyRequestMessage;

class KrosmasterAuthTokenErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6345);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of KrosmasterAuthTokenErrorMessage.reason.");
        }
    }
};
module.exports.KrosmasterAuthTokenErrorMessage = KrosmasterAuthTokenErrorMessage;
module.exports.messages[6345] = KrosmasterAuthTokenErrorMessage;

class KrosmasterAuthTokenMessage extends ProtocolMessage {
    constructor(token) {
        super(6351);
        this.token = token;
    }

    serialize() {
        this.buffer.writeUTF(this.token);
    }

    deserialize(buffer) {
        this.token = buffer.readUTF();
    }
};
module.exports.KrosmasterAuthTokenMessage = KrosmasterAuthTokenMessage;
module.exports.messages[6351] = KrosmasterAuthTokenMessage;

class KrosmasterAuthTokenRequestMessage extends ProtocolMessage {
    constructor() {
        super(6346);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.KrosmasterAuthTokenRequestMessage = KrosmasterAuthTokenRequestMessage;
module.exports.messages[6346] = KrosmasterAuthTokenRequestMessage;

class KrosmasterInventoryErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6343);
        this.reason = reason;
    }

    serialize() {
        this.buffer.writeByte(this.reason);
    }

    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            throw new Error("Forbidden value (" + this.reason + ") on element of KrosmasterInventoryErrorMessage.reason.");
        }
    }
};
module.exports.KrosmasterInventoryErrorMessage = KrosmasterInventoryErrorMessage;
module.exports.messages[6343] = KrosmasterInventoryErrorMessage;

class KrosmasterInventoryMessage extends ProtocolMessage {
    constructor(figures) {
        super(6350);
        this.figures = figures;
    }

    serialize() {
        this.buffer.writeShort(this.figures.length);
        var _loc2_ = 0;
        while (_loc2_ < this.figures.length) {
            (this.figures[_loc2_]).serialize(this.buffer);
            _loc2_++;
        }
    }

    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new KrosmasterFigure();
            _loc4_.deserialize(buffer);
            this.figures.push(_loc4_);
            _loc3_++;
        }
    }
};
module.exports.KrosmasterInventoryMessage = KrosmasterInventoryMessage;
module.exports.messages[6350] = KrosmasterInventoryMessage;

class KrosmasterInventoryRequestMessage extends ProtocolMessage {
    constructor() {
        super(6344);

    }

    serialize() {

    }

    deserialize(buffer) {

    }
};
module.exports.KrosmasterInventoryRequestMessage = KrosmasterInventoryRequestMessage;
module.exports.messages[6344] = KrosmasterInventoryRequestMessage;

class KrosmasterPlayingStatusMessage extends ProtocolMessage {
    constructor(playing) {
        super(6347);
        this.playing = playing;
    }

    serialize() {
        this.buffer.writeBoolean(this.playing);
    }

    deserialize(buffer) {
        this.playing = buffer.readBoolean();
    }
};
module.exports.KrosmasterPlayingStatusMessage = KrosmasterPlayingStatusMessage;
module.exports.messages[6347] = KrosmasterPlayingStatusMessage;

class KrosmasterTransferMessage extends ProtocolMessage {
    constructor(uid, failure) {
        super(6348);
        this.uid = uid;
        this.failure = failure;
    }

    serialize() {
        this.buffer.writeUTF(this.uid);
        this.buffer.writeByte(this.failure);
    }

    deserialize(buffer) {
        this.uid = buffer.readUTF();
        this.failure = buffer.readByte();
        if (this.failure < 0) {
            throw new Error("Forbidden value (" + this.failure + ") on element of KrosmasterTransferMessage.failure.");
        }
    }
};
module.exports.KrosmasterTransferMessage = KrosmasterTransferMessage;
module.exports.messages[6348] = KrosmasterTransferMessage;

class KrosmasterTransferRequestMessage extends ProtocolMessage {
    constructor(uid) {
        super(6349);
        this.uid = uid;
    }

    serialize() {
        this.buffer.writeUTF(this.uid);
    }

    deserialize(buffer) {
        this.uid = buffer.readUTF();
    }
};
module.exports.KrosmasterTransferRequestMessage = KrosmasterTransferRequestMessage;
module.exports.messages[6349] = KrosmasterTransferRequestMessage;

class ClientYouAreDrunkMessage extends DebugInClientMessage {
    constructor(level, message) {
        super(level, message);
        this.messageId = 6594;
    }

    serialize() {
        super.serialize();
    }

    deserialize(buffer) {
        super.deserialize(buffer);
    }
};
module.exports.ClientYouAreDrunkMessage = ClientYouAreDrunkMessage;
module.exports.messages[6594] = ClientYouAreDrunkMessage;

